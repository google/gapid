{{/*
 * Copyright (C) 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */}}

{{define "Go.Init"}}
  Namespace.AddClassOf((*{{.Name}})(nil))¶
{{end}}

{{define "Go.FrozenInit"}}
  Namespace.AddFrozenOf((*{{.Name}})(nil))¶
{{end}}

{{define "Go.Class"}}
  {{$simple := .IsSimple}}
  {{range .Implements}}
    {{if ne .Package $.Package}}
      var _ {{.Package}}.{{.Name}} = (*{{$.Name}})(nil) // Interface compliance check.
    {{else}}
      var _ {{.Name}} = (*{{$.Name}})(nil) // Interface compliance check.
    {{end}}
  {{end}}
  {{if .Implements}}¶{{end}}
  type binaryClass{{.Name}} struct{}¶
  ¶
  func (*{{.Name}}) Class() binary.Class {»¶
    return (*binaryClass{{.Name}})(nil)¶
  «}¶
  func doEncode{{.Name}}(e {{if $simple}}pod.Writer{{else}}binary.Encoder{{end}}, o *{{.Name}}) {»¶
    {{range .Fields}}
      {{Call "Go.Encode" (Var .Type "o." .Name)}}
    {{end}}
  «}¶
  func doDecode{{.Name}}(d {{if $simple}}pod.Reader{{else}}binary.Decoder{{end}}, o *{{.Name}}) {»¶
    {{range .Fields}}
      {{Call "Go.Decode" (Var .Type "o." .Name)}}
    {{end}}
  «}¶
  func doDecodeRaw{{.Name}}(d {{if $simple}}pod.Reader{{else}}binary.Decoder{{end}}, o *{{.Name}}) {»¶
    {{range .Fields}}
      {{Call "Go.Decode" (Var .Type "o." .Name)}}
    {{end}}
  «}¶
  {{$base := 18}}
  {{$wrap := gt (len .Name) (add $base 7)}}
  func (*binaryClass{{.Name}}) Encode(e binary.Encoder, obj binary.Object) {»¶
    doEncode{{.Name}}(e, obj.(*{{.Name}}))¶
  «}¶
  func (*binaryClass{{.Name}}) New() binary.Object {»¶
    return &{{BraceIfNeeded .Name}}{}¶
  «}¶
  func (*binaryClass{{.Name}}) DecodeTo(d binary.Decoder, obj binary.Object) {»¶
    doDecode{{.Name}}(d, obj.(*{{.Name}}))¶
  «}¶
  {{if $simple}}
  func (o *{{.Name}}) WriteSimple(w pod.Writer) {»¶
    doEncode{{.Name}}(w, o)¶
  «}¶
  func (o *{{.Name}}) ReadSimple(r pod.Reader) {»¶
    doDecode{{.Name}}(r, o)¶
  «}¶
  {{end}}
  {{if File.Directive "Schema" true}}
    func (c *binaryClass{{.Name}}) Schema() *binary.Entity {»¶
	 return &{{if File.Module.IsTest}}test_{{end}}entities[ixǁ{{.Name}}]¶
    «}¶
  {{end}}
{{end}}

{{define "Go.doDecode"}}
func doDecode{{.Name}}(d binary.Decoder, o *{{.Name}}) error {»¶
  {{range .Fields}}
    {{Call "Go.Decode" (Var .Type "o." .Name)}}
  {{end}}
  return d.Error()¶
«}¶
{{end}}

{{define "Go.UpgradeClass"}}
  {{$name := .Tags.Get "name"}}
  {{if not $name}}
    {{Error "Did not specify name directive for Frozen %s" .Name}}
  {{end}}
  {{$className  := (print "binaryClass" .Name)}}
  {{$currentClassName := (print "binaryClass" $name)}}
  type {{$className}} struct{ binary.FrozenClassBase }¶
  ¶
  func (*{{.Name}}) Class() binary.Class {»¶
    return &{{BraceIfNeeded $className}}{}¶
  «}¶
  {{$base := 18}}
  {{$wrap := gt (len .Name) (add $base 7)}}
  {{template "Go.doDecode" .}}
  {{$doUpgradeDecode := (print "doUpgradeDecodeǀ" .Name "ǁ" $name)}}
  func {{$doUpgradeDecode}}(d binary.Decoder, o *{{$name}}) {»¶
    old := &{{BraceIfNeeded .Name}}{}¶
    doDecode{{.Name}}(d, old)¶
    if d.Error() != nil {»¶
      return¶
   «}¶
    old.upgrade(o) // This upgrade() method is not code generated.¶
  «}¶
  func (*{{$className}}) New() binary.Object {»¶
    return &{{BraceIfNeeded $name}}{}¶
  «}¶
  func (*{{$className}}) DecodeTo(d binary.Decoder, obj binary.Object) {»¶
    {{$doUpgradeDecode}}(d, obj.(*{{$name}}))¶
  «}¶
  ¶
  {{if File.Directive "Schema" true}}
    {{$wrap := gt (len .Name) (add $base 4)}}
    func (*binaryClass{{.Name}}) Schema() *binary.Entity{{if not $wrap}}║{{end}} {»{{if $wrap}}¶{{else}}•{{end}}
      return schema{{.Name}}{{if $wrap}}¶{{else}}•{{end}}
    «}¶
    ¶
    var schema{{.Name}} = &binary.Entity{»¶
      Package:║"{{.Package}}",¶
      {{if .Display}}Display:║"{{.Display}}",¶{{end}}
      Identity:║"{{$name}}",¶
      {{if .Version}}Version:║"{{.Version}}",¶{{end}}
      {{if not (len .Fields)}}
	Fields:║[]binary.Field{},¶
      {{else}}
	Fields: []binary.Field{»¶
	  {{range .Fields}}
	    {Declared:║"{{.Declared}}", Type: {{Call "Go.Schema" .Type}}},¶
	  {{end}}
	«},¶
      {{end}}
    «}¶
   {{end}}
{{end}}

{{define "Go.Encode.Primitive"}}
  {{if eq .Type.Native .Type.Name}}
    e.{{.Type.Method}}({{.Name}})¶
  {{else}}
    e.{{.Type.Method}}({{.Type.Native}}({{.Name}}))¶
  {{end}}
{{end}}

{{define "Go.Encode.Struct"}}
  {{if .Type.IsSimple}}
    e.Simple(&{{BraceIfNeeded .Name}})¶
  {{else}}
    e.Struct(&{{BraceIfNeeded .Name}})¶
  {{end}}
{{end}}

{{define "Go.Encode.Pointer"}}
  if {{.Name}} != nil {»¶
    e.Object({{.Name}})¶
  «} else {»¶
    e.Object(nil)¶
  «}¶
{{end}}

{{define "Go.Encode.Interface"}}
  e.Object({{.Name}})¶
{{end}}

{{define "Go.Encode.Variant"}}
  e.Variant({{.Name}})¶
{{end}}

{{define "Go.Encode.Any"}}
  schema.Any{}.EncodeValue(e, {{.Name}})¶
{{end}}

{{define "Go.Encode_Length"}}
  e.Uint32(uint32(len({{.Name}})))¶
{{end}}

{{define "Go.Encode.Slice#byte"}}
  {{template "Go.Encode_Length" $}}
  e.Data({{.Name}})¶
{{end}}

{{define "Go.Encode.Slice#uint8"}}
  {{template "Go.Encode_Length" $}}
  e.Data({{.Name}})¶
{{end}}

{{define "Go.Encode.Slice"}}
  {{template "Go.Encode_Length" $}}
  for i := range {{.Name}} {»¶
    curr := &{{BraceIfNeeded .Name}}[i]¶
    {{Call "Go.Encode" (Var .Type.ValueType "*curr")}}
  «}¶
{{end}}

{{define "Go.Encode.Array#byte"}}
  e.Data({{BraceIfNeeded .Name}}[:{{.Type.Size}}])¶
{{end}}

{{define "Go.Encode.Array#uint8"}}
  e.Data({{BraceIfNeeded .Name}}[:{{.Type.Size}}])¶
{{end}}

{{define "Go.Encode.Array"}}
  for i := range {{.Name}} {»¶
    curr := &{{BraceIfNeeded .Name}}[i]¶
    {{Call "Go.Encode" (Var .Type.ValueType "*curr")}}
  «}¶
{{end}}

{{define "Go.Encode.Map"}}
  {{template "Go.Encode_Length" $}}
  for _, k := range ({{.Name}}).KeysSorted() {»¶
    v := ({{.Name}})[k]¶
    {{Call "Go.Encode" (Var .Type.KeyType "k")}}
    {{Call "Go.Encode" (Var .Type.ValueType "v")}}
  «}¶
{{end}}

{{define "Go.Decode.Primitive"}}
  {{.Name}} = {{.Type.Name}}(d.{{.Type.Method}}())¶
{{end}}

{{define "Go.Decode.Struct"}}
  {{if .Type.IsSimple}}
    d.Simple(&{{BraceIfNeeded .Name}})¶
  {{else}}
    d.Struct(&{{BraceIfNeeded .Name}})¶
  {{end}}
{{end}}

{{define "Go.Decode.Pointer"}}
  if obj := d.Object(); obj != nil {»¶
    {{.Name}} = obj.({{.Type}})¶
  «} else {»¶
    {{.Name}} = nil¶
  «}¶
{{end}}

{{define "Go.Decode.Interface"}}
  {{.Name}} = {{.Type.Name}}Cast(d.Object())¶
{{end}}

{{define "Go.Decode.Variant"}}
  {{.Name}} = {{.Type.Name}}Cast(d.Variant())¶
{{end}}

{{define "Go.Decode.Any"}}
  {{.Name}} = schema.Any{}.DecodeValue(d)¶
{{end}}

{{define "Go.Decode_Length"}}
  if count := d.Count(); count > 0 {»¶
    {{.Name}} = make({{.Type}}, count)¶
{{end}}

{{define "Go.Decode.Slice#byte"}}
  {{template "Go.Decode_Length" $}}
    d.Data({{.Name}})¶
  «}¶
{{end}}

{{define "Go.Decode.Slice#uint8"}}
  {{template "Go.Decode_Length" $}}
    d.Data({{.Name}})¶
  «}¶
{{end}}

{{define "Go.Decode.Slice"}}
  {{template "Go.Decode_Length" $}}
    for i := range {{.Name}} {»¶
      curr := &{{BraceIfNeeded .Name}}[i]¶
      {{Call "Go.Decode" (Var .Type.ValueType "*curr")}}
    «}¶
  «}¶
{{end}}

{{define "Go.Decode.Array#byte"}}
  d.Data({{BraceIfNeeded .Name}}[:{{.Type.Size}}])¶
{{end}}

{{define "Go.Decode.Array#uint8"}}
  d.Data({{BraceIfNeeded .Name}}[:{{.Type.Size}}])¶
{{end}}

{{define "Go.Decode.Array"}}
  for i := range {{.Name}} {»¶
    curr := &{{BraceIfNeeded .Name}}[i]¶
    {{Call "Go.Decode" (Var .Type.ValueType "*curr")}}
  «}¶
{{end}}

{{define "Go.Decode.Map"}}
  if count := d.Count(); count > 0 {»¶
    {{.Name}} = make({{.Type}}, count)¶
    m := {{.Name}}¶
    for i := uint32(0); i < count; i++ {»¶
      var k {{.Type.KeyType}}¶
      var v {{.Type.ValueType}}¶
      {{Call "Go.Decode" (Var .Type.KeyType "k")}}
      {{Call "Go.Decode" (Var .Type.ValueType "v")}}
      m[k] = v¶
    «}¶
  «}¶
{{end}}

{{define "Go.Schema.Primitive"}}&schema.Primitive{Name: "{{.Name}}", Method: schema.{{.Method}}}{{end}}
{{define "Go.Schema.Struct"}}&schema.Struct{Entity: (*{{.}})(nil).Class().Schema()}{{end}}
{{define "Go.Schema.Pointer"}}&schema.Pointer{Type: {{Call "Go.Schema" .Type}}}{{end}}
{{define "Go.Schema.Interface"}}&schema.Interface{Name: "{{.Name}}"}{{end}}
{{define "Go.Schema.Variant"}}&schema.Variant{Name: "{{.Name}}"}{{end}}
{{define "Go.Schema.Any"}}&schema.Any{}{{end}}
{{define "Go.Schema.Slice"}}&schema.Slice{Alias: "{{.Alias}}", ValueType: {{Call "Go.Schema" .ValueType}}}{{end}}
{{define "Go.Schema.Array"}}&schema.Array{Alias: "{{.Alias}}", ValueType: {{Call "Go.Schema" .ValueType}}, Size: {{.Size}}}{{end}}
{{define "Go.Schema.Map"}}&schema.Map{Alias: "{{.Alias}}", KeyType: {{Call "Go.Schema" .KeyType}}, ValueType: {{Call "Go.Schema" .ValueType}}}{{end}}

{{define "Go.BinaryImports"}}
  {{if (len .Structs) or (len .Frozen)}}
    {{File.Import "github.com/google/gapid/core/data/id"}}
    {{File.Import "github.com/google/gapid/core/data/pod"}}
    {{File.Import "github.com/google/gapid/framework/binary"}}
    {{if not .IsTest}}
      {{File.Import "github.com/google/gapid/framework/binary/registry"}}
    {{end}}
  {{end}}
  {{if and (File.Directive "Schema" true) (len .Frozen)}}
    {{File.Import "github.com/google/gapid/framework/binary/schema"}}
  {{end}}
  {{range .Structs}}
    {{range .Implements}}
      {{if ne .Package $.Name}}
        {{File.Import (print "github.com/google/gapid/framework/" .Package)}}
      {{end}}
    {{end}}
    {{range .Fields}}
      {{Call "Go.Import" .Type}}
    {{end}}
  {{end}}
  {{range .Frozen}}
    {{range .Fields}}
      {{Call "Go.Import" .Type}}
      {{Call "Go.ImportAny" .Type}}
    {{end}}
  {{end}}
{{end}}

{{define "Go.Binary"}}
  {{template "Go.BinaryImports" .}}
  {{template "Go.Prelude" .}}
  {{if or (File.Directive "Schema" false) (not (len .Frozen))}}
    ¶
    // Make sure schema init() runs first¶
    import _ "github.com/google/gapid/framework/binary/schema"¶
  {{end}}
  {{if (len .Structs) or (len .Frozen)}}
    ¶
    // force use the id package, because our imports handling is wrong¶
    var _ id.ID¶
    var _ pod.Reader¶
  {{end}}
  {{if len .Structs}}
    ¶
    const (»¶
     {{range $i, $s := .Structs}}
       {{if (eq $i 0)}}
         ixǁ{{$s.Name}} = iota¶
       {{else}}
         ixǁ{{$s.Name}}¶
       {{end}}
     {{end}}
    «)¶
    ¶
    var {{if .IsTest}}test_{{end}}entities [{{len .Structs}}]binary.Entity¶
    {{if not .IsTest}}
      ¶
      var Namespace = registry.NewNamespace()¶
    {{end}}
    ¶
    func init() {»¶
      binary_init()
    «}¶
    ¶
    var binary_init_done = false¶
    ¶
    func binary_init() {»¶
      if binary_init_done {»¶
        return¶
      «}¶
      binary_init_done = true¶
      {{if not .IsTest}}
        registry.Global.AddFallbacks(Namespace)¶
      {{end}}
      {{range .Structs}}{{template "Go.Init" .}}{{end}}
      {{range .Frozen}}{{template "Go.FrozenInit" .}}{{end}}
    «}¶
  {{end}}
  {{range .Structs}}
    ¶
    {{template "Go.Class" .}}
  {{end}}
  {{range .Frozen}}
    ¶
    {{template "Go.UpgradeClass" .}}
  {{end}}
{{end}}
