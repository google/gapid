{{/*
 * Copyright (C) 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */}}

{{define "Java.Imports"}}{{end}}
{{define "Java.Extra"}}{{end}}
{{define "Java.EndExtra"}}{{end}}

{{define "Java.Extra#Box"}}
  @Override¶
  public Object unwrap() {»¶
      return getValue();¶
  «}¶
  ¶
{{end}}

{{define "Java.Imports#atom.Group"}}
  import java.util.Arrays;¶
{{end}}

{{define "Java.Extra#atom.Group"}}
 @Override¶
  public boolean equals(Object o) {»¶
    if (this == o) return true;¶
    if (o == null || getClass() != o.getClass()) return false;¶
    AtomGroup atomGroup = (AtomGroup)o;¶
    if (myName != null ? !myName.equals(atomGroup.myName) : atomGroup.myName != null) return false;¶
    if (myRange != null ? !myRange.equals(atomGroup.myRange) : atomGroup.myRange != null) return false;¶
    // the roots of different hierarchies are all the same with only the subgroups being different.¶
    if (!Arrays.equals(mySubGroups, atomGroup.mySubGroups)) return false;¶
    return true;¶
  «}¶
  ¶
  @Override¶
  public int hashCode() {»¶
    int result = myName != null ? myName.hashCode() : 0;¶
    result = 31 * result + (myRange != null ? myRange.hashCode() : 0);¶
    // we don't want to hash each element in the array as that takes way too long.¶
    result = 31 * result + mySubGroups.length;¶
    return result;¶
  «}¶
  ¶
  @Override¶
  public String toString() {»¶
    return║"AtomGroup{" +¶
          ║"name='" + myName + '\'' + ", range=" + myRange + ", subGroups=" + Arrays.toString(mySubGroups) + '}';¶
  «}¶
  ¶
{{end}}

{{define "Java.Extra#atom.List"}}
  public Atom get(long index) {»¶
    return myAtoms[(int)index];¶
  «}¶
  ¶
{{end}}

{{define "Java.Imports#atom.Metadata"}}
  import com.google.gapid.service.ApiID;
{{end}}

{{define "Java.Extra#atom.Metadata"}}
  public static final AtomMetadata NO_METADATA = new AtomMetadata().setDisplayName("<unknown>");¶
  ¶
  public static AtomMetadata find(Entity c) {»¶
    for (BinaryObject o : c.getMetadata()) {»¶
      if (o instanceof AtomMetadata) {»¶
        AtomMetadata meta = (AtomMetadata)o;¶
        meta.prepare(c);¶
        return meta;¶
      «}¶
    «}¶
    return NO_METADATA;¶
  «}¶
  ¶
  boolean myIsPrepared = false;¶
  int myResultIndex = -1;¶
  int myExtrasIndex = -1;¶
  ¶
  private void prepare(Entity c) {»¶
    if (myIsPrepared) return;¶
    myIsPrepared = true;¶
    for (int index = 0; index < c.getFields().length; index++) {»¶
      Field field = c.getFields()[index];¶
      if (field.getDeclared().equals("Result")) {»¶
        myResultIndex = index;¶
      «}¶
      if (field.getType() instanceof Slice) {»¶
        Type vt = ((Slice)field.getType()).getValueType();¶
        if (vt instanceof Interface) {»¶
          if ("atom.Extra".equals(((Interface)vt).name)) {»¶
            myExtrasIndex = index;¶
          «}¶
        «}¶
      «}¶
    «}¶
    if (myDisplayName == null) {»¶
      myDisplayName = "<unknown>";¶
    «}¶
  «}¶
  ¶
  @Override¶
  public boolean equals(Object o) {»¶
    if (this == o) return true;¶
    if (o == null || getClass() != o.getClass()) return false;¶
    ¶
    AtomMetadata that = (AtomMetadata)o;¶
    ¶
    if (myIsPrepared != that.myIsPrepared) return false;¶
    if (myResultIndex != that.myResultIndex) return false;¶
    if (myExtrasIndex != that.myExtrasIndex) return false;¶
    if (myEndOfFrame != that.myEndOfFrame) return false;¶
    if (myDrawCall != that.myDrawCall) return false;¶
    if (myAPI != null ? !myAPI.equals(that.myAPI) : that.myAPI != null) return false;¶
    if (myDisplayName != null ? !myDisplayName.equals(that.myDisplayName) : that.myDisplayName != null) return false;¶
    if (myDocumentationUrl != null ? !myDocumentationUrl.equals(that.myDocumentationUrl) : that.myDocumentationUrl != null) return false;¶
    ¶
    return true;¶
  «}¶
  ¶
  @Override¶
  public int hashCode() {»¶
    int result = (myIsPrepared ? 1 : 0);¶
    result = 31 * result + myResultIndex;¶
    result = 31 * result + myExtrasIndex;¶
    result = 31 * result + (myAPI != null ? myAPI.hashCode() : 0);¶
    result = 31 * result + (myDisplayName != null ? myDisplayName.hashCode() : 0);¶
    result = 31 * result + (myEndOfFrame ? 1 : 0);¶
    result = 31 * result + (myDrawCall ? 1 : 0);¶
    result = 31 * result + (myDocumentationUrl != null ? myDocumentationUrl.hashCode() : 0);¶
    return result;¶
  «}¶
  ¶
  @Override¶
  public String toString() {»¶
    return║"AtomMetadata{" +¶
          ║"prepared=" + myIsPrepared +¶
          ║", resultIndex=" + myResultIndex +¶
          ║", extrasIndex=" + myExtrasIndex +¶
          ║", API=" + myAPI +¶
          ║", displayName='" + myDisplayName + '\'' +¶
          ║", endOfFrame=" + myEndOfFrame +¶
          ║", drawCall=" + myDrawCall +¶
          ║", documentationUrl='" + myDocumentationUrl + '\'' +¶
          ║'}';¶
  «}¶
  ¶
{{end}}

{{define "Java.Extra#atom.Observation"}}
  ¶
  @Override¶
  public boolean equals(Object o) {»¶
    if (this == o) return true;¶
    if (o == null || getClass() != o.getClass()) return false;¶
    Observation that = (Observation)o;¶
    if (myRange != null ? !myRange.equals(that.myRange) : that.myRange != null) return false;¶
    if (myID != null ? !myID.equals(that.myID) : that.myID != null) return false;¶
    return true;¶
  «}¶
  ¶
  @Override¶
  public int hashCode() {»¶
    int result = myRange != null ? myRange.hashCode() : 0;¶
    result = 31 * result + (myID != null ? myID.hashCode() : 0);¶
    return result;¶
  «}¶
  ¶
  @Override¶
  public String toString() {»¶
    return "Observation{ID=" + myID + ", range=" + myRange + '}';¶
  «}¶
  ¶
{{end}}

{{define "Java.Imports#atom.Observations"}}
  import java.util.Arrays;¶
{{end}}

{{define "Java.Extra#atom.Observations"}}
  ¶
  @Override¶
  public boolean equals(Object o) {»¶
    if (this == o) return true;¶
    if (o == null || getClass() != o.getClass()) return false;¶
    Observations that = (Observations)o;¶
    if (!Arrays.equals(myReads, that.myReads)) return false;¶
    if (!Arrays.equals(myWrites, that.myWrites)) return false;¶
    return true;¶
  «}¶
  ¶
  @Override¶
  public int hashCode() {»¶
    int result = Arrays.hashCode(myReads);¶
    result = 31 * result + Arrays.hashCode(myWrites);¶
    return result;¶
  «}¶
  ¶
  @Override¶
  public String toString() {»¶
    return "Observations{reads=" + Arrays.toString(myReads) + ", writes=" + Arrays.toString(myWrites) + '}';¶
  «}¶
  ¶
{{end}}

{{define "Java.Extra#atom.Range"}}
  @Override¶
  public boolean equals(Object o) {»¶
    if (this == o) return true;¶
    if (o == null || getClass() != o.getClass()) return false;¶
    Range range = (Range)o;¶
    if (myStart != range.myStart) return false;¶
    if (myEnd != range.myEnd) return false;¶
    return true;¶
  «}¶
  ¶
  @Override¶
  public int hashCode() {»¶
    int result = (int)(myStart ^ (myStart >>> 32));¶
    result = 31 * result + (int)(myEnd ^ (myEnd >>> 32));¶
    return result;¶
  «}¶
  ¶
  @Override¶
  public String toString() {»¶
    return "Range{start=" + myStart + ", end=" + myEnd + '}';¶
  «}¶
  ¶
{{end}}

{{define "Java.Extra#memory.Pointer"}}
  ¶
  @Override¶
  public String toString() {»¶
    return "0x" + Long.toHexString(myAddress) + "@" + myPool;¶
  «}¶
  ¶
{{end}}

{{define "Java.Extra#memory.Range"}}
  public boolean contains(long value) {»¶
    return value >= myBase && value < myBase + mySize;¶
  «}¶
  ¶
  @Override¶
  public boolean equals(Object o) {»¶
    if (this == o) return true;¶
    if (o == null || getClass() != o.getClass()) return false;¶
    MemoryRange that = (MemoryRange)o;¶
    if (myBase != that.myBase) return false;¶
    if (mySize != that.mySize) return false;¶
    return true;¶
  «}¶
  ¶
  @Override¶
  public int hashCode() {»¶
    int result = (int)(myBase ^ (myBase >>> 32));¶
    result = 31 * result + (int)(mySize ^ (mySize >>> 32));¶
    return result;¶
  «}¶
  ¶
  @Override¶
  public String toString() {»¶
    return "MemoryRange{base=" + myBase + ", size=" + mySize + '}';¶
  «}¶
  ¶
{{end}}

{{define "Java.EndExtra#snippets.CanFollow"}}
  ¶
  /**¶
  •* find the CanFollow snippet in the snippets.¶
  •* @param snippets any kind of snippets.¶
  •* @return the CanFollow snippet or null.¶
  •*/¶
  public static CanFollow fromSnippets(KindredSnippets[] snippets) {»¶
    for (KindredSnippets obj : snippets) {»¶
      if (obj instanceof CanFollow) {»¶
        return (CanFollow)obj;¶
      «}¶
    «}¶
    return null;¶
  «}¶
  ¶
{{end}}

{{define "Java.Extra#snippets.fieldPath"}}
  ¶
  @Override¶
  public String getSegmentString() {»¶
    return "FieldPath(" + myName +")";¶
  «}¶
  ¶
{{end}}

{{define "Java.EndExtra#snippets.fieldPath"}}
  ¶
  public FieldPath(Pathway base, String name) {»¶
    myBase = base;¶
    myName = name;¶
  «}¶
  ¶
  @Override¶
  public Pathway base() {»¶
    return getBase();¶
  «}¶
  ¶
  @Override¶
  public boolean equals(Object o) {»¶
    if (this == o) return true;¶
    if (o == null || getClass() != o.getClass()) return false;¶
  ¶
    FieldPath fieldPath = (FieldPath)o;¶
  ¶
    if (myBase != null ? !myBase.equals(fieldPath.myBase) : fieldPath.myBase != null) return false;¶
    if (myName != null ? !myName.equals(fieldPath.myName) : fieldPath.myName != null) return false;¶
  ¶
    return true;¶
  «}¶
  ¶
  @Override¶
  public int hashCode() {»¶
    int result = myBase != null ? myBase.hashCode() : 0;¶
    result = 31 * result + (myName != null ? myName.hashCode() : 0);¶
    return result;¶
  «}¶
  ¶
{{end}}

{{define "Java.Imports#snippets.Labels"}}
  import java.util.ArrayList;¶
  import java.util.Arrays;¶
  import java.util.Collection;¶
  import java.util.List;¶
{{end}}

{{define "Java.EndExtra#snippets.Labels"}}
  ¶
  ¶
  @Override¶
  public String toString() {»¶
    return myPath + " = " + Arrays.asList(myLabels).toString();¶
  «}¶
  ¶
  /**¶
  •* find the labels in the snippets.¶
  •* @param snippets any kind of snippets.¶
  •* @return the labels maybe null.¶
  •*/¶
  ¶
  public static Labels fromSnippets(KindredSnippets[] snippets) {»¶
    for (KindredSnippets obj : snippets) {»¶
      if (obj instanceof Labels) {»¶
        return (Labels)obj;¶
      «}¶
    «}¶
    return null;¶
  «}¶
  ¶
  /**¶
  •* filter a list of constants down to those present in the snippet.¶
  •* @param constants a list of constants to filter.¶
  •* @return the constants to prefer.¶
  •*/¶
  ¶
  public List<Constant> preferred(Collection<Constant> constants) {»¶
    List<Constant> preferred = new ArrayList<Constant>();¶
    for (Constant c : constants) {»¶
      for (int i = 0; i < myLabels.length; i++) {»¶
         •if (c.getName().equals(myLabels[i])) {»¶
           •preferred.add(c);¶
         •«}¶
      «}¶
    «}¶
    return preferred;¶
  «}¶
  ¶
{{end}}

{{define "Java.Imports#snippets.namePath"}}
  import com.google.gapid.proto.service.snippets.SnippetsProtos.SymbolCategory;¶
{{end}}

{{define "Java.Extra#snippets.namePath"}}
  public NamePath(SymbolCategory cat, String name) {»¶
    this.myCat = cat;¶
    this.myName = name;¶
  «}¶
  ¶
  @Override¶
  public String getSegmentString() {»¶
    return "Namepath(" + myCat + " " + myName + ")";¶
  «}¶
  ¶
{{end}}

{{define "Java.EndExtra#snippets.namePath"}}
  ¶
  @Override¶
  public Pathway base() {»¶
    return null;¶
  «}¶
  ¶
  @Override¶
  public boolean equals(Object o) {»¶
    if (this == o) return true;¶
    if (o == null || getClass() != o.getClass()) return false;¶
  ¶
    NamePath namePath = (NamePath)o;¶
  ¶
    if (myCat != null ? !myCat.equals(namePath.myCat) : namePath.myCat != null) return false;¶
    if (myName != null ? !myName.equals(namePath.myName) : namePath.myName != null) return false;¶
  ¶
    return true;¶
  «}¶
  ¶
  @Override¶
  public int hashCode() {»¶
    int result = myCat != null ? myCat.hashCode() : 0;¶
    result = 31 * result + (myName != null ? myName.hashCode() : 0);¶
    return result;¶
  «}¶
  ¶
{{end}}

{{define "Java.Imports#snippets.Observations"}}
  import com.google.gapid.proto.service.snippets.SnippetsProtos.ObservationType;¶
{{end}}

{{define "Java.EndExtra#snippets.Observations"}}
  ¶
  /**¶
  •* find the observations in the snippets.¶
  •* @param snippets any kind of snippets.¶
  •* @return the observations maybe null.¶
  •*/¶
  public static Observations fromSnippets(KindredSnippets[] snippets) {»¶
    for (KindredSnippets obj : snippets) {»¶
      if (obj instanceof Observations) {»¶
        return (Observations)obj;¶
      «}¶
    «}¶
    return null;¶
  «}¶
  ¶
{{end}}

{{define "Java.Imports#snippets.partPath"}}
  import com.google.gapid.proto.service.snippets.SnippetsProtos.PartKind;¶
{{end}}

{{define "Java.Extra#snippets.partPath"}}
  ¶
  @Override¶
  public String getSegmentString() {»¶
    return "PartPath(" + myKind + ")";¶
  «}¶
  ¶
{{end}}

{{define "Java.EndExtra#snippets.partPath"}}
  ¶
  public PartPath(Pathway base, PartKind kind) {»¶
    myBase = base;¶
    myKind = kind;¶
  «}¶
  ¶
  @Override¶
  public Pathway base() {»¶
    return getBase();¶
  «}¶
  ¶
  @Override¶
  public boolean equals(Object o) {»¶
    if (this == o) return true;¶
    if (o == null || getClass() != o.getClass()) return false;¶
  ¶
    PartPath partPath = (PartPath)o;¶
  ¶
    if (myBase != null ? !myBase.equals(partPath.myBase) : partPath.myBase != null) return false;¶
    if (myKind != null ? !myKind.equals(partPath.myKind) : partPath.myKind != null) return false;¶
  ¶
    return true;¶
  «}¶
  ¶
  @Override¶
  public int hashCode() {»¶
    int result = myBase != null ? myBase.hashCode() : 0;¶
    result = 31 * result + (myKind != null ? myKind.hashCode() : 0);¶
    return result;¶
  «}¶
  ¶
{{end}}

{{define "Java.Extra#snippets.relativePath"}}
  ¶
  @Override¶
  public String getSegmentString() {»¶
    return "RelativePath(" + myTypeName + ")";¶
  «}¶
  ¶
{{end}}

{{define "Java.EndExtra#snippets.relativePath"}}
  ¶
  @Override¶
  public Pathway base() {»¶
    return null;¶
  «}¶
  ¶
  @Override¶
  public boolean equals(Object o) {»¶
    if (this == o) return true;¶
    if (o == null || getClass() != o.getClass()) return false;¶
  ¶
    RelativePath that = (RelativePath)o;¶
  ¶
    if (myTypeName != null ? !myTypeName.equals(that.myTypeName) : that.myTypeName != null) return false;¶
  ¶
    return true;¶
  «}¶
  ¶
  @Override¶
  public int hashCode() {»¶
    return myTypeName != null ? myTypeName.hashCode() : 0;¶
  «}¶
  ¶
{{end}}
