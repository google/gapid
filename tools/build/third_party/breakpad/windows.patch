diff --git a/src/common/dwarf/dwarf2reader.cc b/src/common/dwarf/dwarf2reader.cc
index f2dc4afe..56bbe98a 100644
--- a/src/common/dwarf/dwarf2reader.cc
+++ b/src/common/dwarf/dwarf2reader.cc
@@ -64,7 +64,7 @@ CompilationUnit::CompilationUnit(const string& path,
       is_split_dwarf_(false), dwo_id_(0), dwo_name_(),
       skeleton_dwo_id_(0), ranges_base_(0), addr_base_(0),
       have_checked_for_dwp_(false), dwp_path_(),
-      dwp_byte_reader_(), dwp_reader_() {}
+      dwp_byte_reader_()/*, dwp_reader_()*/ {}
 
 // Initialize a compilation unit from a .dwo or .dwp file.
 // In this case, we need the .debug_addr section from the
@@ -349,10 +349,12 @@ uint64 CompilationUnit::Start() {
   // If this is a skeleton compilation unit generated with split DWARF,
   // and the client needs the full debug info, we need to find the full
   // compilation unit in a .dwo or .dwp file.
+  /*
   if (!is_split_dwarf_
       && dwo_name_ != NULL
       && handler_->NeedSplitDebugInfo())
     ProcessSplitDwarf();
+  */
 
   return ourlength;
 }
@@ -602,6 +604,7 @@ void CompilationUnit::ProcessDIEs() {
 
 // Check for a valid ELF file and return the Address size.
 // Returns 0 if not a valid ELF file.
+/*
 inline int GetElfWidth(const ElfReader& elf) {
   if (elf.IsElf32File())
     return 4;
@@ -900,6 +903,7 @@ uint32 DwpReader::LookupCUv2(uint64 dwo_id) {
   }
   return index;
 }
+*/
 
 LineInfo::LineInfo(const uint8_t *buffer, uint64 buffer_length,
                    ByteReader* reader, LineInfoHandler* handler):
diff --git a/src/common/dwarf/dwarf2reader.h b/src/common/dwarf/dwarf2reader.h
index 5d2d7f60..55b58fd0 100644
--- a/src/common/dwarf/dwarf2reader.h
+++ b/src/common/dwarf/dwarf2reader.h
@@ -59,7 +59,7 @@ namespace dwarf2reader {
 struct LineStateMachine;
 class Dwarf2Handler;
 class LineInfoHandler;
-class DwpReader;
+//class DwpReader;
 
 // This maps from a string naming a section to a pair containing a
 // the data for the section, and the size of the section.
@@ -557,7 +557,7 @@ class CompilationUnit {
   std::unique_ptr<ByteReader> dwp_byte_reader_;
 
   // DWP reader.
-   std::unique_ptr<DwpReader> dwp_reader_;
+   //std::unique_ptr<DwpReader> dwp_reader_;
 };
 
 // A Reader for a .dwp file.  Supports the fetching of DWARF debug
@@ -573,6 +573,7 @@ class CompilationUnit {
 // maps from the dwo_id to a set of offsets and lengths that
 // identify each .dwo file's contribution to the larger sections.
 
+/*
 class DwpReader {
  public:
   DwpReader(const ByteReader& byte_reader, ElfReader* elf_reader);
@@ -647,6 +648,7 @@ class DwpReader {
   const char* str_offsets_data_;
   size_t str_offsets_size_;
 };
+*/
 
 // This class is a reader for DWARF's Call Frame Information.  CFI
 // describes how to unwind stack frames --- even for functions that do
