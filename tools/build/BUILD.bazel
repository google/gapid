# Copyright (C) 2018 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("//:version.bzl", "gapid_version")

gapid_version(
    name = "build_properties",
    out = "build.properties",
    template = ":build_host_and_time",
    visibility = ["//visibility:public"],
)

# Note, this genrule reads the volatile-status.txt file, but is *not* executed on each build.
# However, the build timestamp is only really relevant for "official" builds from our build
# servers, which always start out with a clean env, and so the date actually makes sense.
# In other words, on developer machines, Build.Date in build.properties is meaningless.
genrule(
    name = "build_host_and_time",
    srcs = ["build.properties.in"],
    outs = ["build.properties.out"],
    cmd = "(" + ";".join([
        "echo Build.Host=$$(grep BUILD_HOST bazel-out/stable-status.txt | cut -d ' ' -f 2)",
        # The timestamp is in millis, but date -d @timestamp, expects the timestamp to be in seconds.
        "V=$$((($$(grep BUILD_TIMESTAMP bazel-out/volatile-status.txt | cut -d ' ' -f 2)+500)/1000))",
        "echo Build.Date=$$([ $$(uname) = 'Darwin' ] && date -jf %s $$V || date -d @$$V)",
    ]) + ") | cat $< - > $@",
    stamp = 1,
)

config_setting(
    name = "linux",
    values = {
        "cpu": "k8",
    },
    visibility = ["//visibility:public"],
)

config_setting(
    name = "darwin",
    values = {
        "cpu": "darwin",
    },
    visibility = ["//visibility:public"],
)

config_setting(
    name = "windows",
    values = {
        "cpu": "x64_windows",
    },
    visibility = ["//visibility:public"],
)

config_setting(
    name = "android-armeabi-v7a",
    values = {
        "cpu": "armeabi-v7a",
    },
    visibility = ["//visibility:public"],
)

config_setting(
    name = "android-arm64-v8a",
    values = {
        "cpu": "arm64-v8a",
    },
    visibility = ["//visibility:public"],
)

config_setting(
    name = "android-x86",
    values = {
        "cpu": "x86",
    },
    visibility = ["//visibility:public"],
)

config_setting(
    name = "debug",
    values = {
        "compilation_mode": "dbg",
    },
    visibility = ["//visibility:public"],
)

config_setting(
    name = "no-android",
    define_values = {
        "NO_ANDROID": "1",
    },
)

config_setting(
    name = "libinterceptor-from-source",
    define_values = {
        "LIBINTERCEPTOR_FROM_SOURCE": "1",
    },
    visibility = ["//visibility:public"],
)

cc_library(
    name = "jni",
    hdrs = [
        "jni.h",
        "jni_md.h",
    ],
    includes = ["."],
    visibility = ["//visibility:public"],
)

genrule(
    name = "copy_jni.h",
    srcs = ["@bazel_tools//tools/jdk:jni_header"],
    outs = ["jni.h"],
    cmd = "cp -f $< $@",
)

genrule(
    name = "copy_jni_md.h",
    srcs = select({
        ":linux": ["@bazel_tools//tools/jdk:jni_md_header-linux"],
        ":windows": ["@bazel_tools//tools/jdk:jni_md_header-windows"],
        ":darwin": ["@bazel_tools//tools/jdk:jni_md_header-darwin"],
    }),
    outs = ["jni_md.h"],
    cmd = "cp -f $< $@",
)
