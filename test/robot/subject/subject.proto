// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package subject;

import "core/os/android/apk/apk.proto";
import "test/robot/search/search.proto";
import "google/protobuf/duration.proto";

// Subject is the information we know about a given subject.
message Subject {
  // Id is the id of the app in the stash.
  string id = 1;
  // Information is the extracted details we know about the subject.
  oneof Information {
    // APK is the information if the subject type is an android APK.
	  apk.Information APK = 2;
  }
  Hints hints = 3;
}

message Hints {
  // traceTime is the preferred duration for tracing this subject.
  google.protobuf.Duration traceTime = 1;
  // API is the name of the api to capture on this subject, values can be gles and vulkan
  string API = 4;
}

// Service is the api to the robot app storage.
service Service {
  // Search is used to find subjects that match the given query.
  rpc Search(search.Query) returns(stream Subject) {};
  // Add pulls the subject from the stash, analyzes it and adds it to the service.
  // If the subject already exists, it will be returned without modification.
  rpc Add(AddRequest) returns(AddResponse) {};
  // Update modifies a subject entry
  rpc Update(UpdateRequest) returns(UpdateResponse) {};
}

message AddRequest {
  // Id is the id of the subject in the stash
  string id = 1;
  // hints is the set of trace hints for this subject.
  Hints hints = 2;
}

message AddResponse {
  // Subject is the subject that was generated by the add.
  Subject subject = 1;
  // Created is set to true if the subject was added by this call,
  // and false if it was already present
  bool created = 2;
}

message UpdateRequest {
  // Subject contains the information to merge into the subject.
  // If the id is present, it must match an existing subject.
  // Only updates the Hints field.
  Subject subject = 1;
}

message UpdateResponse {
  // Subject is the updated subject information.
  Subject subject = 1;
}
