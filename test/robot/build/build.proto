// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package build;

import "core/os/device/device.proto";
import "test/robot/search/search.proto";

// Type represents a build type.
enum Type {
  // UnknownType is the default (invalid) type.
  UnknownType = 0;
  // BuildBot is the type for builds from the official build bots.
  // For these kinds of builds, the tag must be set and can be used for merging.
  BuildBot = 1;
  // User is the type for a user built build but without local modifications.
  // For these types of builds, the cl must be set and can be used for merging.
  User = 2;
  // Local is the type for local modified source builds.
  // For these kinds of builds, the tag may be set, and if it is, it will be used
  // for merging.
  Local = 3;
}

// Information holds the non inferable meta inforamtion about a build.
message Information {
  // Type is the build type.
  Type type = 1;
  // The branch id if known of this build. This will normally be the git branch in
  // the main gapid repository.
  string branch = 2;
  // Cl is the gapid repository cl at the time of the build if known.
  // There may be multiple distinct builds at the same cl if the build is
  // allowed local modifications.
  string cl = 3;
  // Tag is the external tag of the build if known.
  // This is most often set by the build bot's, where it is common across all
  // the bots for a specific build.
  // Build uploads with the same tag will be merged.
  string tag = 4;
  // Description is a user assigned description of the build.
  string description = 5;
  // Builder is the device information for the machine that made the build.
  device.Instance builder = 6;
  // Uploader is the (optional) user name of the uploading entity.
  string uploader = 7;
}

// Artifact holds information about a single uploaded build artifact.
message Artifact {
  // Id is the id in the stash of the build artifact.
  string id = 1;
  // Tool is the set of tools in this artifact
  ToolSet tool = 2;
}

// ToolSet is the information for all of the tools extracted from a particular package or artifact.
message ToolSet {
  // Abi is the host system this toolset was built on.
  device.ABI abi = 1;
  // The tools provided from a particular host.
  HostToolSet host = 2;
  // The tools provided for each supported android abi.
  repeated AndroidToolSet android = 3;
}

// HostToolSet is the information for the tools extracted from a package for a particular host device.
message HostToolSet {
  // The stash id of the replay daemon.
  string gapir = 1;
  // The stash id of the graphics analysis server.
  string gapis = 2;
  // The stash id of the graphics analysis command line tool.
  string gapit = 3;
  // VirtualSwapChainLib is the stash id of the vulkan virtual-swap-chain loader
  // library.
  string virtual_swap_chain_lib = 4;
  // VirtualSwapChainLib is the stash id of the vulkan virtual-swap-chain loader
  // json file.
  string virtual_swap_chain_json = 5;
}

// AndroidToolSet is the information for the tools extracted from a package for a particular android ABI.
message AndroidToolSet {
  // The Android ABI this tool set runs on.
  device.ABI abi = 1;
  // The stash id of the gapid.apk.
  string gapid_apk = 2;
}

// Package represents an entry in a build track.
// It contains the merged set of build entries that all represent a single point in a tracks history.
// This allows multiple build outputs, from different build machines to be merged into a single package.
message Package {
  // Id is the unique id of the package.
  string id = 1;
  // Parent is the id of the package that precedes this one in the timeline.
  string parent = 2;
  // Information holds the build metadata.
  Information information = 3;
  // Artifact is the set of build artifacts that have been added to the package.
  repeated string artifact = 4;
  // Tool is the set of tools the package supports.
  repeated ToolSet tool = 5;
}

// Track represents a historical timeline of packages.
message Track {
  // Id is the unique id of the track.
  string id = 1;
  // Name is a human readable name for the track, it should still be unique, but may change.
  string name = 2;
  // Head is the id of the package at the head of this track.
  string head = 3;
  // Description is a human readable explanation for the tracks existance.
  string description = 4;
}

// Service is the api to the robot app storage.
service Service {
  // SearchArtifacts is used to find build artifacts that match the given query.
  rpc SearchArtifacts(search.Query) returns(stream Artifact) {};
  // SearchPackages is used to find build packages that match the given query.
  rpc SearchPackages(search.Query) returns(stream Package) {};
  // SearchTracks is used to find build tracks that match the given query.
  rpc SearchTracks(search.Query) returns(stream Track) {};
  // Add pulls the build from the stash, analyzes it and adds it to the service.
  // The build may be merged with an existing build set, see Information for more details about merging.
  rpc Add(AddRequest) returns(AddResponse) {};
  // UpdateTrack creates or updates a track entry.
  rpc UpdateTrack(UpdateTrackRequest) returns(UpdateTrackResponse) {};
  // UpdatePackage modifies a package entry.
  rpc UpdatePackage(UpdatePackageRequest) returns(UpdatePackageResponse) {};
}

message AddRequest {
  // Id is the id in the stash of the uploaded build.
  string id = 1;
  // Information holds the metadata for this entry.
  Information information = 2;
}

message AddResponse {
  // Id is the unique id of the build package.
  string id = 1;
  // Merged will be true if the upload was merged into an existing package.
  bool merged = 2;
}

message UpdateTrackRequest {
  // Track contains the information to merge into the track.
  // If the id is present, it must match an existing track.
  // If only a name is present, and it does not match an existing track, a new one will be created.
  // Missing fields will be left alone, present fields will be replaced.
  Track track = 1;
}

message UpdateTrackResponse {
  // Track is the updated track information.
  Track track = 1;
}

message UpdatePackageRequest {
  // Package contains the information to merge into the package.
  // If the id is present, it must match an existing package.
  // Only updates the Parent and Information.Description fields, only if present
  Package package = 1;
}

message UpdatePackageResponse {
  // Package is the updated package information.
  Package package = 1;
}
