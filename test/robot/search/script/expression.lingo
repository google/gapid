// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package script

import (
	"github.com/google/gapid/core/text/lingo"
	"github.com/google/gapid/test/robot/search/query"
)

func expression(s *lingo.Scanner) (query.Builder, error) {
	if e, err := binaryOr(s); err == nil {
		return e, nil
	}
	return query.Bool(false), s.Error(nil, "Expected expression")
}

func binaryOr(s *lingo.Scanner) (query.Builder, error) {
	lhs := binaryAnd(s)
	if opOr(s) || keywordOr(s) {
		return lhs.Or(binaryOr(s)), nil
	}
	return lhs, nil
}

func binaryAnd(s *lingo.Scanner) (query.Builder, error) {
	lhs := binaryEqual(s)
	if opAnd(s) || keywordAnd(s) {
		return lhs.And(binaryAnd(s)), nil
	}
	return lhs, nil
}

func binaryEqual(s *lingo.Scanner) (query.Builder, error) {
	lhs := binaryCompare(s)
	if opEqual(s) || keywordIs(s) {
		return lhs.Equal(binaryEqual(s)), nil
	}
	if opNotEqual(s) {
		return query.Not(lhs.Equal(binaryEqual(s))), nil
	}
	if opRegex(s) {
		return lhs.Regex(string(string_(s))), nil
	}
	return lhs, nil
}

func binaryCompare(s *lingo.Scanner) (query.Builder, error) {
	lhs := extendExpression(s)
	if opLess(s) {
		return lhs.Less(binaryCompare(s)), nil
	}
	if opLessOrEqual(s) {
		return lhs.LessOrEqual(binaryCompare(s)), nil
	}
	if opGreaterOrEqual(s) {
		return lhs.GreaterOrEqual(binaryCompare(s)), nil
	}
	if opGreater(s) {
		return lhs.Greater(binaryCompare(s)), nil
	}
	return lhs, nil
}

func extendExpression(s *lingo.Scanner) (query.Builder, error) {
	expr := entity(s)
	for {
		if i, err := indirect(s, expr); err == nil {
			expr = i
		} else {
			return expr, nil
		}
	}
}

func indirect(s *lingo.Scanner, expr query.Builder) (query.Builder, error) {
	if s, err := subscript(s, expr); err == nil {
		return s, nil
	}
	if m, err := member(s, expr); err == nil {
		return m, nil
	}
	return query.Bool(false), s.Error(nil, "Expected indirection")
}

func entity(s *lingo.Scanner) (query.Builder, error) {
	if opNot(s) || keywordNot(s) {
		return query.Not(expression(s)), nil
	}
	if value, err := parenthesised(s); err == nil {
		return value, err
	}
	if value, err := literal(s); err == nil {
		return value, err
	}
	if v, err := identifier(s); err == nil {
		return query.Name(string(v)), nil
	}
	return query.Bool(false), s.Error(nil, "Expected entity")
}

func parenthesised(s *lingo.Scanner) (query.Builder, error) {
	opGroupStart(s)
	value := expression(s)
	opGroupEnd(s)
	return value, nil
}

func subscript(s *lingo.Scanner, value query.Builder) (query.Builder, error) {
	opIndexStart(s)
	key := expression(s)
	opIndexEnd(s)
	return value.Subscript(key), nil

}

func member(s *lingo.Scanner, value query.Builder) (query.Builder, error) {
	opMember(s)
	return value.Member(string(identifier(s))), nil
}
