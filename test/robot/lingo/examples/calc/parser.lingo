// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"context"
	"strconv"

	"github.com/google/gapid/core/log"
	"github.com/google/gapid/test/robot/lingo"
)

func Parse(ctx context.Context, name string, input string) (Expression, error) {
	s := lingo.NewStringScanner(ctx, name, input, nil)
	s.SetSkip(skip)
	value, err := expression(s)
	if err != nil {
		return nil, err
	}
	if !s.EOF() {
		return nil, log.Err(ctx, nil, "Input not consumed")
	}
	return value, nil
}

func skip(s *lingo.Scanner) {
	_, _ = space(s)
}

func expression(s *lingo.Scanner) (Expression, error) {
	return addition(s)
}

func parenthesised(s *lingo.Scanner) (Expression, error) {
	openParenthesis(s)
	value := expression(s)
	closeParenthesis(s)
	return value, nil
}

func addition(s *lingo.Scanner) (Expression, error) {
	value := multiplication(s)
	for {
		switch {
		case opAdd(s):
			value = &Add{LHS: value, RHS: multiplication(s)}
		case opSubtract(s):
			value = &Subtract{LHS: value, RHS: multiplication(s)}
		default:
			return value, nil
		}
	}
}

func multiplication(s *lingo.Scanner) (Expression, error) {
	value := numeral(s)
	for {
		switch {
		case opMultiply(s):
			value = &Multiply{LHS: value, RHS: numeral(s)}
		case opDivide(s):
			value = &Divide{LHS: value, RHS: numeral(s)}
		case opRemainder(s):
			value = &Remainder{LHS: value, RHS: numeral(s)}
		default:
			return value, nil
		}
	}
}

func numeral(s *lingo.Scanner) (Expression, error) {
	if value, err := parenthesised(s); err == nil {
		return value, err
	}
	if value, err := float(s); err == nil {
		return value, err
	}
	if value, err := integer(s); err == nil {
		return value, err
	}
	return nil, s.Error(nil, ErrorParenOrNumber)
}

func float(s *lingo.Scanner) (Float, error) {
	value, err := strconv.ParseFloat(string(floatDigits(s)), 64)
	if err != nil {
		return Float(0), s.Error(err, "")
	}
	return Float(value), nil
}

func integer(s *lingo.Scanner) (Integer, error) {
	value, err := strconv.ParseInt(string(intDigits(s)), 10, 64)
	if err != nil {
		return Integer(0), s.Error(err, "")
	}
	return Integer(value), nil
}
