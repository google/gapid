// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"fmt"
	"io"
)

type (
	Whitespace string
	Digits     string
	Operator   string
	Bracket    string

	Expression interface {
		Eval() interface{}
		Format(f fmt.State, r rune)
	}

	Integer int64
	Float   float64

	BinaryOp struct {
		LHS Expression
		RHS Expression
	}

	Add       BinaryOp
	Subtract  BinaryOp
	Multiply  BinaryOp
	Divide    BinaryOp
	Remainder BinaryOp
)

const childFormatMarker = ' '

func (n *BinaryOp) doFormat(f fmt.State, op Operator, r rune) {
	if r == childFormatMarker {
		io.WriteString(f, "(")
	}
	n.LHS.Format(f, childFormatMarker)
	io.WriteString(f, string(op))
	n.RHS.Format(f, childFormatMarker)
	if r == childFormatMarker {
		io.WriteString(f, ")")
	}
}

func (n Integer) Format(f fmt.State, r rune)    { fmt.Fprint(f, int64(n)) }
func (n Float) Format(f fmt.State, r rune)      { fmt.Fprint(f, float64(n)) }
func (n *Add) Format(f fmt.State, r rune)       { (*BinaryOp)(n).doFormat(f, opAdd, r) }
func (n *Subtract) Format(f fmt.State, r rune)  { (*BinaryOp)(n).doFormat(f, opSubtract, r) }
func (n *Multiply) Format(f fmt.State, r rune)  { (*BinaryOp)(n).doFormat(f, opMultiply, r) }
func (n *Divide) Format(f fmt.State, r rune)    { (*BinaryOp)(n).doFormat(f, opDivide, r) }
func (n *Remainder) Format(f fmt.State, r rune) { (*BinaryOp)(n).doFormat(f, opRemainder, r) }

func eval(n Expression) (int64, float64, bool) {
	switch v := n.Eval().(type) {
	case int64:
		return v, float64(v), false
	case float64:
		return 0, v, true
	default:
		panic("Unexpected eval type")
	}
}

func (n Integer) Eval() interface{} { return int64(n) }
func (n Float) Eval() interface{}   { return float64(n) }

func (n *Add) Eval() interface{} {
	lhsInt, lhsFloat, lhsIsFloat := eval(n.LHS)
	rhsInt, rhsFloat, rhsIsFloat := eval(n.RHS)
	if lhsIsFloat || rhsIsFloat {
		return lhsFloat + rhsFloat
	}
	return lhsInt + rhsInt
}

func (n *Subtract) Eval() interface{} {
	lhsInt, lhsFloat, lhsIsFloat := eval(n.LHS)
	rhsInt, rhsFloat, rhsIsFloat := eval(n.RHS)
	if lhsIsFloat || rhsIsFloat {
		return lhsFloat - rhsFloat
	}
	return lhsInt - rhsInt
}

func (n *Multiply) Eval() interface{} {
	lhsInt, lhsFloat, lhsIsFloat := eval(n.LHS)
	rhsInt, rhsFloat, rhsIsFloat := eval(n.RHS)
	if lhsIsFloat || rhsIsFloat {
		return lhsFloat * rhsFloat
	}
	return lhsInt * rhsInt
}

func (n *Divide) Eval() interface{} {
	lhsInt, lhsFloat, lhsIsFloat := eval(n.LHS)
	rhsInt, rhsFloat, rhsIsFloat := eval(n.RHS)
	if lhsIsFloat || rhsIsFloat {
		return lhsFloat / rhsFloat
	}
	return lhsInt / rhsInt
}

func (n *Remainder) Eval() interface{} {
	lhsInt, _, lhsIsFloat := eval(n.LHS)
	rhsInt, _, rhsIsFloat := eval(n.RHS)
	if lhsIsFloat || rhsIsFloat {
		panic("Remainder on floats")
	}
	return lhsInt % rhsInt
}
