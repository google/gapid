// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package job;
option go_package = "github.com/google/gapid/test/robot/job";

import "core/os/device/device.proto";
import "test/robot/search/search.proto";

// Operation represents the type of action being performed.
enum Operation {
  // UnknownOperation is the default (invalid) operation.
  UnknownOperation = 0;
  // Host indicates host operations (running gapit and gapis).
  Host = 1;
  // Trace indicates tracing operations (gapii).
  Trace = 2;
  // Report indicates report generation operations (gapis gapir).
  Report = 3;
  // Replay indicates replay operations (gapir).
  Replay = 4;
}

// Status represents the status of an action being performed.
enum Status {
  // UnknownStatus is the default not started status.
  UnknownStatus = 0;
  // Running indicates a worker has picked up and started the action.
  Running = 1;
  // Succeeded means the action finished correctly, and it's output may be
  // interesting.
  Succeeded = 2;
  // Failed indicates the action has been abnormally terminated, and it's
  // results should be ignored.
  Failed = 3;
}

// Device is the information we know about a given robot worker device.
message Device {
  // Id is the unique id of the device.
  string id = 1;
  // Information is the device instance information.
  device.Instance information = 2;
}

// Worker is the information about a consumer of tasks.
message Worker {
  // Host is the device id which hosts the worker.
  string host = 1;
  // Target is the device id on which the tasks will be performed.
  string target = 2;
  // Operation is the types of operation supported by this worker.
  repeated Operation Operation = 3;
}

// Service is the api to the robot job manager.
service Service {
  // Search is used to find devices that match the given query.
  rpc SearchDevices(search.Query) returns (stream Device) {
  };
  // Search is used to find workers that match the given query.
  rpc SearchWorkers(search.Query) returns (stream Worker) {
  };
  // Get finds or adds a worker.
  // The returned worker may support a superset of the operations in the
  // request.
  rpc GetWorker(GetWorkerRequest) returns (GetWorkerResponse) {
  };
}

message GetWorkerRequest {
  device.Instance host = 1;
  device.Instance target = 2;
  Operation Operation = 3;
}

message GetWorkerResponse {
  Worker worker = 1;
}
