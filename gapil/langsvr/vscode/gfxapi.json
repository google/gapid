{
  "scopeName": "source.gfxapi",
  "name": "GfxApi",
  "comment": "Graphics API language",
  "fileTypes": [
    "api"
  ],
  "foldingStartMarker": "({|\\()\\s*$",
  "foldingStopMarker": "(}|\\))\\s*$",
  "patterns": [
    {
      "comment": "Block comments",
      "begin": "/\\*",
      "end": "\\*/",
      "captures": {
        "0": {
          "name": "punctuation.definition.comment.gfxapi"
        }
      },
      "name": "comment.block.gfxapi"
    },
    {
      "comment": "Line comments",
      "begin": "//",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.gfxapi"
        }
      },
      "end": "$",
      "name": "comment.line.double-slash.gfxapi"
    },
    {
      "comment": "Quoted string literal",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.gfxapi"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.gfxapi"
        }
      },
      "name": "string.quoted.double.gfxapi",
      "patterns": [
        {
          "include": "#string_escaped_char"
        },
        {
          "include": "#string_placeholder"
        }
      ]
    },
    {
      "comment": "Backticked string literal",
      "begin": "`",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.gfxapi"
        }
      },
      "end": "`",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.gfxapi"
        }
      },
      "name": "string.quoted.single.gfxapi"
    },
    {
      "comment": "Syntax error numeric literals",
      "match": "\\b0[0-7]*[89]\\d*\\b",
      "name": "invalid.illegal.numeric.gfxapi"
    },
    {
      "comment": "Built-in functions",
      "match": "\\b(read|write|copy|clone)\\b(?=\\()",
      "name": "keyword.builtin.gfxapi"
    },
    {
      "comment": "Built-in constructor",
      "match": "\\b((?:make|new)!)(\\w+)\\(",
      "captures": {
        "1": {"name": "keyword.builtin.gfxapi"},
        "2": {"patterns": [{"include": "#storage_types"}]}
      }
    },
    {
      "comment": "Built-in as",
      "match": "\\b(as!)(\\w+)\\(",
      "captures": {
        "1": {"name": "keyword.builtin.gfxapi"},
        "2": {"patterns": [{"include": "#storage_types"}]}
      }
    },
    {
      "comment": "Annotation",
      "match": "(@\\w+)",
      "name": "storage.type.annotation"
    },
    {
      "comment": "Function declarations",
      "match": "^(cmd|sub|extern)\\s+(\\w+)\\s+(\\w+)",
      "captures": {
        "1": {"name": "keyword.function.gfxapi"},
        "2": {"patterns": [{"include": "#storage_types"}]},
        "3": {"name": "entity.name.function"}
      }
    },
    {
      "comment": "Floating-point literals",
      "match": "(\\.\\d+([Ee][-+]\\d+)?i?)\\b|\\b\\d+\\.\\d*(([Ee][-+]\\d+)?i?\\b)?",
      "name": "constant.numeric.floating-point.gfxapi"
    },
    {
      "comment": "Integers",
      "match": "\\b((0x[0-9a-fA-F]+)|(0[0-7]+i?)|(\\d+([Ee]\\d+)?i?)|(\\d+[Ee][-+]\\d+i?))\\b",
      "name": "constant.numeric.integer.gfxapi"
    },
    {
      "comment": "Language constants",
      "match": "\\b(true|false|null)\\b",
      "name": "constant.language.gfxapi"
    },
    {
      "comment": "Imports",
      "match": "(?<=import)\\s+([a-zA-Z_]\\w*)",
      "captures": {
        "1": {
          "name": "entity.name.package.gfxapi"
        }
      }
    },
    {
      "comment": "Type declarations",
      "match": "(type)\\s+([\\w*!]+)\\s+(\\w+)",
      "captures": {
        "1": {"name": "keyword.type.gfxapi"},
        "3": {"name": "entity.name.type.gfxapi"}
      }
    },
    {
      "comment": "Shorthand variable declaration and assignments",
      "match": "[a-zA-Z_]\\w*(?:,\\s*[a-zA-Z_]\\w*)*(?=\\s*:=)",
      "captures": {
        "0": {
          "patterns": [
            {
              "match": "[a-zA-Z_]\\w*",
              "name": "variable.other.assignment.gfxapi"
            },
            {
              "include": "#delimiters"
            }
          ]
        }
      }
    },
    {
      "comment": "Assignments to existing variables",
      "match": "(?<!var )\\s*([a-zA-Z_]\\w*(?:,\\s*[a-zA-Z_]\\w*)*)(?=\\s*=[^=])",
      "captures": {
        "1": {
          "patterns": [
            {
              "match": "[a-zA-Z_]\\w*",
              "name": "variable.other.assignment.gfxapi"
            },
            {
              "include": "#delimiters"
            }
          ]
        }
      }
    },
    {
      "comment": "Single line variable declarations/assignments",
      "match": "(?<=var)\\s+(.*)$",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#variables"
            }
          ]
        }
      }
    },
    {
      "comment": "Terminators",
      "match": ";",
      "name": "punctuation.terminator.gfxapi"
    },
    {
      "include": "#brackets"
    },
    {
      "include": "#delimiters"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#storage_types"
    }
  ],
  "repository": {
    "brackets": {
      "patterns": [
        {
          "match": "\\{|\\}",
          "name": "punctuation.other.bracket.curly.gfxapi"
        },
        {
          "match": "\\(|\\)",
          "name": "punctuation.other.bracket.round.gfxapi"
        },
        {
          "match": "\\[|\\]",
          "name": "punctuation.other.bracket.square.gfxapi"
        }
      ]
    },
    "delimiters": {
      "patterns": [
        {
          "match": ",",
          "name": "punctuation.other.comma.gfxapi"
        },
        {
          "match": "\\.(?!\\.\\.)",
          "name": "punctuation.other.period.gfxapi"
        },
        {
          "match": ":(?!=)",
          "name": "punctuation.other.colon.gfxapi"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "comment": "Flow control keywords",
          "match": "\\b(break|case|continue|default|else|for|in|if|return|switch|fence)\\b",
          "name": "keyword.control.gfxapi"
        },
        {
          "match": "\\bconst\\b",
          "name": "keyword.const.gfxapi"
        },
        {
          "match": "\\bcmd\\b",
          "name": "keyword.command.gfxapi"
        },
        {
          "match": "\\bsub\\b",
          "name": "keyword.subroutine.gfxapi"
        },
        {
          "match": "\\bextern\\b",
          "name": "keyword.extern.gfxapi"
        },
        {
          "match": "\\bimport\\b",
          "name": "keyword.import.gfxapi"
        },
        {
          "match": "\\bclass\\b",
          "name": "keyword.class.gfxapi"
        },
        {
          "match": "\\benum\\b",
          "name": "keyword.enum.gfxapi"
        },
        {
          "match": "\\bbitfield\\b",
          "name": "keyword.bitfield.gfxapi"
        }
      ]
    },
    "operators": {
      "comment": "Note that the order here is very important!",
      "patterns": [
        {
          "match": "(==|!=|<=|>=|<[^<]|>[^>])",
          "name": "keyword.operator.comparison.gfxapi"
        },
        {
          "match": "(&&|\\|\\||!)",
          "name": "keyword.operator.logical.gfxapi"
        },
        {
          "match": "(=|\\+=|\\-=|\\|=|\\^=|\\*=|/=|:=|%=|<<=|>>=|&\\^=|&=)",
          "name": "keyword.operator.assignment.gfxapi"
        },
        {
          "match": "(\\+|\\-|\\*|/|%)",
          "name": "keyword.operator.arithmetic.gfxapi"
        },
        {
          "match": "(&(?!\\^)|\\||\\^|&\\^|<<|>>)",
          "name": "keyword.operator.arithmetic.bitwise.gfxapi"
        }
      ]
    },
    "storage_types": {
      "patterns": [
        {
          "match": "\\bbool\\b",
          "name": "storage.type.boolean.gfxapi"
        },
        {
          "match": "\\bint\\b",
          "name": "storage.type.int.gfxapi"
        },
        {
          "match": "\\bsize\\b",
          "name": "storage.type.size.gfxapi"
        },
        {
          "match": "\\bchar\\b",
          "name": "storage.type.char.gfxapi"
        },
        {
          "match": "\\b(f(32|64)|u(8|16|32|64)|s(8|16|32|64))\\b",
          "name": "storage.type.numeric.gfxapi"
        },
        {
          "match": "\\bstring\\b",
          "name": "storage.type.string.gfxapi"
        },
        {
          "match": "\\bmessage\\b",
          "name": "storage.type.message.gfxapi"
        },
        {
          "comment": "TODO: This doesn't work",
          "match": "\\bvoid\\b",
          "name": "storage.type.primitive.gfxapi"
        },
        {
          "comment": "TODO: This doesn't work",
          "match": "\\bany\\b",
          "name": "storage.type.any.gfxapi"
        },
        {
          "match": "(map!)\\(([^,]*),([^\\)]*)\\)",
          "captures": {
            "1": {"name": "keyword.map.gfxapi"},
            "2": {"patterns": [{"include": "#storage_types"}]},
            "3": {"patterns": [{"include": "#storage_types"}]}
          }
        },
        {
          "match": "(ref!)(\\w+)",
          "captures": {
            "1": {"name": "keyword.ref.gfxapi"},
            "2": {"patterns": [{"include": "#storage_types"}]},
            "3": {"patterns": [{"include": "#storage_types"}]}
          }
        }
      ]
    },
    "string_escaped_char": {
      "patterns": [
        {
          "match": "\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})",
          "name": "constant.character.escape.gfxapi"
        },
        {
          "match": "\\\\[^0-7xuUabfnrtv\\'\"]",
          "name": "invalid.illegal.unknown-escape.gfxapi"
        }
      ]
    },
    "string_placeholder": {
      "patterns": [
        {
          "match": "%(\\[\\d+\\])?([\\+#\\-0\\x20]{,2}((\\d+|\\*)?(\\.?(\\d+|\\*|(\\[\\d+\\])\\*?)?(\\[\\d+\\])?)?))?[vT%tbcdoqxXUbeEfFgGsp]",
          "name": "constant.other.placeholder.gfxapi"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "match": "([a-zA-Z_]\\w*(?:,\\s*[a-zA-Z_]\\w*)*)\\s*(=.*)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "match": "[a-zA-Z_]\\w*",
                  "name": "variable.other.assignment.gfxapi"
                },
                {
                  "include": "#delimiters"
                }
              ]
            },
            "2": {
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          }
        },
        {
          "match": "([a-zA-Z_]\\w*(?:,\\s*[a-zA-Z_]\\w*)*)(\\s+[\\*]?[a-zA-Z_]\\w*\\s*)(=.*)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "match": "[a-zA-Z_]\\w*",
                  "name": "variable.other.assignment.gfxapi"
                },
                {
                  "include": "#delimiters"
                }
              ]
            },
            "2": {
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          }
        },
        {
          "match": "([a-zA-Z_]\\w*(?:,\\s*[a-zA-Z_]\\w*)*)(\\s+[\\*]?[a-zA-Z_]\\w*\\s*[^=].*)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "match": "[a-zA-Z_]\\w*",
                  "name": "variable.other.declaration.gfxapi"
                },
                {
                  "include": "#delimiters"
                }
              ]
            },
            "2": {
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          }
        }
      ]
    }
  }
}