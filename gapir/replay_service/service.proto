// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "gapis/service/severity/severity.proto";

package replay_service;

option go_package = "github.com/google/gapid/gapir/replay_service";

// ResourceInfo describes the ID and the size in bytes of a piece of resource
// data.
message ResourceInfo {
  string id = 1;
  uint32 size = 2;
}

// Payload contains the opcodes, constants, resources info and other basic info
// for rolling out a replay on GAPIR device.
message Payload {
  uint32 stack_size = 1;
  uint32 volatile_memory_size = 2;
  bytes constants = 3;
  repeated ResourceInfo resources = 4;
  bytes Opcodes = 5;
}

// Resources holds a list of resource data.
message Resources {
  bytes data = 1;
}

message ReplayRequest {
  oneof req {
    string replay_id = 1;
    Payload payload = 2;
    Resources resources = 3;
  }
}

// Finshed means the replay has finished.
message Finished {}

message PayloadRequest {}

// ResourceRequest holds a list of IDs of the resources requested by the GAPIR
// device, and the expected total size in bytes of all the resources.
message ResourceRequest {
  uint64 expected_total_size = 1;
  repeated string ids = 2;
}

// CrashDump contains the filepath of the crash dump file on GAPIR device and
// the raw crash dump data in bytes.
message CrashDump {
  string filepath = 1;
  bytes crash_data = 2;
}

// PostDataPiece represents one piece of post data, which is generated by POST
// instructions and to be expected and consumed by the GAPIS side. The ID of
// each post data piece is incremental in the order of exeuction of all POST
// instructions in a replay.
message PostDataPiece {
  uint64 id = 1;
  bytes data = 2;
}

// PostData contains a list of post data pieces.
message PostData {
  repeated PostDataPiece post_data_pieces = 1;
}

// Notification is a message that a GAPIR device wants to send to GAPIS. Such a
// message is not generated by any specific instructions inserted at the
// build time of the replay instruction.
message Notification {
  uint64 id = 1;
  // Serverity defines the severity of a notification message.
  severity.Severity severity = 2;
  // API index should be in uint8 type. Extend to uint32 as protobuf does not
  // support uint8.
  uint32 api_index = 3;
  uint64 label = 4;
  string msg = 5;
  bytes data = 6;
}

message ReplayResponse {
  oneof res {
    Finished finished = 1;
    PayloadRequest payload_request = 2;
    ResourceRequest resource_request = 3;
    CrashDump crash_dump = 4;
    PostData post_data = 5;
    Notification notification = 6;
  }
}

message PingRequest {}

message PingResponse {}

message ShutdownRequest {}

message ShutdownResponse {}

// Gapir is the RPC service to the GAPIR device.
service Gapir {
  // Replay is a bi-directional streaming connection for running replays on
  // GAPIR devices.
  rpc Replay(stream ReplayRequest) returns (stream ReplayResponse) {}
  // Ping is a no-op function that returns immediately. It is used to keep the
  // process alive if the process is started with "--idle-timeout-sec" command
  // line argument.
  rpc Ping(PingRequest) returns (PingResponse) {}
  // Shutdown is used to shutdown the connected GAPIR server on a GAPIR device.
  rpc Shutdown(ShutdownRequest) returns (ShutdownResponse) {}
}
