{{/*
 * Copyright (C) 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */}}

{{Global "Vulkan.LayerName" "APITiming"}}
{{Global "Vulkan.LayerNamespace" "api_timing"}}
{{Global "Vulkan.Layer Description" "API Timing Layer"}}

{{Include "../../../../gapis/api/vulkan/templates/vulkan_layer.tmpl"}}

{{$ | Macro "layer_impl.cpp" | Reflow 4 | Write "layer_impl.cpp"}}

{{define "layer_impl.cpp"}}
{{Template "C++.Copyright"}}
#include "core/vulkan/vk_api_timing_layer/cc/layer.h"
#include "core/vulkan/vk_api_timing_layer/cc/tracing_helpers.h"
#include "core/cc/timer.h"

#include <cinttypes>

namespace api_timing {
struct timer {
    timer(const char* name) {
        Emit().StartEvent(name);
    }
    ~timer() {
        Emit().EndEvent();
    }
};
{{range $c := AllCommands $}}
{{if and (not (GetAnnotation $c "pfn")) (not (GetAnnotation $c "synthetic"))}}
{{Template "BeginPlatformIfDef" $c}}
{{Template "C++.BaseType" $c.Return.Type}} {{$c.Name}}(PFN_{{$c.Name}} next, {{Macro "C++.BaseCallParameters" $c | JoinWith ", "}}) {
    timer t("{{$c.Name}}");
    return next({{Template "C++.CallArguments" $c}});
}
{{Template "EndPlatformIfDef" $c}}
Â¶
{{end}}
{{end}}
}
{{end}}