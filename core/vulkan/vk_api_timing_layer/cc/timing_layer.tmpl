{{/*
 * Copyright (C) 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */}}

{{Global "Vulkan.LayerNamespace" "api_timing"}}
{{Global "Vulkan.LayerName" "CPUTiming"}}
{{Global "Vulkan.LayerDescription" "Vulkan API CPU Call Timing"}}

{{define "DEBUG_UTILS_FUNCTIONS"}}
vkSetDebugUtilsObjectNameEXT
vkSetDebugUtilsObjectTagEXT
vkQueueBeginDebugUtilsLabelEXT
vkQueueEndDebugUtilsLabelEXT
vkQueueInsertDebugUtilsLabelEXT
vkCmdBeginDebugUtilsLabelEXT
vkCmdEndDebugUtilsLabelEXT
vkCmdInsertDebugUtilsLabelEXT
vkCreateDebugUtilsMessengerEXT
vkDestroyDebugUtilsMessengerEXT
vkSubmitDebugUtilsMessageEXT
{{end}}

{{define "IS_DEBUG_UTILS_FUNCTIONS"}}
  {{$filters := Strings (Macro "DEBUG_UTILS_FUNCTIONS") | SplitEOL}}
  {{range $f := $filters}}
    {{if eq $.Name $f}}true{{end}}
  {{end}}
{{end}}

{{define "DEBUG_MARKER_FUNCTIONS"}}
vkDebugMarkerSetObjectTagEXT
vkDebugMarkerSetObjectNameEXT
vkCmdDebugMarkerBeginEXT
vkCmdDebugMarkerEndEXT
vkCmdDebugMarkerInsertEXT
{{end}}

{{define "IS_DEBUG_MARKER_FUNCTIONS"}}
  {{$filters := Strings (Macro "DEBUG_MARKER_FUNCTIONS") | SplitEOL}}
  {{range $f := $filters}}
    {{if eq $.Name $f}}true{{end}}
  {{end}}
{{end}}


{{Include "../../../../gapis/api/vulkan/templates/vulkan_layer.tmpl"}}

{{$ | Macro "layer_impl.cpp" | Reflow 4 | Write "layer_impl.cpp"}}

{{define "layer_impl.cpp"}}

{{Template "C++.Copyright"}}
#include "core/vulkan/vk_api_timing_layer/cc/layer.h"
#include "core/vulkan/vk_api_timing_layer/cc/tracing_helpers.h"
#include "core/vulkan/vk_api_timing_layer/cc/vk_api_emitter.h"
#include "core/cc/timer.h"
#include <cinttypes>

namespace api_timing {

struct timer {
    timer(const char* category, const char* name):
        cat(category) {
        Emit().StartEvent(category, name);
    }
    ~timer() {
        Emit().EndEvent(cat);
    }
    const char* cat;
};

static bool debug_utils_ext_supported = false;
static bool debug_marker_ext_supported = false;

{{range $c := AllCommands $}}
{{$ind := Title (Macro "InitialIndirection" $c)}}
{{if and (not (GetAnnotation $c "pfn")) (not (GetAnnotation $c "synthetic"))}}
{{if and (not (Macro "IS_DEBUG_UTILS_FUNCTIONS" $c)) (not (Macro "IS_DEBUG_MARKER_FUNCTIONS" $c)) (not (eq $c.Name "vkEnumerateDeviceExtensionProperties"))}}
{{Template "BeginPlatformIfDef" $c}}
{{Template "C++.BaseType" $c.Return.Type}} {{$c.Name}}(PFN_{{$c.Name}} next, {{Macro "C++.BaseCallParameters" $c | JoinWith ", "}}) {
    timer t("{{$ind}}", "{{$c.Name}}");
    return next({{Template "C++.CallArguments" $c}});
}
{{Template "EndPlatformIfDef" $c}}

{{else}}

// Since this layer is declaring the debug extensions are implemented, we need to also implement
// all functions in the extension, but we need to be careful not to forward the function call if
// the extension was not implemented.
{{if and (Macro "IS_DEBUG_UTILS_FUNCTIONS" $c)  (not (eq $c.Name "vkSetDebugUtilsObjectNameEXT"))}}
{{Template "BeginPlatformIfDef" $c}}
{{Template "C++.BaseType" $c.Return.Type}} {{$c.Name}}(PFN_{{$c.Name}} next, {{Macro "C++.BaseCallParameters" $c | JoinWith ", "}}) {
    timer t("{{$ind}}", "{{$c.Name}}");

{{if not (IsVoid $c.Return.Type)}}
    return debug_utils_ext_supported ? next({{Template "C++.CallArguments" $c}}) : VK_SUCCESS;
{{else}}
    if (debug_utils_ext_supported) {
        next({{Template "C++.CallArguments" $c}});
    }
{{end}}
}
{{Template "EndPlatformIfDef" $c}}
{{end}}
{{if and (Macro "IS_DEBUG_MARKER_FUNCTIONS" $c) (not (eq $c.Name "vkDebugMarkerSetObjectNameEXT"))}}
{{Template "BeginPlatformIfDef" $c}}
{{Template "C++.BaseType" $c.Return.Type}} {{$c.Name}}(PFN_{{$c.Name}} next, {{Macro "C++.BaseCallParameters" $c | JoinWith ", "}}) {
    timer t("{{$ind}}", "{{$c.Name}}");

{{if not (IsVoid $c.Return.Type)}}
    return debug_marker_ext_supported ? next({{Template "C++.CallArguments" $c}}) : VK_SUCCESS;
{{else}}
    if (debug_marker_ext_supported) {
        next({{Template "C++.CallArguments" $c}});
    }
{{end}}
}
{{Template "EndPlatformIfDef" $c}}
{{end}}

{{end}}
{{end}}
{{end}}


// Maps VkDebugReportObjectTypeEXT to VkObjectType.
VkObjectType getVkObjectType(VkDebugReportObjectTypeEXT vk_debug_report_object_type) {
#define CASE(OBJ)                               \
  case VK_DEBUG_REPORT_OBJECT_TYPE_##OBJ##_EXT: \
    return VK_OBJECT_TYPE_##OBJ

  switch (vk_debug_report_object_type) {
    CASE(UNKNOWN);
    CASE(INSTANCE);
    CASE(PHYSICAL_DEVICE);
    CASE(DEVICE);
    CASE(QUEUE);
    CASE(SEMAPHORE);
    CASE(COMMAND_BUFFER);
    CASE(FENCE);
    CASE(DEVICE_MEMORY);
    CASE(BUFFER);
    CASE(IMAGE);
    CASE(EVENT);
    CASE(QUERY_POOL);
    CASE(BUFFER_VIEW);
    CASE(IMAGE_VIEW);
    CASE(SHADER_MODULE);
    CASE(PIPELINE_CACHE);
    CASE(PIPELINE_LAYOUT);
    CASE(RENDER_PASS);
    CASE(PIPELINE);
    CASE(DESCRIPTOR_SET_LAYOUT);
    CASE(SAMPLER);
    CASE(DESCRIPTOR_POOL);
    CASE(DESCRIPTOR_SET);
    CASE(FRAMEBUFFER);
    CASE(COMMAND_POOL);
    CASE(SURFACE_KHR);
    CASE(SWAPCHAIN_KHR);
    CASE(DEBUG_REPORT_CALLBACK_EXT);
    CASE(DISPLAY_KHR);
    CASE(DISPLAY_MODE_KHR);
    CASE(OBJECT_TABLE_NVX);
    CASE(INDIRECT_COMMANDS_LAYOUT_NVX);
    CASE(VALIDATION_CACHE_EXT);
    CASE(SAMPLER_YCBCR_CONVERSION);
    CASE(DESCRIPTOR_UPDATE_TEMPLATE);
    CASE(ACCELERATION_STRUCTURE_NV);
    default:
      return VK_OBJECT_TYPE_UNKNOWN;
  }
#undef CASE
}

VkResult vkSetDebugUtilsObjectNameEXT(
        PFN_vkSetDebugUtilsObjectNameEXT     next,
        VkDevice                             device,
        const VkDebugUtilsObjectNameInfoEXT* pNameInfo) {
    timer t("VkDevice", "vkSetDebugUtilsObjectNameEXT");

    api_timing::VkApiEmitter().EmitDebugUtilsObjectName(
            reinterpret_cast<uint64_t>(device), pNameInfo->objectType, pNameInfo->objectHandle, pNameInfo->pObjectName);

    // Must not forward function call if the extension was not supported.
    return debug_utils_ext_supported ? next(device, pNameInfo) : VK_SUCCESS;
}


VkResult vkDebugMarkerSetObjectNameEXT(
        PFN_vkDebugMarkerSetObjectNameEXT     next,
        VkDevice                              device,
        VkDebugMarkerObjectNameInfoEXT const* pNameInfo) {
    timer t("VkDevice", "vkDebugMarkerSetObjectNameEXT");

    // Convert object type to VkObjectType and emit the trace.
    api_timing::VkApiEmitter().EmitDebugUtilsObjectName(
            reinterpret_cast<uint64_t>(device), getVkObjectType(pNameInfo->objectType), pNameInfo->object, pNameInfo->pObjectName);

    // Must not forward function call if the extension was not supported.
    return debug_marker_ext_supported ? next(device, pNameInfo) : VK_SUCCESS;
}

static const uint32_t NUM_EXTENSIONS = 2;
static const VkExtensionProperties new_device_extensions[] = {
    {VK_EXT_DEBUG_UTILS_EXTENSION_NAME, VK_EXT_DEBUG_UTILS_SPEC_VERSION},
    {VK_EXT_DEBUG_MARKER_EXTENSION_NAME, VK_EXT_DEBUG_MARKER_SPEC_VERSION},
};

// This layer needs to add VK_EXT_debug_utils and VK_EXT_debug_marker as a supported extension.
VkResult vkEnumerateDeviceExtensionProperties(PFN_vkEnumerateDeviceExtensionProperties next, VkPhysicalDevice physicalDevice, char const* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties) {

    timer t("VkPhysicalDevice", "vkEnumerateDeviceExtensionProperties");
    if (pProperties == NULL) {
        VkResult res = next(physicalDevice, pLayerName, pPropertyCount, pProperties);
        if (res == VK_SUCCESS) {
            (*pPropertyCount) += NUM_EXTENSIONS;
        }
        return res;
    }
    if (*pPropertyCount > 0) {
        VkResult res = next(physicalDevice, pLayerName, pPropertyCount, pProperties);
        if (res == VK_SUCCESS) {
            uint32_t count = std::min(NUM_EXTENSIONS, *pPropertyCount);
            for (uint32_t i = 0; i < *pPropertyCount; ++i) {
                if (!strcmp(VK_EXT_DEBUG_UTILS_EXTENSION_NAME, pProperties[i].extensionName)) {
                    debug_utils_ext_supported = true;
                }
                if (!strcmp(VK_EXT_DEBUG_MARKER_EXTENSION_NAME, pProperties[i].extensionName)) {
                    debug_marker_ext_supported = true;
                }
            }
            memcpy(
                &pProperties[*pPropertyCount - count],
                new_device_extensions,
                count * sizeof(VkExtensionProperties));
        }
        return res;
    }
    return VK_SUCCESS;
}

}
{{end}}
