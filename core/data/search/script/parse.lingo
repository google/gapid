// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package script

import (
	"context"

	"github.com/google/gapid/core/data/search/query"
	"github.com/google/gapid/core/log"
	"github.com/google/gapid/core/text/lingo"
)

// Parse takes a string containing a search expression and returns the Query object representation of it.
// If the string is not syntactically valid, you will get an incomplete query object and an error.
func Parse(ctx context.Context, input string) (value query.Builder, err error) {
	if input == "" {
		return query.Bool(true), nil
	}
	defer func() {
		v := recover()
		if v == nil {
			return
		}
		scanErr := lingo.WasScannerError(v)
		if scanErr == nil {
			panic(v)
		}
		err = scanErr
	}()
	s := lingo.NewStringScanner(ctx, "query", input, nil)
	s.SetSkip(skip)
	value = expression(s)
	if !s.EOF() {
		return query.Bool(false), log.Err(ctx, nil, "Input not consumed")
	}
	return value, nil
}

// MustParse wraps Parse and panics on failure.
// It is intended for static initializers, which is why it also does not take a context.
func MustParse(input string) query.Builder {
	b, err := Parse(context.Background(), input)
	if err != nil {
		panic(err)
	}
	return b
}

func skip(s *lingo.Scanner) {
	for {
		switch {
		case whitespace(s):
		case eol(s):
		case commentLine(s):
			_, _ = commentToEOL(s)
		case commentStart(s):
			blockComment(s)
		default:
			return
		}
	}
}

func blockComment(s *lingo.Scanner) {
	for {
		_, _ = commentBody(s)
		switch {
		case commentLine(s):
			_, _ = commentToEOL(s)
		case commentStart(s):
			commentBody(s)
		case commentEnd(s):
			return
		default:
			_, _ = commentBodyStep(s)
		}
	}
}
