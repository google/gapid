// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package grpc;

import "core/data/stash/stash.proto";
import "core/data/search/search.proto";

// UploadChunk represents a chunk of data to upload a new entity to the stash.
// The first entity in an upload chunk stream must be an Upload entry.
// An Upload entry closes the previous Upload if there is one, and starts a new one.
// Data entries are added to the currently active upload.
message UploadChunk {
  oneof Of {
    // Upload adds a new entity to the store.
    stash.Upload Upload = 1;
    // Data contains data to append to the currently uploading chunk.
    bytes data = 2;
  }
}

// DownloadChunk represents a chunk of data being downloaded.
message DownloadChunk {
  // Data is the actual bytes to download for this chunk.
  bytes data = 1;
}

// Service is the api to a byte buffer storage service.
service Service {
  // Search is used to find entities that match the given patterns.
  rpc Search(search.Query) returns(stream stash.Entity) {};
  // Upload is used to add new entities to the store.
  // The data may be broken into many chunks, which should not be bigger than 1M each.
  rpc Upload(stream UploadChunk) returns(UploadResponse) {};
  // Download is used to fetch the full entity for an id.
  // The data may be broken into many chunks, which should not be bigger than 1M each.
  rpc Download(DownloadRequest) returns(stream DownloadChunk) {};
}

message DownloadRequest {
  // Id is the identity of the entity to download.
  string id = 1;
  // Offset is the offset from which to download.
  uint64 offset = 2;
  // Length represents the amount of data to download (up to the end if zero).
  uint64 length = 3;
}

message UploadResponse {}
