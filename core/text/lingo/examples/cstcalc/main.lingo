// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"context"
	"flag"
	"fmt"
	"os"
	"regexp"
	"strconv"
	"strings"

	"github.com/google/gapid/core/app"
	"github.com/google/gapid/core/log"
	"github.com/google/gapid/core/text/lingo"
)

func main() {
	app.ShortHelp = "calc: A simple calculator."
	app.Run(run)
}

type _ regexp.Regexp

type (
	Whitespace string
	Digits     string
	Operator   string
	Bracket    string

	Structural struct{}
)

const (
	opAdd            = Operator('+')
	opSubtract       = Operator('-')
	opMultiply       = Operator('*')
	opDivide         = Operator('/')
	openParenthesis  = Bracket('(')
	closeParenthesis = Bracket(')')

	space  = Whitespace(`\s*`)
	digits = Digits(`[0-9]+`)
)

const (
	ErrorParenOrNumber = "Expected parenthesis or number"
)

func run(ctx context.Context) error {
	args := flag.Args()
	if len(args) < 1 {
		app.Usage(ctx, "Missing expression")
		return nil
	}
	r := lingo.Records{}
	s := lingo.NewStringScanner(ctx, "command_line", strings.Join(args, " "), &r)
	_, err := expression(s)
	if err != nil {
		return err
	}
	if !s.EOF() {
		return log.Err(ctx, nil, "Input not consumed")
	}
	cst := r.ToCST()
	result := eval(ctx, cst)
	fmt.Fprintf(os.Stderr, "%v = %d\n", cst, result.value)
	return nil
}

type Eval struct {
	hasValue bool
	value    int
	op       Operator
}

func eval(ctx context.Context, node *lingo.Node) Eval {
	result := Eval{}
	switch obj := node.Object.(type) {
	case int:
		result.hasValue = true
		result.value = obj
	case Operator:
		result.op = obj
	}
	for _, child := range node.Children {
		got := eval(ctx, child)
		if got.hasValue {
			if !result.hasValue {
				result.value = got.value
			} else {
				switch result.op {
				case opAdd:
					result.value += got.value
				case opSubtract:
					result.value -= got.value
				case opMultiply:
					result.value *= got.value
				case opDivide:
					result.value /= got.value
				default:
					log.F(ctx, "Cannot combine values without operator")
				}
			}
			result.hasValue = true
		}
		if got.op != "" {
			result.op = got.op
		}
	}
	return result
}

func expression(s *lingo.Scanner) (Structural, error) {
	addition(s)
	return Structural{}, nil
}

func parenthesised(s *lingo.Scanner) (Structural, error) {
	openParenthesis(s)
	expression(s)
	closeParenthesis(s)
	return Structural{}, nil
}

func addition(s *lingo.Scanner) (Structural, error) {
	multiplication(s)
	for {
		space(s)
		switch {
		case opAdd(s):
			multiplication(s)
		case opSubtract(s):
			multiplication(s)
		default:
			return Structural{}, nil
		}
	}
}

func multiplication(s *lingo.Scanner) (Structural, error) {
	numeral(s)
	for {
		space(s)
		switch {
		case opMultiply(s):
			numeral(s)
		case opDivide(s):
			numeral(s)
		default:
			return Structural{}, nil
		}
	}
}

func numeral(s *lingo.Scanner) (Structural, error) {
	switch {
	case parenthesised(s):
	case number(s):
	default:
		return Structural{}, s.Error(nil, ErrorParenOrNumber)
	}
	return Structural{}, nil
}

func number(s *lingo.Scanner) (int, error) {
	space(s)
	value, err := strconv.Atoi(string(digits(s)))
	if err != nil {
		return 0, s.Error(err, "")
	}
	return value, nil
}
