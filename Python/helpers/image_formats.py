import numpy
from .vulkan import *
# From vulkan_core.h with this license header
#
# Copyright 2015-2021 The Khronos Group Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
#
# This header is generated from the Khronos Vulkan XML API Registry.
#
#


class texel_block_size(object):
    def __init__(self, width, height):
        self.width = width
        self.height = height

class element_and_block_size(object):
    def __init__(self, element_size, channels, type, texel_block_size):
        self.element_size = element_size
        self.texel_block_size = texel_block_size
        self.channels = channels
        self.type = type
 
ELEMENT_AND_TEXEL_BLOCK_SIZES = {
    VK_FORMAT_R4G4_UNORM_PACK8: element_and_block_size(1, 2, '?', texel_block_size(1, 1)),
    VK_FORMAT_R8_UNORM: element_and_block_size(1, 2, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_R8_SNORM: element_and_block_size(1, 2, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_R8_USCALED: element_and_block_size(1, 2, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_R8_SSCALED: element_and_block_size(1, 2, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_R8_UINT: element_and_block_size(1, 2, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_R8_SINT: element_and_block_size(1, 2, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_R8_SRGB: element_and_block_size(1, 2, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_R4G4B4A4_UNORM_PACK16: element_and_block_size(2, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_B4G4R4A4_UNORM_PACK16: element_and_block_size(2, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT: element_and_block_size(2, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT: element_and_block_size(2, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_R5G6B5_UNORM_PACK16: element_and_block_size(2, 3, '?', texel_block_size(1, 1)),
    VK_FORMAT_B5G6R5_UNORM_PACK16: element_and_block_size(2, 3, '?', texel_block_size(1, 1)),
    VK_FORMAT_R5G5B5A1_UNORM_PACK16: element_and_block_size(2, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_B5G5R5A1_UNORM_PACK16: element_and_block_size(2, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_A1R5G5B5_UNORM_PACK16: element_and_block_size(2, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_R8G8_UNORM: element_and_block_size(2, 2, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_R8G8_SNORM: element_and_block_size(2, 2, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_R8G8_USCALED: element_and_block_size(2, 2, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_R8G8_SSCALED: element_and_block_size(2, 2, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_R8G8_UINT: element_and_block_size(2, 2, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_R8G8_SINT: element_and_block_size(2, 2, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_R8G8_SRGB: element_and_block_size(2, 2, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_R16_UNORM: element_and_block_size(2, 1, 'uint16', texel_block_size(1, 1)),
    VK_FORMAT_R16_SNORM: element_and_block_size(2, 1, 'uint16', texel_block_size(1, 1)),
    VK_FORMAT_R16_USCALED: element_and_block_size(2, 1, 'uint16', texel_block_size(1, 1)),
    VK_FORMAT_R16_SSCALED: element_and_block_size(2, 1, 'int16', texel_block_size(1, 1)),
    VK_FORMAT_R16_UINT: element_and_block_size(2, 1, 'uint16', texel_block_size(1, 1)),
    VK_FORMAT_R16_SINT: element_and_block_size(2, 1, 'int16', texel_block_size(1, 1)),
    VK_FORMAT_R16_SFLOAT: element_and_block_size(2, 1, 'h', texel_block_size(1, 1)),
    VK_FORMAT_R8G8B8_UNORM: element_and_block_size(3, 3, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_R8G8B8_SNORM: element_and_block_size(3, 3, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_R8G8B8_USCALED: element_and_block_size(3, 3, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_R8G8B8_SSCALED: element_and_block_size(3, 3, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_R8G8B8_UINT: element_and_block_size(3, 3, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_R8G8B8_SINT: element_and_block_size(3, 3, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_R8G8B8_SRGB: element_and_block_size(3, 3, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_B8G8R8_UNORM: element_and_block_size(3, 3, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_B8G8R8_SNORM: element_and_block_size(3, 3, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_B8G8R8_USCALED: element_and_block_size(3, 3, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_B8G8R8_SSCALED: element_and_block_size(3, 3, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_B8G8R8_UINT: element_and_block_size(3, 3, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_B8G8R8_SINT: element_and_block_size(3, 3, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_B8G8R8_SRGB: element_and_block_size(3, 3, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_R8G8B8A8_UNORM:  element_and_block_size(4, 4, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_R8G8B8A8_SNORM:  element_and_block_size(4, 4, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_R8G8B8A8_USCALED:  element_and_block_size(4, 4, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_R8G8B8A8_SSCALED:  element_and_block_size(4, 4, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_R8G8B8A8_UINT:  element_and_block_size(4, 4, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_R8G8B8A8_SINT:  element_and_block_size(4, 4, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_R8G8B8A8_SRGB:  element_and_block_size(4, 4, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_B8G8R8A8_UNORM:  element_and_block_size(4, 4, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_B8G8R8A8_SNORM:  element_and_block_size(4, 4, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_B8G8R8A8_USCALED:  element_and_block_size(4, 4, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_B8G8R8A8_SSCALED:  element_and_block_size(4, 4, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_B8G8R8A8_UINT:  element_and_block_size(4, 4, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_B8G8R8A8_SINT:  element_and_block_size(4, 4, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_B8G8R8A8_SRGB:  element_and_block_size(4, 4, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_A8B8G8R8_UNORM_PACK32:  element_and_block_size(4, 4, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_A8B8G8R8_SNORM_PACK32:  element_and_block_size(4, 4, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_A8B8G8R8_USCALED_PACK32:  element_and_block_size(4, 4, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_A8B8G8R8_SSCALED_PACK32:  element_and_block_size(4, 4, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_A8B8G8R8_UINT_PACK32:  element_and_block_size(4, 4, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_A8B8G8R8_SINT_PACK32:  element_and_block_size(4, 4, 'int8', texel_block_size(1, 1)),
    VK_FORMAT_A8B8G8R8_SRGB_PACK32:  element_and_block_size(4, 4, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_A2R10G10B10_UNORM_PACK32:  element_and_block_size(4, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_A2R10G10B10_SNORM_PACK32:  element_and_block_size(4, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_A2R10G10B10_USCALED_PACK32:  element_and_block_size(4, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_A2R10G10B10_SSCALED_PACK32:  element_and_block_size(4, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_A2R10G10B10_UINT_PACK32:  element_and_block_size(4, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_A2R10G10B10_SINT_PACK32:  element_and_block_size(4, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_A2B10G10R10_UNORM_PACK32:  element_and_block_size(4, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_A2B10G10R10_SNORM_PACK32:  element_and_block_size(4, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_A2B10G10R10_USCALED_PACK32:  element_and_block_size(4, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_A2B10G10R10_SSCALED_PACK32:  element_and_block_size(4, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_A2B10G10R10_UINT_PACK32:  element_and_block_size(4, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_A2B10G10R10_SINT_PACK32:  element_and_block_size(4, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_R16G16_UNORM:  element_and_block_size(4, 2, 'uint16', texel_block_size(1, 1)),
    VK_FORMAT_R16G16_SNORM:  element_and_block_size(4, 2, 'int16', texel_block_size(1, 1)),
    VK_FORMAT_R16G16_USCALED:  element_and_block_size(4, 2, 'uint16', texel_block_size(1, 1)),
    VK_FORMAT_R16G16_SSCALED:  element_and_block_size(4, 2, 'int16', texel_block_size(1, 1)),
    VK_FORMAT_R16G16_UINT:  element_and_block_size(4, 2, 'uint16', texel_block_size(1, 1)),
    VK_FORMAT_R16G16_SINT:  element_and_block_size(4, 2, 'int16', texel_block_size(1, 1)),
    VK_FORMAT_R16G16_SFLOAT:  element_and_block_size(4, 2, 'h', texel_block_size(1, 1)),
    VK_FORMAT_R32_UINT:  element_and_block_size(4, 1, 'uint32', texel_block_size(1, 1)),
    VK_FORMAT_R32_SINT:  element_and_block_size(4, 1, 'int32', texel_block_size(1, 1)),
    VK_FORMAT_R32_SFLOAT:  element_and_block_size(4, 1, 'single', texel_block_size(1, 1)),
    VK_FORMAT_B10G11R11_UFLOAT_PACK32:  element_and_block_size(4, 3, '?', texel_block_size(1, 1)),
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32:  element_and_block_size(4, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_R16G16B16_UNORM: element_and_block_size(6, 3, 'uint16', texel_block_size(1, 1)),
    VK_FORMAT_R16G16B16_SNORM: element_and_block_size(6, 3, 'int16', texel_block_size(1, 1)),
    VK_FORMAT_R16G16B16_USCALED: element_and_block_size(6, 3, 'uint16', texel_block_size(1, 1)),
    VK_FORMAT_R16G16B16_SSCALED: element_and_block_size(6, 3, 'int16', texel_block_size(1, 1)),
    VK_FORMAT_R16G16B16_UINT: element_and_block_size(6, 3, 'uint16', texel_block_size(1, 1)),
    VK_FORMAT_R16G16B16_SINT: element_and_block_size(6, 3, 'int16', texel_block_size(1, 1)),
    VK_FORMAT_R16G16B16_SFLOAT: element_and_block_size(6, 3, 'h', texel_block_size(1, 1)),
    VK_FORMAT_R16G16B16A16_UNORM: element_and_block_size(8, 4, 'uint16', texel_block_size(1, 1)),
    VK_FORMAT_R16G16B16A16_SNORM: element_and_block_size(8, 4, 'int16', texel_block_size(1, 1)),
    VK_FORMAT_R16G16B16A16_USCALED: element_and_block_size(8, 4, 'uint16', texel_block_size(1, 1)),
    VK_FORMAT_R16G16B16A16_SSCALED: element_and_block_size(8, 4, 'int16', texel_block_size(1, 1)),
    VK_FORMAT_R16G16B16A16_UINT: element_and_block_size(8, 4, 'uint16', texel_block_size(1, 1)),
    VK_FORMAT_R16G16B16A16_SINT: element_and_block_size(8, 4, 'int16', texel_block_size(1, 1)),
    VK_FORMAT_R16G16B16A16_SFLOAT: element_and_block_size(8, 4, 'h', texel_block_size(1, 1)),
    VK_FORMAT_R32G32_UINT: element_and_block_size(8, 2, 'uint32', texel_block_size(1, 1)),
    VK_FORMAT_R32G32_SINT: element_and_block_size(8, 2, 'int32', texel_block_size(1, 1)),
    VK_FORMAT_R32G32_SFLOAT: element_and_block_size(8, 2, 'single', texel_block_size(1, 1)),
    VK_FORMAT_R64_UINT: element_and_block_size(8, 1, 'uint64', texel_block_size(1, 1)),
    VK_FORMAT_R64_SINT: element_and_block_size(8, 1, 'int64', texel_block_size(1, 1)),
    VK_FORMAT_R64_SFLOAT: element_and_block_size(8, 1, 'double', texel_block_size(1, 1)),
    VK_FORMAT_R32G32B32_UINT: element_and_block_size(12, 3, 'uint32', texel_block_size(1, 1)),
    VK_FORMAT_R32G32B32_SINT: element_and_block_size(12, 3, 'int32', texel_block_size(1, 1)),
    VK_FORMAT_R32G32B32_SFLOAT: element_and_block_size(12, 3, 'single', texel_block_size(1, 1)),
    VK_FORMAT_R32G32B32A32_UINT: element_and_block_size(16, 4, 'uint32', texel_block_size(1, 1)),
    VK_FORMAT_R32G32B32A32_SINT: element_and_block_size(16, 4, 'int32', texel_block_size(1, 1)),
    VK_FORMAT_R32G32B32A32_SFLOAT: element_and_block_size(16, 4, 'single', texel_block_size(1, 1)),
    VK_FORMAT_R64G64_UINT: element_and_block_size(16, 2, 'uint64', texel_block_size(1, 1)),
    VK_FORMAT_R64G64_SINT: element_and_block_size(16, 2, 'int64', texel_block_size(1, 1)),
    VK_FORMAT_R64G64_SFLOAT: element_and_block_size(16, 2, 'double', texel_block_size(1, 1)),
    VK_FORMAT_R64G64B64_UINT: element_and_block_size(24, 3, 'uint64', texel_block_size(1, 1)),
    VK_FORMAT_R64G64B64_SINT: element_and_block_size(24, 3, 'int64', texel_block_size(1, 1)),
    VK_FORMAT_R64G64B64_SFLOAT: element_and_block_size(24, 3, 'double', texel_block_size(1, 1)),
    VK_FORMAT_R64G64B64A64_UINT: element_and_block_size(32, 4, 'uint64', texel_block_size(1, 1)),
    VK_FORMAT_R64G64B64A64_SINT: element_and_block_size(32, 4, 'int64', texel_block_size(1, 1)),
    VK_FORMAT_R64G64B64A64_SFLOAT: element_and_block_size(32, 4, 'double', texel_block_size(1, 1)),
    VK_FORMAT_BC1_RGB_UNORM_BLOCK: element_and_block_size(8, 3, '?', texel_block_size(4, 4)),
    VK_FORMAT_BC1_RGB_SRGB_BLOCK: element_and_block_size(8, 3, '?', texel_block_size(4, 4)),
    VK_FORMAT_BC1_RGBA_UNORM_BLOCK: element_and_block_size(8, 4, '?', texel_block_size(4, 4)),
    VK_FORMAT_BC1_RGBA_SRGB_BLOCK: element_and_block_size(8, 4, '?', texel_block_size(4, 4)),
    VK_FORMAT_BC2_UNORM_BLOCK: element_and_block_size(16, 3, '?', texel_block_size(4, 4)),
    VK_FORMAT_BC2_SRGB_BLOCK: element_and_block_size(16, 3, '?', texel_block_size(4, 4)),
    VK_FORMAT_BC3_UNORM_BLOCK: element_and_block_size(16, 3, '?', texel_block_size(3, 4)),
    VK_FORMAT_BC3_SRGB_BLOCK: element_and_block_size(16, 3, '?', texel_block_size(3, 4)),
    VK_FORMAT_BC4_UNORM_BLOCK: element_and_block_size(8, 3, '?', texel_block_size(4, 4)),
    VK_FORMAT_BC4_SNORM_BLOCK: element_and_block_size(8, 3, '?', texel_block_size(4, 4)),
    VK_FORMAT_BC5_UNORM_BLOCK:  element_and_block_size(16, 3, '?', texel_block_size(4, 4)),
    VK_FORMAT_BC5_SNORM_BLOCK:  element_and_block_size(16, 3, '?', texel_block_size(4, 4)),
    VK_FORMAT_BC6H_UFLOAT_BLOCK: element_and_block_size(16, 2, '?', texel_block_size(4, 4)),
    VK_FORMAT_BC6H_SFLOAT_BLOCK: element_and_block_size(16, 2, '?', texel_block_size(4, 4)),
    VK_FORMAT_BC7_UNORM_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(4, 4)),
    VK_FORMAT_BC7_SRGB_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(4, 4)),
    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK: element_and_block_size(8, 3, '?', texel_block_size(4, 4)),
    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK: element_and_block_size(8, 3, '?', texel_block_size(4, 4)),
    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK: element_and_block_size(8, 4, '?', texel_block_size(4, 4)),
    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK: element_and_block_size(8, 4, '?', texel_block_size(4, 4)),
    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(4, 4)),
    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(4, 4)),
    VK_FORMAT_EAC_R11_UNORM_BLOCK: element_and_block_size(8, 1, '?', texel_block_size(4, 4)),
    VK_FORMAT_EAC_R11_SNORM_BLOCK: element_and_block_size(8, 1, '?', texel_block_size(4, 4)),
    VK_FORMAT_EAC_R11G11_UNORM_BLOCK: element_and_block_size(16, 2, '?', texel_block_size(4, 4)),
    VK_FORMAT_EAC_R11G11_SNORM_BLOCK: element_and_block_size(16, 2, '?', texel_block_size(4, 4)),
    VK_FORMAT_ASTC_4x4_UNORM_BLOCK:  element_and_block_size(16, 4, '?', texel_block_size(4, 4)),
    VK_FORMAT_ASTC_4x4_SRGB_BLOCK:  element_and_block_size(16, 4, '?', texel_block_size(4, 4)),
    VK_FORMAT_ASTC_5x4_UNORM_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(5, 4)),
    VK_FORMAT_ASTC_5x4_SRGB_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(5, 4)),
    VK_FORMAT_ASTC_5x5_UNORM_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(5, 5)),
    VK_FORMAT_ASTC_5x5_SRGB_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(5, 5)),
    VK_FORMAT_ASTC_6x5_UNORM_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(6, 5)),
    VK_FORMAT_ASTC_6x5_SRGB_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(6, 5)),
    VK_FORMAT_ASTC_6x6_UNORM_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(6, 6)),
    VK_FORMAT_ASTC_6x6_SRGB_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(6, 6)),
    VK_FORMAT_ASTC_8x5_UNORM_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(8, 5)),
    VK_FORMAT_ASTC_8x5_SRGB_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(8, 5)),
    VK_FORMAT_ASTC_8x6_UNORM_BLOCK:  element_and_block_size(16, 4, '?', texel_block_size(8, 6)),
    VK_FORMAT_ASTC_8x6_SRGB_BLOCK:  element_and_block_size(16, 4, '?', texel_block_size(8, 6)),
    VK_FORMAT_ASTC_8x8_UNORM_BLOCK:  element_and_block_size(16, 4, '?', texel_block_size(8, 8)),
    VK_FORMAT_ASTC_8x8_SRGB_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(8, 8)),
    VK_FORMAT_ASTC_10x5_UNORM_BLOCK:  element_and_block_size(16, 4, '?', texel_block_size(10, 5)),
    VK_FORMAT_ASTC_10x5_SRGB_BLOCK:  element_and_block_size(16, 4, '?', texel_block_size(10, 5)),
    VK_FORMAT_ASTC_10x6_UNORM_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(10, 6)),
    VK_FORMAT_ASTC_10x6_SRGB_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(10, 6)),
    VK_FORMAT_ASTC_10x8_UNORM_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(10, 8)),
    VK_FORMAT_ASTC_10x8_SRGB_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(10, 8)),
    VK_FORMAT_ASTC_10x10_UNORM_BLOCK:  element_and_block_size(16, 4, '?', texel_block_size(10, 10)),
    VK_FORMAT_ASTC_10x10_SRGB_BLOCK:  element_and_block_size(16, 4, '?', texel_block_size(10, 10)),
    VK_FORMAT_ASTC_12x10_UNORM_BLOCK:  element_and_block_size(16, 4, '?', texel_block_size(12, 10)),
    VK_FORMAT_ASTC_12x10_SRGB_BLOCK:  element_and_block_size(16, 4, '?', texel_block_size(12, 10)),
    VK_FORMAT_ASTC_12x12_UNORM_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(12, 12)),
    VK_FORMAT_ASTC_12x12_SRGB_BLOCK: element_and_block_size(16, 4, '?', texel_block_size(12, 12)),
    VK_FORMAT_D16_UNORM:  element_and_block_size(2, 1, 'uint16', texel_block_size(1, 1)),
    VK_FORMAT_X8_D24_UNORM_PACK32:  element_and_block_size(4, 1, '?', texel_block_size(1, 1)),
    VK_FORMAT_D32_SFLOAT: element_and_block_size(4, 1, 'single', texel_block_size(1, 1)),
    VK_FORMAT_S8_UINT: element_and_block_size(1, 1, 'uint8', texel_block_size(1, 1)),
    VK_FORMAT_D16_UNORM_S8_UINT: element_and_block_size(2, 1, 'uint16', texel_block_size(1, 1)),
    VK_FORMAT_D24_UNORM_S8_UINT: element_and_block_size(3, 1, 'uint16', texel_block_size(1, 1)),
    VK_FORMAT_D32_SFLOAT_S8_UINT: element_and_block_size(4, 1, 'single', texel_block_size(1, 1)),
    VK_FORMAT_G8B8G8R8_422_UNORM: element_and_block_size(4, 2, '?', texel_block_size(1, 1)),
    VK_FORMAT_B8G8R8G8_422_UNORM: element_and_block_size(4, 2, '?', texel_block_size(1, 1)),
    VK_FORMAT_R10X6_UNORM_PACK16: element_and_block_size(2, 1, '?', texel_block_size(1, 1)),
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16: element_and_block_size(4, 2, '?', texel_block_size(1, 1)),
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16: element_and_block_size(8, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16: element_and_block_size(8, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16: element_and_block_size(8, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_R12X4_UNORM_PACK16: element_and_block_size(2, 1, '?', texel_block_size(1, 1)),
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16: element_and_block_size(2, 2, '?', texel_block_size(1, 1)),
    VK_FORMAT_G16B16G16R16_422_UNORM: element_and_block_size(8, 3, '?', texel_block_size(1, 1)),
    VK_FORMAT_B16G16R16G16_422_UNORM: element_and_block_size(8, 3, '?', texel_block_size(1, 1)),
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16:  element_and_block_size(8, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16:  element_and_block_size(8, 4, '?', texel_block_size(1, 1)),
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16:  element_and_block_size(8, 4, '?', texel_block_size(1, 1))
}

def ToNumpyArray(format, width, height, data):
    format_info  = ELEMENT_AND_TEXEL_BLOCK_SIZES[format]
    image = numpy.array(numpy.frombuffer(data, format_info.type))
    image = numpy.reshape(image, (height, width, format_info.channels))
    if format_info.channels == 2: # 1, 3 and 4 are all fine. 2 is not
        image = image.copy()
        image.resize((height, width, 3))
    if format_info.channels == 4: # for now remove the alpha channel
        image = image[:,:,:3]
    return image