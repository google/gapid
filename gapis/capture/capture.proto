// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package capture;
// cc_package

import "core/os/device/device.proto";

// Record holds all the data for an entire capture.
message Record {
	// Name of the capture.
	string name = 1;
	// Database identifier of the data.
	bytes data = 2;
}

// Header holds information about the capture that is generated when the trace
// begins. It is stored in the trace file as the first section.
message Header {
	// The device used to take the capture.
	device.Instance device = 1;
	// The ABI used by the traced process.
	device.ABI abi = 2;
	// Version is incremented on breaking changes to the capture or command format.
	sint32 Version = 3;
}

// Resource is the storage type for some data keyed by an identifer.
message Resource {
	// Id is the resource id of the data blob.
	bytes id = 1;
	// Data is the actual data payload.
	bytes data = 2;
}

// FramebufferObservation is a message that holds a snapshot of the color-buffer
// of the bound framebuffer at the time of capture. These observations can be
// used to verify that replay gave the same results as what was traced.
message FramebufferObservation {
	// Framebuffer width in pixels.
	uint32 original_width = 1;
	// Framebuffer width in pixels.
	uint32 original_height = 2;
	// Width of downsampled data.
	uint32 data_width = 3;
	// height of downsampled data.
	uint32 data_height = 4;
	// The RGBA color-buffer data.
	bytes data = 5;
}
