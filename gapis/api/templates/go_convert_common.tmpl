{{/*
 * Copyright (C) 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */}}

{{Include "go_common.tmpl"}}

{{/*
-------------------------------------------------------------------------------
  Emits a type declaration and implementation for the specified command.
-------------------------------------------------------------------------------
*/}}
{{define "CommandEntry"}}
  {{AssertType $ "Function"}}
  {{$name := $.Name | GoCommandName}}
  {{$proto := $.Name | ProtoGoName}}
  {{$p := print (Global "Store") "." $proto}}
  ¶
  // ToProto returns the primary storage proto of the {{$name}} command.¶
  func (ϟa *{{$name}}) ToProto(ϟrefs *protoconv.ToProtoContext) *{{$p}} {»¶
    to := &{{$p}}{Thread: int64(ϟa.Thread())}¶
    {{range $v := $.CallParameters}}
      {{Template "Convert.To" "Field" $v "Outer" $proto}}
    {{end}}
    return to¶
  «}¶
  ¶
  // {{$name}}From builds a {{$name}} from the storage form.¶
  func {{$name}}From(from *{{$p}}, ϟrefs *protoconv.FromProtoContext) *{{$name}} {»¶
    ϟa := &{{$name}}{caller: api.CmdNoID, thread: uint64(from.GetThread())}¶
    {{range $v := $.CallParameters}}
      {{Template "Convert.From" "Field" $v "Outer" $proto}}
    {{end}}
    return ϟa¶
  «}¶
¶
  {{if not (IsVoid $.Return.Type)}}
    var _ api.CmdWithResult = (*{{$name}})(nil)¶
¶
    // GetResult returns the result value for this command.¶
    func (ϟa *{{$name}}) GetResult() proto.Message {»¶
      ϟrefs := &protoconv.ToProtoContext{}¶
      _ = ϟrefs¶
      to := &{{Global "OutputDir"}}_pb.{{$proto}}Call{}¶
      {{Template "Convert.To" "Field" $.Return "Outer" $proto}}
      return to¶
    «}¶
¶
    // SetResult changes the result value.¶
    func (ϟa *{{$name}}) SetResult(v proto.Message) error {»¶
      ϟrefs := &protoconv.FromProtoContext{}¶
      _ = ϟrefs¶
      from, ok := v.(*{{Global "OutputDir"}}_pb.{{$proto}}Call)¶
      if !ok {»¶
        return fmt.Errorf("Expected result type *{{$proto}}Call, got %T", v)¶
      «}¶
      {{Template "Convert.From" "Field" $.Return "Outer" $proto}}
      return nil¶
    «}¶
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits a type declaration and implementation for the specified class.
-------------------------------------------------------------------------------
*/}}
{{define "ClassEntry"}}
  {{$name := Macro "Go.Type" $}}
  {{$proto := $.Name | ProtoGoName}}
  ¶
  // ToProto returns the storage form of the {{$name}}.¶
  func (ϟa *{{$name}}) ToProto(ϟrefs *protoconv.ToProtoContext) *{{Global "OutputDir"}}_pb.{{$proto}} {»¶
    to := &{{Global "OutputDir"}}_pb.{{$proto}}{}¶
    {{range $v := $.Fields}}
      {{Template "Convert.To" "Field" $v "Outer" $proto}}
    {{end}}
    return to¶
  «}¶
  ¶
  // {{$name}}From builds a {{$name}} from the storage form.¶
  func {{$name}}From(from *{{Global "OutputDir"}}_pb.{{$proto}}, ϟrefs *protoconv.FromProtoContext) {{$name}} {»¶
    ϟa := {{$name}}{}¶
    {{range $v := $.Fields}}
      {{Template "Convert.From" "Field" $v "Outer" $proto}}
    {{end}}
    return ϟa¶
  «}¶
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the conversion for a signle field from live type to storage proto.
-------------------------------------------------------------------------------
*/}}
{{define "Convert.To"}}
  {{$name := $.Field.Name | GoPublicName}}
  {{$proto := $.Field.Name | ProtoGoName}}
  {{$type := TypeOf $.Field}}
  {{$truetype := $type | Underlying}}
  {{if IsStaticArray $truetype}}
    to.{{$proto}} = make([]{{Macro "Convert.StorageType" $truetype.ValueType}}, {{$truetype.Size}})¶
    for ϟi := 0; ϟi < {{$truetype.Size}}; ϟi++ {»¶
      ϟv := ϟa.{{$name}}[ϟi]¶
      to.{{$proto}}[ϟi] = {{Template "Convert.ToProto" "Type" $truetype.ValueType "Value" "ϟv"}}¶
    «}¶
  {{else if IsMap $truetype}}
    {{$maptype := printf "%s_%s_Map" $.Outer $.Field.Name}}
    {{$maptype := printf "%s_pb.%s" (Global "OutputDir") (ProtoGoName $maptype)}}
    if referenceID, isNew := ϟrefs.GetReferenceID(ϟa.{{$name}}, {{$type.Name}}{}); isNew {»¶
      ϟobj := &{{$maptype}}{ReferenceID: referenceID}¶
      ϟkeys := ϟa.{{$name}}.KeysSorted()¶
      for _, ϟk := range ϟkeys {»¶
        ϟv := ϟa.{{$name}}.Get(ϟk)¶
        ϟobj.Keys = append(ϟobj.Keys, {{Template "Convert.ToProto" "Type" $type.KeyType "Value" "ϟk"}})¶
        ϟobj.Values = append(ϟobj.Values, {{Template "Convert.ToProto" "Type" $type.ValueType "Value" "ϟv"}})¶
      «}¶
      to.{{$proto}} = ϟobj¶
    «} else {»¶
      to.{{$proto}} = &{{$maptype}}{ReferenceID: referenceID}¶
    «}¶
  {{else}}
    {{$value := printf "ϟa.%s" $name}}
    to.{{$proto}} = {{Template "Convert.ToProto" "Type" $type "Value" $value}}¶
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the conversion for a single field from storage proto to live type.
-------------------------------------------------------------------------------
*/}}
{{define "Convert.From"}}
  {{$name := $.Field.Name | GoPublicName}}
  {{$proto := $.Field.Name | ProtoGoName}}
  {{$type := TypeOf $.Field}}
  {{$truetype := Underlying $type}}
  {{if IsStaticArray $truetype}}
    for ϟi := 0; ϟi < {{$truetype.Size}}; ϟi++ {»¶
      ϟv := from.{{$proto}}[ϟi]¶
      ϟa.{{$name}}[ϟi] = {{Template "Convert.FromProto" "Type" $truetype.ValueType "Value" "ϟv"}}¶
    «}¶
  {{else if IsMap $truetype}}
    ϟa.{{$name}} = ϟrefs.GetReferencedObject(from.{{$proto}}.GetReferenceID(), {{$.Field.Type.Name}}{}, func () interface{} {»¶
      ϟobj := New{{$.Field.Type.Name}}()¶
      var ϟk {{Template "Convert.StorageType" $truetype.KeyType}}¶
      for ϟi, ϟv:= range from.{{$proto}}.Values {»¶
        if ϟi < len(from.{{$proto}}.Keys) {»¶
          ϟk = from.{{$proto}}.Keys[ϟi]¶
        «}¶
        ϟobj.Set({{Template "Convert.FromProto" "Type" $truetype.KeyType "Value" "ϟk"}},
                 {{Template "Convert.FromProto" "Type" $truetype.ValueType "Value" "ϟv"}})¶
        {{if not (IsString $truetype.KeyType)}} ϟk++ // Increment if keys are trimmed ¶{{end}}
      «}¶
      return ϟobj¶
    «}).({{$.Field.Type.Name}})¶
  {{else}}
    {{$value := printf "from.%s" $proto}}
    ϟa.{{$name}} = {{Template "Convert.FromProto" "Type" $type "Value" $value}}¶
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the proto type for the provided AST type or expression.
-------------------------------------------------------------------------------
*/}}
{{define "Convert.LiveType"}}
  {{if IsBool               $}}bool
  {{else if IsInt           $}}memory.Int
  {{else if IsUint          $}}memory.Uint
  {{else if IsSize          $}}memory.Size
  {{else if IsChar          $}}memory.Char
  {{else if IsU8            $}}uint8
  {{else if IsS8            $}}int8
  {{else if IsU16           $}}uint16
  {{else if IsS16           $}}int16
  {{else if IsF32           $}}float32
  {{else if IsU32           $}}uint32
  {{else if IsS32           $}}int32
  {{else if IsF64           $}}float64
  {{else if IsU64           $}}uint64
  {{else if IsS64           $}}int64
  {{else if IsString        $}}string
  {{else if IsPointer       $}}{{Template "Go.Type" $}}
  {{else if IsSlice         $}}{{Template "Go.Type" $}}
  {{else if IsEnum          $}}{{Template "Go.Type" $}}
  {{else if IsPseudonym     $}}{{Template "Go.Type" $}}
  {{else if IsClass         $}}{{Template "Go.Type" $}}
  {{else if IsReference     $}}{{Template "Go.Type" $}}
  {{else if IsMap           $}}{{Template "Go.Type" $}}
  {{else}}{{Error "macro Convert.LiveType called with unsupported type: %T" $}}
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the proto type for the provided AST type or expression.
-------------------------------------------------------------------------------
*/}}
{{define "Convert.StorageType"}}
  {{if IsBool               $}}int32
  {{else if IsInt           $}}int64
  {{else if IsUint          $}}int64
  {{else if IsChar          $}}int32
  {{else if IsF32           $}}float32
  {{else if IsF64           $}}float64
  {{else if IsNumericType   $}}int64 {{/* Must be after floats */}}
  {{else if IsString        $}}string
  {{else if IsEnum          $}}int32
  {{else if IsPointer       $}}int64
  {{else if IsSlice         $}}memory_pb.Slice
  {{else if IsPseudonym     $}}{{Template "Convert.StorageType" $.To}}
  {{else if IsClass         $}}*{{Global "Store"}}.{{$.Name | ProtoGoName}}
  {{else if IsReference     $}}*{{Global "Store"}}.{{$.Name | ProtoGoName}}_Reference
  {{else}}{{Error "macro Convert.StorageType called with unsupported type: %T" $}}
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emit the code to assign to the lhs storage from a live value for the given type
-------------------------------------------------------------------------------
*/}}
{{define "Convert.ToProto"}}
    {{$source := Macro "Convert.LiveType" $.Type}}
    {{$target := Macro "Convert.StorageType" $.Type}}
    {{$truetype := Underlying $.Type}}
    {{if IsClass $truetype}}{{$.Value}}.ToProto(ϟrefs)
    {{else if IsReference $truetype}}
      {{$reftype := printf "%s_pb.%s_Reference" (Global "OutputDir") ($truetype.To.Name | ProtoGoName)}}
      func() *{{$reftype}} {¶»
        ϟobj := &{{$reftype}}{}¶
        referenceID, isNew := ϟrefs.GetReferenceID({{$.Value}}, {{$source}}(nil))¶
        ϟobj.ReferenceID = referenceID¶
        if isNew {¶»
          ϟobj.Value = {{Template "Convert.ToProto" "Type" $truetype.To "Value" $.Value}}¶
        «}¶
        return ϟobj¶
      «} ()
    {{else if IsPointer $truetype}}{{$target}}({{$.Value}}.addr)
    {{else if IsSlice $truetype}}&{{$target}}{»¶
      Root: {{$.Value}}.root,¶
      Base: {{$.Value}}.base,¶
      Count: {{$.Value}}.count,¶
      Pool: uint32({{$.Value}}.pool),¶
    «}
    {{else if IsBool $truetype}}func(v bool) {{$target}}  { if v { return 1 } else { return 0 } } ({{$.Value}})
    {{else if eq $source $target}}{{$.Value}}
    {{else}}({{$target}})({{$.Value}})
    {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emit the code to assign to the lhs live from a storage value for the given type
-------------------------------------------------------------------------------
*/}}
{{define "Convert.FromProto"}}
    {{$source := Macro "Convert.StorageType" $.Type}}
    {{$target := Macro "Convert.LiveType" $.Type}}
    {{$truetype := Underlying $.Type}}
    {{if IsClass $truetype}}{{Template "Go.Type" $.Type}}From({{$.Value}}, ϟrefs)
    {{else if IsReference $truetype}}
      ϟrefs.GetReferencedObject({{$.Value}}.GetReferenceID(), ({{$target}})(nil), func() interface {} {»¶
        {{$value := printf "%s.Value" $.Value}}
        ϟobj := {{Template "Convert.FromProto" "Type" $.Type.To "Value" $value}}¶
        return &ϟobj¶
      «}).({{$target}})
    {{else if IsPointer $truetype}}{{$target}}{addr: uint64({{$.Value}}), pool: memory.ApplicationPool}
    {{else if IsSlice $truetype}}{{$target}}{»¶
      root:  {{$.Value}}.Root,¶
      base:  {{$.Value}}.Base,¶
      count: {{$.Value}}.Count,¶
      pool:  memory.PoolID({{$.Value}}.Pool),¶
    «}
    {{else if IsBool $truetype}}({{$.Value}} != 0)
    {{else if eq $source $target}}{{$.Value}}
    {{else}}({{$target}})({{$.Value}})
    {{end}}
{{end}}
