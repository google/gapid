{{/*
 * Copyright (C) 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */}}

{{Include "go_common.tmpl"}}


{{/*
-------------------------------------------------------------------------------
  Emits the conversion for a single field from live type to storage proto.
-------------------------------------------------------------------------------
*/}}
{{define "Convert.To"}}
  {{$name       := $.Field.Name | GoPublicName}}
  {{$proto      := $.Field.Name | ProtoGoName}}
  {{$type       := TypeOf $.Field}}
  {{$underlying := Underlying $type}}
  {{if IsStaticArray $underlying}}
    to.{{$proto}} = make([]{{Macro "Convert.StorageType" $underlying.ValueType}}, {{$underlying.Size}})¶
    for ϟi := 0; ϟi < {{$underlying.Size}}; ϟi++ {»¶
      ϟv := ϟc.{{$name}}().Get(ϟi)¶
      to.{{$proto}}[ϟi] = {{Template "Convert.ToProto" "Type" $underlying.ValueType "Value" "ϟv"}}¶
    «}¶
  {{else}}
    {{$value := printf "ϟc.%s()" $name}}
    to.{{$proto}} = {{Template "Convert.ToProto" "Type" $type "Value" $value}}¶
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the conversion for a single field from storage proto to live type.
-------------------------------------------------------------------------------
*/}}
{{define "Convert.From"}}
  {{$name       := $.Field.Name | GoPublicName}}
  {{$proto      := $.Field.Name | ProtoGoName}}
  {{$type       := TypeOf $.Field}}
  {{$underlying := Underlying $type}}
  {{if IsStaticArray $underlying}}
    for ϟi := 0; ϟi < {{$underlying.Size}}; ϟi++ {»¶
      ϟv := from.{{$proto}}[ϟi]¶
      ϟc.{{$name}}().Set(ϟi, {{Template "Convert.FromProto" "Type" $underlying.ValueType "Value" "ϟv"}})¶
    «}¶
  {{else}}
    {{$value := printf "from.%s" $proto}}
    ϟc.Set{{$name}}({{Template "Convert.FromProto" "Type" $type "Value" $value}})¶
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the go type for the provided AST type or expression.
-------------------------------------------------------------------------------
*/}}
{{define "Convert.LiveType"}}
  {{if IsBool               $}}bool
  {{else if IsInt           $}}ϟmem.Int
  {{else if IsUint          $}}ϟmem.Uint
  {{else if IsSize          $}}ϟmem.Size
  {{else if IsChar          $}}ϟmem.Char
  {{else if IsU8            $}}uint8
  {{else if IsS8            $}}int8
  {{else if IsU16           $}}uint16
  {{else if IsS16           $}}int16
  {{else if IsF32           $}}float32
  {{else if IsU32           $}}uint32
  {{else if IsS32           $}}int32
  {{else if IsF64           $}}float64
  {{else if IsU64           $}}uint64
  {{else if IsS64           $}}int64
  {{else if IsString        $}}string
  {{else if IsPointer       $}}{{Template "Go.Type" $}}
  {{else if IsSlice         $}}{{Template "Go.Type" $}}
  {{else if IsEnum          $}}{{Template "Go.Type" $}}
  {{else if IsPseudonym     $}}{{Template "Go.Type" $}}
  {{else if IsClass         $}}{{Template "Go.Type" $}}
  {{else if IsReference     $}}{{Template "Go.Type" $}}
  {{else if IsMap           $}}{{Template "Go.Type" $}}
  {{else}}{{Error "macro Convert.LiveType called with unsupported type: %T" $}}
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the proto type for the provided AST type or expression.
-------------------------------------------------------------------------------
*/}}
{{define "Convert.StorageTypeName"}}
  {{if IsBool               $}}int32
  {{else if IsInt           $}}int64
  {{else if IsUint          $}}int64
  {{else if IsChar          $}}int32
  {{else if IsF32           $}}float32
  {{else if IsF64           $}}float64
  {{else if IsNumericType   $}}int64 {{/* Must be after floats */}}
  {{else if IsString        $}}string
  {{else if IsEnum          $}}int64
  {{else if IsPointer       $}}int64
  {{else if IsSlice         $}}memory_pb.Slice
  {{else if IsPseudonym     $}}{{Template "Convert.StorageTypeName" $.To}}
  {{else if IsClass         $}}{{ProtoType $ | ProtoGoName}}
  {{else if IsReference     $}}{{ProtoType $ | ProtoGoName}}
  {{else if IsMap           $}}{{ProtoType $ | ProtoGoName}}
  {{else}}{{Error "macro Convert.StorageType called with unsupported type: %T" $}}
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the proto type for the provided AST type or expression.
-------------------------------------------------------------------------------
*/}}
{{define "Convert.StorageType"}}
  {{     if IsPseudonym     $}}{{Template "Convert.StorageType" $.To}}
  {{else if IsClass         $}}*{{Global "Store"}}.{{Template "Convert.StorageTypeName" $}}
  {{else if IsReference     $}}*{{Global "Store"}}.{{Template "Convert.StorageTypeName" $}}
  {{else if IsMap           $}}*{{Global "Store"}}.{{Template "Convert.StorageTypeName" $}}
  {{else                     }}{{Template "Convert.StorageTypeName" $}}
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emit the code to assign to the lhs storage from a live value for the given type
-------------------------------------------------------------------------------
*/}}
{{define "Convert.ToProto"}}
    {{$source := Macro "Convert.LiveType" $.Type}}
    {{$target := Macro "Convert.StorageType" $.Type}}
    {{$underlying := Underlying $.Type}}
    {{     if IsClass     $underlying}}{{$.Value}}.ToProto(ϟrefs)
    {{else if IsMap       $underlying}}{{$.Value}}.ToProto(ϟrefs)
    {{else if IsReference $underlying}}{{$.Value}}.ToProto(ϟrefs)
    {{else if IsPointer   $underlying}}{{$target}}({{$.Value}}.Address())
    {{else if IsBool      $underlying}}func(v bool) {{$target}} { if v { return 1 } else { return 0 } } ({{$.Value}})
    {{else if IsSlice     $underlying}}&{{$target}}{»¶
      Root:  {{$.Value}}.Root(),¶
      Base:  {{$.Value}}.Base(),¶
      Size:  {{$.Value}}.Size(),¶
      Count: {{$.Value}}.Count(),¶
      Pool:  uint32({{$.Value}}.Pool()),¶
    «}
    {{else if eq $source $target}}{{$.Value}}
    {{else}}({{$target}})({{$.Value}})
    {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emit the code to assign to the lhs live from a storage value for the given type
-------------------------------------------------------------------------------
*/}}
{{define "Convert.FromProto"}}
    {{$source := Macro "Convert.StorageType" $.Type}}
    {{$target := Macro "Convert.LiveType" $.Type}}
    {{$underlying := Underlying $.Type}}
    {{     if IsClass     $underlying}}{{Template "Go.Type" $.Type}}From(ctx, {{$.Value}}, ϟrefs)
    {{else if IsMap       $underlying}}{{Template "Go.Type" $.Type}}From(ctx, {{$.Value}}, ϟrefs)
    {{else if IsReference $underlying}}{{Template "Go.Type" $.Type}}From(ctx, {{$.Value}}, ϟrefs)
    {{else if IsPointer   $underlying}}{{$target}}({{$.Value}})
    {{else if IsBool      $underlying}}({{$.Value}} != 0)
    {{else if IsSlice     $underlying}}New{{$target}}({{$.Value}}.Root, {{$.Value}}.Base, {{$.Value}}.Size, {{$.Value}}.Count, ϟmem.PoolID({{$.Value}}.Pool))
    {{else if eq $source $target}}{{$.Value}}
    {{else}}({{$target}})({{$.Value}})
    {{end}}
{{end}}
