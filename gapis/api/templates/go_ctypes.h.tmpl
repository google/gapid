{{/*
 * Copyright (C) 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */}}

{{/* ---- Includes ---- */}}
{{Include "c_common.tmpl"}}

{{$filename := "ctypes.h" }}
{{$ | Macro "Types" | Reflow 4 | Write $filename}}

{{define "Types"}}
  {{AssertType $ "API"}}
  {{Template "C.Copyright"}}
  {{$guard := print "GAPIS_" (Upper (Global "API")) "_CTYPES_H"}}
¶
  #ifndef {{$guard}}
  #define {{$guard}}
¶
  #include "gapil/runtime/cc/runtime.h"
  #include <stdint.h>
  #include <stdbool.h>
  typedef uint8_t void_t;
¶
  {{ForEach $.Classes    "ForwardDeclareType" | JoinWith "\n"}}¶
  {{ForEach $.References "ForwardDeclareType" | JoinWith "\n"}}¶

  {{ForEach $.Enums      "DeclareType" | JoinWith "\n"}}¶
  {{ForEach $.Pseudonyms "DeclareType" | JoinWith "\n"}}¶
  {{ForEach $.Maps       "DeclareType" | JoinWith "\n"}}¶
  {{ForEach $.References "DeclareType" | JoinWith "\n"}}¶
  {{ForEach $.Classes    "DeclareType" | JoinWith "\n"}}¶

  {{ForEach (AllCommands $) "DeclareCommand" | JoinWith "\n"}}¶
¶
  {{Template "DeclareState" $}}
¶
  #endif // {{$guard}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits C type forward declaration for specified AST type
-------------------------------------------------------------------------------
*/}}
{{define "ForwardDeclareType"}}
  {{     if IsClass     $}}struct {{Template "C.Type" $}};¶typedef struct {{Template "C.Type" $}} {{Template "C.Type" $}};
  {{else if IsReference $}}struct {{Template "C.TypeName" $}};¶typedef struct {{Template "C.TypeName" $}} {{Template "C.TypeName" $}};
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the C type declaration specified AST type if it hasn't already been
  declared.
-------------------------------------------------------------------------------
*/}}
{{define "DeclareType"}}
  {{if not (IsBuiltin $)}}
    {{$key  := printf "ApiType%vDeclared" $.Name}}
    {{if not (Global $key)}}
      {{Global $key "true"}}
      {{     if IsClass       $}}{{Template "DeclareClass"       $}}
      {{else if IsEnum        $}}{{Template "DeclareEnum"        $}}
      {{else if IsMap         $}}{{Template "DeclareMap"         $}}
      {{else if IsPseudonym   $}}{{Template "DeclarePseudonym"   $}}
      {{else if IsPointer     $}}{{Template "DeclareType"        $.To}}
      {{else if IsReference   $}}{{Template "DeclareReference"   $}}
      {{else if IsStaticArray $}}{{Template "DeclareStaticArray" $}}
      {{else if IsSlice       $}}
      {{else}}{{Error "DeclareType does not support type '%T'"   $}}
      {{end}}
    {{end}}
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the declarations for all non-declared field types of the class followed
  by the class declaration.
-------------------------------------------------------------------------------
*/}}
{{define "DeclareClass"}}
  {{AssertType $ "Class"}}

  {{range $f := $.Fields}}
    {{Template "DeclareType" (TypeOf $f)}}
  {{end}}

  {{$name := Macro "C.TypeName" $}}
  typedef struct {{$name}} {
    {{range $f := $.Fields}}
      {{Template "C.Type" $f}} {{CFieldName $f.Name}};
    {{end}}
    {{if not (len $.Fields)}}
      uint8_t dummy; // At least one field so Cgo sees the type.
    {{end}}
  } {{$name}};¶
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the declaration of the pseudonym's target type (if it is not already
  declared) followed by the pseudonym's typedef declaration.
-------------------------------------------------------------------------------
*/}}
{{define "DeclarePseudonym"}}
  {{AssertType $ "Pseudonym"}}

  {{Template "DeclareType" $.To}}

  typedef {{Template "C.Type" $.To}} {{Template "C.Type" $}};
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the declaration of the map's key and value types (if it is not already
  declared) followed by the declaration of the map and its functions.
-------------------------------------------------------------------------------
*/}}
{{define "DeclareMap"}}
  {{AssertType $ "Map"}}

  {{Template "DeclareType" $.KeyType}}
  {{Template "DeclareType" $.ValueType}}

  {{$name := print (Macro "C.TypeName" $)}}
  {{$elem := print $name "_element"}}
  {{$key := Macro "C.Type" $.KeyType}}
  {{$val := Macro "C.Type" $.ValueType}}

  typedef struct {{$elem}} {
    uint64_t used;
    {{$key}} key;
    {{$val}} value;
  } {{$elem}};

  typedef struct {{$name}} {
    uint32_t ref_count;
    arena* arena;
    uint64_t count;
    uint64_t capacity;
    {{$elem}}* elements;
  } {{$name}};

  {{$mangled := Macro "C.Mangle" $}}
  {{$global := print "declared-" $mangled}}
  {{if not (Global $global)}}
    {{Global $global "true"}}
    {{$key := Macro "C.SimplifiedType" $.KeyType}}
    void*      {{$mangled}}__index(void* map, {{$key}} key, GAPIL_BOOL insert);
    void       {{$mangled}}__remove(void* map, {{$key}} key);
    GAPIL_BOOL {{$mangled}}__contains(void* map, {{$key}} key);
    void       {{$mangled}}__clear(void* map);
    void       {{$mangled}}__reference(void* map);
    void       {{$mangled}}__release(void* map);
    void*      {{$mangled}}__clone(void* map, arena* arena, void* tracker);
  {{end}}
¶
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the C declaration of the StaticArray typedef
-------------------------------------------------------------------------------
*/}}
{{define "DeclareStaticArray"}}
  {{AssertType $ "StaticArray"}}

  {{Template "DeclareType" $.ValueType}}

  typedef {{Template "C.Type" $.ValueType}} {{Template "C.TypeName" $}}[{{$.Size}}];
¶
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the C declaration of the Reference type
-------------------------------------------------------------------------------
*/}}
{{define "DeclareReference"}}
  {{AssertType $ "Reference"}}

  {{Template "DeclareType" $.To}}

  {{$name := Macro "C.TypeName" $}}

  typedef struct {{$name}} {
    uint32_t ref_count;
    arena* arena;
    {{Template "C.Type" $.To}} val;
  } {{Template "C.TypeName" $}};
¶
  {{$mangled := Macro "C.Mangle" $}}
  {{$name}}* {{$mangled}}__clone({{$name}}* object, arena* arena, void* tracker);
  void       {{$mangled}}__reference(void* object);
  void       {{$mangled}}__release(void* object);
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the declaration of the map's key and value types (if it is not already
  declared) followed by the map's declaration as a gapil::Map.
-------------------------------------------------------------------------------
*/}}
{{define "DeclareEnum"}}
  typedef {{Template "C.EnumType" $}} {{$.Name}};
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the C declaration of the Command
-------------------------------------------------------------------------------
*/}}
{{define "DeclareCommand"}}
  {{range $p := $.FullParameters}}
    {{Template "DeclareType" $p.Type}}
  {{end}}

  typedef struct {{$.Name}} {
    uint64_t thread_id;
    {{range $p := $.FullParameters}}
      {{Template "C.Type" $p}} {{$p.Name | CFieldName}};
    {{end}}
  } {{$.Name}};

  {{$.Name}}* {{$.Name}}__clone({{$.Name}}* object, arena* arena, void* tracker);
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the C declaration of the State
-------------------------------------------------------------------------------
*/}}
{{define "DeclareState"}}
  typedef struct State {
    {{range $g := $.Globals}}
      {{Template "C.Type" $g}} {{$g.Name | CFieldName}};
    {{end}}
  } State;
{{end}}
