{{/*
 * Copyright (C) 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */}}

{{/* ---- Includes ---- */}}
{{Include "go_common.tmpl"}}
{{Include "c_common.tmpl"}}

{{$ | Macro "api.go" | GoFmt | Write "api.go"}}

{{define "api.go"}}
  {{AssertType $ "API"}}
  {{template "Go.GeneratedHeader" (Global "OutputDir")}}

import (
    "context"
    "fmt"
    "reflect"
    "sort"

    "github.com/google/gapid/core/data"
    "github.com/google/gapid/core/data/binary"
    "github.com/google/gapid/core/data/dictionary"
    "github.com/google/gapid/core/data/id"
    "github.com/google/gapid/core/math/u64"
	  "github.com/google/gapid/core/os/device"
    "github.com/google/gapid/gapis/replay"
    "github.com/google/gapid/gapis/replay/builder"
    "github.com/google/gapid/gapis/replay/protocol"
    "github.com/google/gapid/gapis/replay/value"
    "github.com/google/gapid/gapis/service/path"

    ϟapi "github.com/google/gapid/gapis/api"
    ϟmem "github.com/google/gapid/gapis/memory"
  )

  var ( // Don't error if these packages aren't used.
    _ = dictionary.Entry{}
    _ = protocol.OpCall
    _ = sort.IntSlice(nil)
  )

¶
  {{template "Go.CommentHeader" "Enums"}}
  {{ForEach $.Enums "DeclareEnum" | JoinWith "\n"}}
¶
  {{template "Go.CommentHeader" "StaticArrays"}}
  {{ForEach $.StaticArrays "DeclareStaticArray" | JoinWith "\n"}}
¶
  {{template "Go.CommentHeader" "Maps"}}
  {{ForEach $.Maps "DeclareMap" | JoinWith "\n"}}
¶
  {{template "Go.CommentHeader" "Slices"}}
  {{ForEach $.Slices "DeclareSlice" | JoinWith "\n"}}
¶
  {{template "Go.CommentHeader" "Pointers"}}
  {{ForEach $.Pointers "DeclarePointer" | JoinWith "\n"}}
¶
  {{template "Go.CommentHeader" "Pseudonyms"}}
  {{ForEach $.Pseudonyms "DeclarePseudonym" | JoinWith "\n"}}
¶
  {{template "Go.CommentHeader" "Classes"}}
  {{ForEach $.Classes "DeclareClass" | JoinWith "\n"}}
¶
  {{template "Go.CommentHeader" "Commands"}}
  {{range $c := AllCommands $}}
    {{if not (GetAnnotation $c "pfn")}} {{/* TODO remove the @pfn nastiness */}}
      {{Template "DeclareCommand" $c}}¶
    {{end}}
  {{end}}
¶
  {{template "Go.CommentHeader" "CommandBuilder"}}
  {{Template "DeclareCommandBuilder" $}}
¶
  {{template "Go.CommentHeader" "State"}}
  {{Template "DeclareState" $}}¶
¶
  {{template "Go.CommentHeader" "API"}}
  {{Template "DeclareAPI" $}}¶
¶
  func init() {
    ϟapi.Register(API{})
  }
¶
  func panicOnError(err error) {
    if err != nil {
      panic(err)
    }
  }
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the Go declaration of the Enum type.
-------------------------------------------------------------------------------
*/}}
{{define "DeclareEnum"}}
  {{AssertType $ "Enum"}}

  {{$name := Macro "Go.Type" $}}

  type {{$name}} {{Template "Go.Type" $.NumberType}}

  {{if len $.Entries}}
    const(»
      {{range $entry := $.Entries}}
        {{$name}}_{{$entry.Name}} = {{$name}}({{$entry.Value}})
      {{end}}
    «)
  {{end}}

  func (e {{$name}}) String() string {
    switch e {
      {{range $e := UniqueEnumKeys $}}
        case {{$name}}_{{$e.Name}}: return "{{$e.Name}}"
      {{end}}
    }
    return fmt.Sprintf("{{$.Name}}(%d)", e)
  }

  func Decode{{$name}}(ϟd *ϟmem.Decoder) {{$name}} {
    return {{$name}}({{Template "Go.Decode" $.NumberType}})
  }
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the Go declaration of the StaticArray type.
-------------------------------------------------------------------------------
*/}}
{{define "DeclareStaticArray"}}
  {{AssertType $ "StaticArray"}}

  {{$ty := Macro "Go.Type" $}}
  type {{$ty}} [{{$.Size}}]{{Template "Go.Type" $.ValueType}}

  {{if IsNumericType $.ValueType}}
    func (a {{$ty}}) value(ϟb *builder.Builder, ϟa ϟapi.Cmd, ϟg *ϟapi.GlobalState) value.Pointer {
      for _, v := range a {
        ϟb.Push({{Template "Go.Replay.Value" "Type" $.ValueType "Name" "v"}})
      }
      return ϟb.Buffer({{$.Size}})
    }
  {{end}}

  // Encode encodes this static array to the encoder.
  func (a {{$ty}}) Encode(ϟe *ϟmem.Encoder) {
    for i, c := 0, {{$.Size}}; i < c; i++ {
      {{Template "Go.Encode" "Type" $.ValueType "Value" "a[i]"}}
    }
  }

  // Decode decodes this static array from the decoder.
  func Decode{{$ty | Title}}(ϟd *ϟmem.Decoder) {{$ty}} {
    out := {{$ty}}{}
    ϟmem.Read(ϟd, &out)
    return out
  }
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the Go declaration of the Map type.
-------------------------------------------------------------------------------
*/}}
{{define "DeclareMap"}}
  {{AssertType $ "Map"}}

  {{$name  := $.Name}}
  {{$key   := Macro "Go.Type" $.KeyType}}
  {{$value := Macro "Go.Type" $.ValueType}}

  type {{$name}} struct { Map *map[{{$key}}]{{$value}} }

  func New{{$name}}() {{$name}} {
    return {{$name}} { &map[{{$key}}]{{$value}}{} }
  }

  func (m {{$name}}) Get(key {{$key}}) {{$value}} {
    {{if $init := Macro "Go.DefaultInitialValue" $.ValueType}}
      v, ok := (*m.Map)[key]
      if !ok {
        v = {{$init}}
      }
      return v
    {{else}}
      return (*m.Map)[key]
    {{end}}
  }

  func (m {{$name}}) Lookup(key {{$key}}) (v {{$value}}, ok bool) {
    if m.Map != nil {
      v, ok = (*m.Map)[key]
    }
    {{if $init := Macro "Go.DefaultInitialValue" $.ValueType}}
      if !ok {
        v = {{$init}}
      }
    {{end}}
    return
  }

  func (m {{$name}}) Set(key {{$key}}, val {{$value}}) {
    (*m.Map)[key] = val
  }

  func (m {{$name}}) Add(key {{$key}}, val {{$value}}) {{$name}} {
    (*m.Map)[key] = val
    return m
  }

  func (m {{$name}}) Contains(key {{$key}}) (ok bool) {
    if m.Map != nil {
      _, ok = (*m.Map)[key]
    }
    return
  }

  func (m {{$name}}) Remove(key {{$key}}) {
    if m.Map != nil {
      delete(*m.Map, key)
    }
  }

  func (m {{$name}}) Len() int {
    if m.Map != nil {
      return len(*m.Map)
    }
    return 0
  }

  // Returns an object which can be used for interation in a range-based loop.
  func (m {{$name}}) Range() map[{{$key}}]{{$value}} {
    if m.Map != nil {
      return *m.Map
    }
    return nil
  }

  {{$sorted := (print $name "_SortKeys")}}
  type {{$sorted}} []{{$key}}

  func (s {{$sorted}}) Len() int           { return len(s) }
  func (s {{$sorted}}) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }

  {{if Macro "IsSortable" $.KeyType}}
    func (s {{$sorted}}) Less(i, j int) bool { return s[i] < s[j] }
  {{else}}
    // Not naturally sorted {{$key}}, using fmt.Sprint
    func (s {{$sorted}}) Less(i, j int) bool { return fmt.Sprint(s[i]) < fmt.Sprint(s[j]) }
  {{end}}

  func (m {{$name}}) Keys() []{{$key}} {
    if m.Map == nil {
      return nil
    }
    s := make({{$sorted}}, len(*m.Map))
    i := 0
    for k, _ := range *m.Map {
      s[i] = k
      i++
    }
    sort.Sort(s)
    return s
  }
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the Go declaration of the Slice type (or slice pseudonym).
-------------------------------------------------------------------------------
*/}}
{{define "DeclareSlice"}}
  {{AssertType $ "Slice" "Pseudonym"}}

  {{$s          := $ | Underlying | Unpack                 }}
  {{$slice_ty   := Macro "Go.Type"   $                     }}
  {{$ptr_ty     := Macro "Go.Type"   $s.Pointer            }}
  {{$el_ty      := Macro "Go.Type"   $s.To                 }}
  {{$el_size    := Macro "Go.SizeOf" $s.To                 }}
  {{$el_is_char := IsChar    ($s.To | Underlying | Unpack) }}
  {{$el_is_void := IsVoid    ($s.To | Underlying | Unpack) }}
  {{$el_is_ptr  := IsPointer ($s.To | Underlying | Unpack) }}
  {{$el_is_class := IsClass  ($s.To | Underlying | Unpack) }}

  // {{$slice_ty}} is a slice of {{$el_ty}}.
  type {{$slice_ty}} struct {
    root  uint64        // Original pointer this slice derives from.
    base  uint64        // Address of first element.
    size  uint64        // Total size of the slice in bytes.
    count uint64        // Number of elements in the slice.
    pool  ϟmem.PoolID // The pool identifier.
  }

  {{if $el_is_char}}
    // Make{{$slice_ty}}FromString returns a {{$slice_ty}} backed by a new
    // memory pool containing a copy of str.
    func Make{{$slice_ty}}FromString(str string, ϟg *ϟapi.GlobalState) {{$slice_ty}} {
      id, pool := ϟg.Memory.New()
      pool.Write(0, ϟmem.Blob([]byte(str)))
      return {{$slice_ty}}{
        size:  uint64(len(str)),
        count: uint64(len(str)),
        pool:  id,
      }
    }
  {{end}}

  // Assign sets all fields of this slice from different slice. Needed for cloning.
  func (s *{{$slice_ty}}) Assign(v interface{}) bool {
    if v, ok := v.({{$slice_ty}}); ok {
      *s = v
      return true
    }
    return false
  }

  // Make{{$slice_ty}} returns a {{$slice_ty}} backed by a new memory pool.
  func Make{{$slice_ty}}(count uint64, ϟg *ϟapi.GlobalState) {{$slice_ty}} {
    ϟl := ϟg.MemoryLayout; _ = ϟl
    id, _ := ϟg.Memory.New()
    return {{$slice_ty}}{
      size:  count * {{Template "Go.SizeOf" $s.To}},
      count: count,
      pool:  id,
    }
  }

  // Clone returns a copy of the {{$slice_ty}} in a new memory pool.
  func (s {{$slice_ty}}) Clone(ϟctx context.Context, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState, ϟb *builder.Builder) {{$slice_ty}} {
    s.OnRead(ϟctx, ϟc, ϟg, ϟb)
    id, dst := ϟg.Memory.New()
    dst.Write(0, ϟg.Memory.MustGet(s.pool).Slice(s.Range()))
    return {{$slice_ty}}{
      size:  s.size,
      count: s.count,
      pool: id,
    }
  }

  // Root returns the original pointer this slice derives from.
  func (s {{$slice_ty}}) Root() uint64 { return s.root }

  // Base returns the address of first element.
  func (s {{$slice_ty}}) Base() uint64 { return s.base }

  // Count returns the number of elements in the slice.
  func (s {{$slice_ty}}) Count() uint64 { return s.count }

  // Size returns the size of the slice in bytes.
  func (s {{$slice_ty}}) Size() uint64 { return s.size }

  // Pool returns the the pool identifier.
  func (s {{$slice_ty}}) Pool() ϟmem.PoolID { return s.pool }

  // ElementType returns the reflect.Type of the elements in the slice.
  func (s {{$slice_ty}}) ElementType() reflect.Type {
      var el {{if not $el_is_void}}{{$el_ty}}{{else}}byte{{end}}
      return reflect.TypeOf(el)
  }

  // ElementSize returns the size in bytes of an element that {{$slice_ty}} points to.
  func (s {{$slice_ty}}) ElementSize(ϟl *device.MemoryLayout) uint64 {
    return {{Template "Go.SizeOf" $s.To}}
  }
  // Range returns the memory range this slice represents in the underlying pool.
  func (s {{$slice_ty}}) Range() ϟmem.Range {
    return ϟmem.Range{Base: s.base, Size: s.size}
  }

  // ResourceID returns an identifier to a resource representing the data of
  // this slice.
  func (s {{$slice_ty}}) ResourceID(ϟctx context.Context, ϟg *ϟapi.GlobalState) id.ID {
    id, err := ϟg.Memory.MustGet(s.pool).Slice(s.Range()).ResourceID(ϟctx)
    if err != nil {
      panic(err)
    }
    return id
  }

  // Reader returns a binary reader for the slice.
  func (s {{$slice_ty}}) Reader(ϟctx context.Context, ϟg *ϟapi.GlobalState) binary.Reader {
    return ϟg.MemoryReader(ϟctx, ϟg.Memory.MustGet(s.pool).Slice(s.Range()))
  }

  // Writer returns a binary writer for the slice.
  func (s {{$slice_ty}}) Writer(ϟg *ϟapi.GlobalState) binary.Writer {
    return ϟg.MemoryWriter(s.pool, s.Range())
  }

  // Decoder returns a memory decoder for the slice.
  func (s {{$slice_ty}}) Decoder(ϟctx context.Context, ϟg *ϟapi.GlobalState) *ϟmem.Decoder {
    return ϟg.MemoryDecoder(ϟctx, ϟg.Memory.MustGet(s.pool).Slice(s.Range()))
  }

  // Encoder returns a memory encoder for the slice.
  func (s {{$slice_ty}}) Encoder(ϟg *ϟapi.GlobalState) *ϟmem.Encoder {
    return ϟg.MemoryEncoder(s.pool, s.Range())
  }

  {{if not $el_is_void}}
    // As{{$slice_ty}} returns s cast to a {{$slice_ty}}.
    // The returned slice length will be calculated so that the returned slice is
    // no longer (in bytes) than s.
    func As{{$slice_ty}}(s ϟmem.Slice, ϟl *device.MemoryLayout) {{$slice_ty}} {
      elSize := {{Template "Go.SizeOf" $s.To}}
      newCount := s.Size() / elSize
      newSize := newCount * elSize
      return {{$slice_ty}}{
        root:  s.Root(),
        base:  s.Base(),
        pool:  s.Pool(),
        size:  newSize,
        count: newCount,
      }
    }

    // Read reads and returns all the {{$el_ty}} elements in this {{$slice_ty}}.
    func (s {{$slice_ty}}) Read(ϟctx context.Context, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState, ϟb *builder.Builder) ([]{{$el_ty}}, error) {
      s.OnRead(ϟctx, ϟc, ϟg, ϟb)
      res := make([]{{$el_ty}}, s.count)
      ϟd := s.Decoder(ϟctx, ϟg)
      ϟmem.Read(ϟd, &res)
      if err := ϟd.Error(); err != nil {
        return nil, err
      }
      return res, nil
    }

    // MustRead calls and returns Read, panicing if there was an error.
    func (s {{$slice_ty}}) MustRead(ϟctx context.Context, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState, ϟb *builder.Builder) []{{$el_ty}} {
      vals, err := s.Read(ϟctx, ϟc, ϟg, ϟb)
      panicOnError(err)
      return vals
    }

    // Write copies elements from src to this slice. The number of elements copied is returned
    // which is the minimum of s.count and len(src).
    func (s {{$slice_ty}}) Write(ϟctx context.Context, src []{{$el_ty}}, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState, ϟb *builder.Builder) (uint64, error) {
      count := u64.Min(s.count, uint64(len(src)))
      e := s.Slice(0, count).Encoder(ϟg)
      ϟmem.Write(e, src[:count])
      s.OnWrite(ϟctx, ϟc, ϟg, ϟb)
      if err := e.Error(); err != nil {
        return 0, err
      }
      return count, nil
    }

    // MustWrite calls and returns Write, panicing if there was an error.
    func (s {{$slice_ty}}) MustWrite(ϟctx context.Context, src []{{$el_ty}}, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState, ϟb *builder.Builder) uint64 {
      count, err := s.Write(ϟctx, src, ϟc, ϟg, ϟb)
      panicOnError(err)
      return count
    }

    // Copy copies elements from src to this slice.
    // The number of elements copied is the minimum of dst.Count and src.Count.
    // The slices of this and dst to the copied elements is returned.
    func (dst {{$slice_ty}}) Copy(ϟctx context.Context, src {{$slice_ty}}, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState, ϟb *builder.Builder) (d, s {{$slice_ty}}) {
      count := u64.Min(dst.count, src.count)
      dst, src = dst.Slice(0, count), src.Slice(0, count)
    {{if $el_is_ptr}}
      if (dst.pool == ϟmem.ApplicationPool) != (src.pool == ϟmem.ApplicationPool) {
        dst.MustWrite(ϟctx, src.MustRead(ϟctx, ϟc, ϟg, ϟb), ϟc, ϟg, ϟb) // Element-wise copy so we can convert u64 <-> {{$ptr_ty}}
      } else {
    {{end}}
      src.OnRead(ϟctx, ϟc, ϟg, ϟb)
      ϟg.Memory.MustGet(dst.pool).Write(dst.base, ϟg.Memory.MustGet(src.pool).Slice(src.Range()))
      dst.OnWrite(ϟctx, ϟc, ϟg, ϟb)
    {{if $el_is_ptr}} } {{end}}
      return dst, src
    }

    // Contains returns true if the slice contains the specified value.
    func (s {{$slice_ty}}) Contains(ϟctx context.Context, val {{$el_ty}}, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState, ϟb *builder.Builder) bool {
      for _, e := range s.MustRead(ϟctx, ϟc, ϟg, ϟb) {
        if e == val {
          return true
        }
      }
      return false
    }

  {{end}}

  // OnRead calls the backing pool's OnRead callback. s is returned so calls can be chained.
  func (s {{$slice_ty}}) OnRead(ϟctx context.Context, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState, ϟb *builder.Builder) {{$slice_ty}} {
    ϟl := ϟg.MemoryLayout; _ = ϟl
    if pool, err := ϟg.Memory.Get(s.pool); err == nil {
      if f := pool.OnRead; f != nil {
        f(s.Range())
      }
    }
    if ϟb != nil && s.pool == ϟmem.ApplicationPool {
      {{if IsPointer ($s.To | Underlying)}}
        {{/* Pointers need remapping to replay addresses.
             Pointer sizes may vary between capture and replay.
             To handle this, we store pointers in a separate table and refer to
             these using pointer indices.
        */}}
        ϟd, dst := s.Decoder(ϟctx, ϟg), value.PointerIndex(s.base / uint64(ϟl.GetPointer().GetSize()))
        for i, c := uint64(0), s.count; i < c; i++ {
          {{if (GetAnnotation $s.To "replay_remap")}}{{Error "Remappings of pointers not implemented"}}{{end}}
          ϟb.StorePointer(dst, {{$el_ty}}(ϟd.Pointer()).value(ϟb, ϟc, ϟg))
          dst++
        }
        panicOnError(ϟd.Error())
      {{else if IsClass ($s.To | Underlying)}}
        {{Template "ReadStructWithRemapping" $s.To}}
      {{else}}
        s.ReserveMemory(ϟctx, ϟc, ϟg, ϟb)
        {{if (GetAnnotation $s.To "replay_remap")}}
          {{/* Element type has explicitly stated it needs custom remapping */}}
          ptr, step, ϟd := value.ObservedPointer(s.base), value.ObservedPointer(s.ElementSize(ϟl)), s.Decoder(ϟctx, ϟg)
          for i, c := uint64(0), s.count; i < c; i++ {
            v := {{Template "Go.Decode" $s.To}}
            if key, remap := v.remap(ϟc, ϟg); remap {
              loadRemap(ϟb, key, {{Template "Go.Replay.Type" $s.To}}, {{Template "Go.Replay.Value" "Type" $s.To "Name" "v"}})
            } else {
              ϟb.Push({{Template "Go.Replay.Value" "Type" $s.To "Name" "v"}})
            }
            ϟb.Store(ptr)
            ptr += step
          }
          panicOnError(ϟd.Error())
        {{else}}
          ϟb.Write(s.Range(), s.ResourceID(ϟctx, ϟg))
        {{end}}
      {{end}}
    }
    return s
  }

  // OnWrite calls the backing pool's OnWrite callback. s is returned so calls can be chained.
  func (s {{$slice_ty}}) OnWrite(ϟctx context.Context, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState, ϟb *builder.Builder) {{$slice_ty}} {
    ϟl := ϟg.MemoryLayout; _ = ϟl
    if pool, err := ϟg.Memory.Get(s.pool); err == nil {
      if f := pool.OnWrite; f != nil {
        f(s.Range())
      }
    }
    if ϟb != nil && s.pool == ϟmem.ApplicationPool {
      ϟb.ReserveMemory(ϟmem.Range{Base: s.root, Size: uint64(s.Range().End() - s.root)})
      {{if (GetAnnotation $s.To "replay_remap")}}
        {{/* Element type has explicitly stated it needs custom remapping */}}
        size := s.ElementSize(ϟl)
        ptr, step, ϟd := value.ObservedPointer(s.base), value.ObservedPointer(size), s.Decoder(ϟctx, ϟg)
        for i, c := uint64(0), s.count; i < c; i++ {
          v := {{Template "Go.Decode" $s.To}}
          if key, remap := v.remap(ϟc, ϟg); remap {
            dst, found := ϟb.Remappings[key]
            if !found {
              dst = ϟb.AllocateMemory(size)
              ϟb.Remappings[key] = dst
            }
            ϟb.Load({{Template "Go.Replay.Type" $s.To}}, ptr)
            ϟb.Store(dst)
          }
          ptr += step
        }
        panicOnError(ϟd.Error())
      {{end}}
    }
    return s
  }

  func (s {{$slice_ty}}) ReserveMemory(ϟctx context.Context, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState, ϟb *builder.Builder) {{$slice_ty}} {
    if ϟb != nil && s.pool == ϟmem.ApplicationPool {
      rng := s.Range()
      ϟb.ReserveMemory(ϟmem.Range{Base: s.Root(), Size: uint64(rng.End() - s.root)})
    }
    return s
  }

  // Index returns a sub-slice to the i'th element in this {{$slice_ty}}.
  func (s {{$slice_ty}}) Index(i uint64) {{$slice_ty}} {
    return s.Slice(i, i+1)
  }

  // Slice returns a sub-slice from the {{$slice_ty}} using start and end indices.
  func (s {{$slice_ty}}) Slice(start, end uint64) {{$slice_ty}} {
    if start > end {
      panic(fmt.Errorf("%v.Slice start (%d) is greater than the end (%d)", s, start, end))
    }
    if end > s.count {
      panic(fmt.Errorf("%v.Slice(%d, %d) - out of bounds", s, start, end))
    }
    newCount := end-start
    elSize := s.size / s.count
    return {{$slice_ty}}{
      root:  s.root,
      base:  s.base + start * elSize,
      size:  newCount * elSize,
      count: newCount,
      pool:  s.pool,
    }
  }

  // ISlice returns a sub-slice from this slice using start and end indices.
  func (s {{$slice_ty}}) ISlice(start, end uint64) ϟmem.Slice {
    return s.Slice(start, end)
  }

  // String returns a string description of the {{$slice_ty}} slice.
  func (s {{$slice_ty}}) String() string {
    return fmt.Sprintf("{{$el_ty}}(0x%x@%v)[%d]", s.base, s.pool, s.count)
  }

  // Check interface conformance
  var _ path.Linker = {{$slice_ty}}{}

  // Link returns a path which can be used to view memory which is referenced
  // by the slice s.
  // If nil, nil is returned then the path cannot be followed.
  func (s {{$slice_ty}}) Link(ϟctx context.Context, ϟp path.Node) (path.Node, error) {
    if cmd := path.FindCommand(ϟp); cmd != nil {
      return cmd.MemoryAfter(uint32(s.pool), s.Base(), s.Size()), nil
    }
    return nil, nil
  }
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the Go declaration of the Pointer type (or pointer pseudonym).
-------------------------------------------------------------------------------
*/}}
{{define "DeclarePointer"}}
  {{AssertType $ "Pointer" "Pseudonym"}}

  {{$p          := $ | Underlying | Unpack                 }}
  {{$slice_ty   := Macro "Go.Type"   $p.Slice              }}
  {{$ptr_ty     := Macro "Go.Type"   $                     }}
  {{$el_ty      := Macro "Go.Type"   $p.To                 }}
  {{$el_is_void := IsVoid    ($p.To | Underlying | Unpack) }}
  {{$el_is_char := IsChar    ($p.To | Underlying | Unpack) }}
  {{$el_is_ptr  := IsPointer ($p.To | Underlying | Unpack) }}

  var (
    _ ϟmem.Pointer = {{$ptr_ty}}(0)
    _ path.Linker = {{$ptr_ty}}(0)
    _ data.Assignable = (*{{$ptr_ty}})(nil)
  )

  // {{$ptr_ty}} is a pointer to a {{$el_ty}} element.
  type {{$ptr_ty}} uint64

  // New{{$ptr_ty}} returns a {{$ptr_ty}} that points to addr.
  func New{{$ptr_ty}}(p ϟmem.Pointer) {{$ptr_ty}} {
    if p == nil {
      return {{$ptr_ty}}(0)
    }
    return {{$ptr_ty}}(p.Address())
  }

  func (p *{{$ptr_ty}}) Assign(o interface{}) bool {
    if o, ok := o.(ϟmem.Pointer); ok {
      *p = {{$ptr_ty}}(o.Address())
      return true
    }
    return false
  }

  func (p {{$ptr_ty}}) String() string { return ϟmem.PointerToString(p) }

  // IsNullptr returns true if the pointer address is 0.
  func (p {{$ptr_ty}}) IsNullptr() bool { return p == 0 }

  // APointer implements the ReflectPointer interface
  func (p {{$ptr_ty}}) APointer() {}

  // Address returns the pointer's memory address.
  func (p {{$ptr_ty}}) Address() uint64 { return uint64(p) }

  // Offset returns the pointer offset by n bytes.
  func (p {{$ptr_ty}}) Offset(n uint64) ϟmem.Pointer { return p + {{$ptr_ty}}(n) }

  // ElementType returns the reflect.Type of the element that {{$ptr_ty}} points to.
  func (p {{$ptr_ty}}) ElementType() reflect.Type {
      var el {{if not $el_is_void}}{{$el_ty}}{{else}}byte{{end}}
      return reflect.TypeOf(el)
  }

  // ElementSize returns the size in bytes of an element that {{$ptr_ty}} points to.
  func (p {{$ptr_ty}}) ElementSize(ϟl *device.MemoryLayout) uint64 {
    return {{Template "Go.SizeOf" $p.To}}
  }

  {{if not $el_is_void}}
    // Read reads and returns the {{$el_ty}} element at the pointer.
    func (p {{$ptr_ty}}) Read(ϟctx context.Context, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState, ϟb *builder.Builder) ({{$el_ty}}, error) {
      vals, err := p.Slice(0, 1, ϟg.MemoryLayout).Read(ϟctx, ϟc, ϟg, ϟb)
      if err != nil {
        return {{Template "Go.Null" (TypeOf $p.To)}}, err
      }
      return vals[0], nil
    }

    // MustRead calls and returns Read, panicing if there was an error.
    func (p {{$ptr_ty}}) MustRead(ϟctx context.Context, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState, ϟb *builder.Builder) {{$el_ty}} {
      val, err := p.Read(ϟctx, ϟc, ϟg, ϟb)
      panicOnError(err)
      return val
    }

    // Write writes value to the {{$el_ty}} element at the pointer.
    func (p {{$ptr_ty}}) Write(ϟctx context.Context, value {{$el_ty}}, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState, ϟb *builder.Builder) error {
      _, err := p.Slice(0, 1, ϟg.MemoryLayout).Write(ϟctx, []{{$el_ty}}{value}, ϟc, ϟg, ϟb)
      return err
    }

    // MustWrite calls Write, panicing if there was an error.
    func (p {{$ptr_ty}}) MustWrite(ϟctx context.Context, value {{$el_ty}}, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState, ϟb *builder.Builder) {
      panicOnError(p.Write(ϟctx, value, ϟc, ϟg, ϟb))
    }
  {{end}}

  {{if $el_is_char}}
    // StringSlice returns a slice starting at p and ending at the first 0 byte null-terminator.
    func (p {{$ptr_ty}}) StringSlice(ϟctx context.Context, ϟg *ϟapi.GlobalState) Charˢ {
      numBytes := uint64(2^6)
      i, ϟd := uint64(0), ϟg.MemoryDecoder(ϟctx, ϟg.Memory.MustGet(ϟmem.ApplicationPool).TempSlice(ϟmem.Range{Base: uint64(p), Size: numBytes}))

      for {
        if i >= numBytes {
          ϟd = ϟg.MemoryDecoder(ϟctx, ϟg.Memory.MustGet(ϟmem.ApplicationPool).TempSlice(ϟmem.Range{Base: uint64(p) + i, Size: numBytes}))
        }

        i++
        if b := ϟd.U8(); b == 0 {
          return Charˢ(p.Slice(0, i, ϟg.MemoryLayout))
        }
      }
    }
  {{end}}

  // Slice returns a new {{$slice_ty}} from the pointer using start and end indices.
  func (p {{$ptr_ty}}) Slice(start, end uint64, ϟl *device.MemoryLayout) {{$slice_ty}} {
    if start > end {
      panic(fmt.Errorf("Slice start (%d) is greater than the end (%d)", start, end))
    }
    elSize := p.ElementSize(ϟl)
    count := end-start
    return {{$slice_ty}}{
      root:  uint64(p),
      base:  uint64(p) + start * elSize,
      size:  count * elSize,
      count: count,
      pool:  ϟmem.ApplicationPool,
    }
  }

  // ISlice returns a new Slice from the pointer using start and end indices.
  func (p {{$ptr_ty}}) ISlice(start, end uint64, ϟl *device.MemoryLayout) ϟmem.Slice { return p.Slice(start, end, ϟl) }

  // Link returns a path to the object that this is a link to, or error
  // if you can not follow this path. Typically the incoming path ϟp
  // is a path to the command and resulting path is a path to an object
  // identified by p. Once resolved the command will return a representation
  // of the value of the instance after the command has executed.
  func (p {{$ptr_ty}}) Link(ϟctx context.Context, ϟp path.Node) (path.Node, error) {
    if cmd := path.FindCommand(ϟp); cmd != nil {
      return cmd.MemoryAfter(uint32(ϟmem.ApplicationPool), uint64(p), 0), nil
    }
    return nil, nil
  }

  {{if not (GetAnnotation $ "replay_custom_value")}}
    func (p {{$ptr_ty}}) value(ϟb *builder.Builder, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState) value.Pointer {
      if p != 0 {
        {{if $el_is_ptr}}
          return value.PointerIndex(uint64(p) / uint64(ϟg.MemoryLayout.GetPointer().GetSize()))
        {{else}}
          return value.ObservedPointer(uint64(p))
        {{end}}
      } else {
        return value.AbsolutePointer(0)
      }
    }
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the Go declaration of the Pseudonym type.
-------------------------------------------------------------------------------
*/}}
{{define "DeclarePseudonym"}}
  {{AssertType $ "Pseudonym"}}

  {{$u := $ | Underlying}}
  {{     if IsPointer  $u}}{{Template "DeclarePointer" $}}
  {{else if IsSlice    $u}}{{Template "DeclareSlice"   $}}
  {{else if IsVoid     $u}}
  {{else}}
    {{$name := Macro "Go.Type" $}}
    {{$to := Macro "Go.Type" $.To}}
    type {{$name}} {{$to}}
    {{if IsSize $u}}
      // Dummy function to make {{$name}} implement SizeTy interface
      func ({{$name}}) IsMemorySize() {}
    {{else if IsChar $u}}
      // Dummy function to make {{$name}} implement CharTy interface
      func ({{$name}}) IsChar() {}
    {{else if IsInt $u}}
      // Dummy function to make {{$name}} implement IntTy interface
      func ({{$name}}) IsInt() {}
    {{else if IsUint $u}}
      // Dummy function to make {{$name}} implement UintTy interface
      func ({{$name}}) IsUint() {}
    {{end}}
    func Decode{{$name}}(ϟd *ϟmem.Decoder) {{$name}} {
      return {{$name}}({{Template "Go.Decode" $u}})
    }
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the Go declaration of the Class type.
-------------------------------------------------------------------------------
*/}}
{{define "DeclareClass"}}
  {{AssertType $ "Class"}}
  {{$name := $.Name | GoPublicName}}
  {{template "Go.CommentHeader" print "class " $name}}

  type {{$name}} struct {
    {{Template "ClassFields" $}}
  }

  func New{{$name}}() {{$name}} {
    return {{$name}} { {{Template "Go.DefaultClassFields" $}} }
  }

  {{if GetAnnotation $ "resource"}}
    // OnCreate should be called immediately after the {{$name}} resource is created.
    func (c *{{$name}}) OnCreate(ϟg *ϟapi.GlobalState) *{{$name}} {
      if f := ϟg.OnResourceCreated; c.IsResource() && f != nil { f(c) }
      return c
    }

    // OnAccess should be called each time the {{$name}} resource is used.
    func (c *{{$name}}) OnAccess(ϟg *ϟapi.GlobalState) *{{$name}} {
      if f := ϟg.OnResourceAccessed; c.IsResource() && f != nil { f(c) }
      return c
    }
  {{end}}

  {{if IsStorageType $}}
    // {{$name}}Size returns the size of the class in bytes.
    func {{$name}}Size(ϟl *device.MemoryLayout) uint64 {
      var size, align uint64
      {{range $f := $.Fields}}
        {{$a := print $f.Name "Alignment"}}
        {{$a}} := {{Template "Go.AlignOf" $f.Type}}
        size = u64.AlignUp(size, {{$a}})
        size += {{Template "Go.SizeOf" $f.Type}}
        align = u64.Max(align, {{$a}})
      {{end}}
      return u64.AlignUp(size, align)
    }

    // TypeSize returns the size of the class in bytes.
    func ({{$name}}) TypeSize(ϟl *device.MemoryLayout) uint64 { return {{$name}}Size(ϟl) }

    // {{$name}}Alignment returns the alignment of the class in bytes.
    func {{$name}}Alignment(ϟl *device.MemoryLayout) uint64 {
      alignment := uint64(1)
      {{range $f := $.Fields}}
        alignment = u64.Max(alignment, {{Template "Go.AlignOf" $f.Type}})
      {{end}}
      return alignment
    }

    // TypeAlignment returns the alignment of the class in bytes.
    func ({{$name}}) TypeAlignment(ϟl *device.MemoryLayout) uint64 { return {{$name}}Alignment(ϟl) }

    // Encode encodes this class to the encoder.
    func (c {{$name}}) Encode(ϟe *ϟmem.Encoder) {
      alignment := {{$name}}Alignment(ϟe.MemoryLayout())
      ϟe.Align(alignment)
      {{range $f := $.Fields}}
        {{Template "Go.Encode" "Type" $f.Type "Value" (print "c." ($f.Name | GoPublicName))}}
      {{end}}
      ϟe.Align(alignment)
    }

    // Decode decodes this class from the decoder.
    func (c *{{$name}}) Decode(ϟd *ϟmem.Decoder) {
      ϟd.Align({{$name}}Alignment(ϟd.MemoryLayout()))
      {{range $f := $.Fields}}
        {{if IsClass $f.Type}}
          c.{{$f.Name | GoPublicName}}.Decode(ϟd)
        {{else}}
          c.{{$f.Name | GoPublicName}} = {{Template "Go.Decode" $f.Type}}
        {{end}}
      {{end}}
      ϟd.Align({{$name}}Size(ϟd.MemoryLayout()))
    }
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the Go declaration of the Command
-------------------------------------------------------------------------------
*/}}
{{define "DeclareCommand"}}
  {{AssertType $ "Function"}}
  {{$name       := $ | GoCommandName}}
  {{$ret        := not (IsVoid $.Return.Type)}}
  {{$isDrawCall := GetAnnotation $ "draw_call"}}
  {{$isPFN      := GetAnnotation $ "pfn"}}
  {{template "Go.CommentHeader" $name}}

  type {{$name}} struct {
    extras ϟapi.CmdExtras
    caller ϟapi.CmdID
    thread uint64
    {{range $p := $.FullParameters}}
      {{$p | GoPublicName}} {{Template "Go.Type" $p}} {{Template "CommandParameterTags" $p}}
    {{end}}
  }

  func (ϟc *{{$name}}) Thread() uint64 { return ϟc.thread }

  func (ϟc *{{$name}}) SetThread(v uint64) { ϟc.thread = v }

  func (ϟc *{{$name}}) Caller() ϟapi.CmdID { return ϟc.caller }

  func (ϟc *{{$name}}) SetCaller(id ϟapi.CmdID) { ϟc.caller = id }

  func (ϟc *{{$name}}) CmdName() string { return "{{$ | CommandName}}" }

  func (ϟc *{{$name}}) String() string {
    return fmt.Sprintf("{{$ | CommandName}}(§
      {{range $i, $p := $.CallParameters}}
        {{if $i}}, §{{end}}
        {{$p.Name}}: %v§
      {{end}}
      ){{if $ret}} → %v{{end}}",§
      {{range $i, $p := $.CallParameters}}
        {{Template "Go.Parameter" $p}}, §
      {{end}}
      {{if $ret}}ϟc.Result§{{end}}
    )
  }

  func (ϟc *{{$name}}) API() ϟapi.API { return API{} }

  func (ϟc *{{$name}}) CmdFlags(ϟctx context.Context, ϟi ϟapi.CmdID, ϟg *ϟapi.GlobalState) ϟapi.CmdFlags {
    {{$names := Strings "draw_call" "transform_feedback" "clear" "frame_start"  "frame_end"  "user_marker" "push_user_marker" "pop_user_marker"}}
    {{$flags := Strings "DrawCall"  "TransformFeedback"  "Clear" "StartOfFrame" "EndOfFrame" "UserMarker"  "PushUserMarker"   "PopUserMarker"}}

    var out ϟapi.CmdFlags
    {{range $i, $name := $names}}
      {{$flag := index $flags $i}}
      {{if $a := GetAnnotation $ $name}}
        {{if $expr := Macro "FlagExpr" "Annotation" $a "Flag" $flag}}
          {{$expr}}
        {{else}}
          out = out | ϟapi.{{$flag}}
        {{end}}
      {{end}}
    {{end}}
    return out
  }

  func (ϟc *{{$name}}) Extras() *ϟapi.CmdExtras { return &ϟc.extras }

  // AddRead appends a new read observation to the command of the range rng
  // with the data id.
  // The {{$name}} pointer is returned so that calls can be chained.
  func (ϟc *{{$name}}) AddRead(rng ϟmem.Range, id id.ID) *{{$name}} {
    ϟc.extras.GetOrAppendObservations().AddRead(rng, id)
    return ϟc
  }

  // AddWrite appends a new write observation to the command of the range rng
  // with the data id.
  // The {{$name}} pointer is returned so that calls can be chained.
  func (ϟc *{{$name}}) AddWrite(rng ϟmem.Range, id id.ID) *{{$name}} {
    ϟc.extras.GetOrAppendObservations().AddWrite(rng, id)
    return ϟc
  }
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits a builder for all API commands.
-------------------------------------------------------------------------------
*/}}
{{define "DeclareCommandBuilder"}}
  {{AssertType $ "API"}}

  // CommandBuilder is used to construct new {{$.Name}} commands.
  type CommandBuilder struct {
    Thread uint64
  }
  ¶
  func (cb CommandBuilder) Custom(f func(context.Context, *ϟapi.GlobalState, *builder.Builder) error) *replay.Custom {
    return &replay.Custom{T: cb.Thread, F: f}
  }
  ¶
  {{range $c := AllCommands $}}
    {{if not (GetAnnotation $c "pfn")}} {{/* TODO remove the @pfn nastiness */}}
      {{$name := $c | GoCommandName}}
      func (cb CommandBuilder) {{Title $name}}(§
          {{range $p := $c.FullParameters}}
            {{if $p | TypeOf | Underlying | IsPointer}}
              {{$p.Name | GoPrivateName}} ϟmem.Pointer,§
            {{else}}
              {{$p.Name | GoPrivateName}} {{Template "Go.Type" $p}},§
            {{end}}
          {{end}}
        ) *{{$name}} {
        return &{{$name}} {§
          caller: ϟapi.CmdNoID,
          thread: cb.Thread,
        {{range $p := $c.FullParameters}}
          {{if $p | TypeOf | Underlying | IsPointer}}
            {{$p | GoPublicName}}: New{{Template "Go.Type" $p}}({{$p.Name | GoPrivateName}}),§
          {{else}}
            {{$p | GoPublicName}}: {{$p.Name | GoPrivateName}},§
          {{end}}
        {{end}}
        }
      }
    {{end}}
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits a type declaration for holding the state.
-------------------------------------------------------------------------------
*/}}
{{define "DeclareState"}}
  {{AssertType $ "API"}}

  type State struct {
    {{range $g := $.Globals}}
      {{Title $g.Name}} {{Template "Go.Type" $g}}
    {{end}}
    CustomState `hidden:"true" nobox:"true"`
  }

  func (g *State) API() ϟapi.API { return API{} }

  func (g *State) Init() {
    {{range $g := $.Globals}}
      {{if IsNil $g.Default}}
        g.{{$g.Name | GoPublicName}} = {{Template "Go.Null" $g.Type}}
      {{else}}
        g.{{$g.Name | GoPublicName}} = {{Template "Go.Read" $g.Default}}
      {{end}}
    {{end}}
    g.InitializeCustomState()
  }
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits a top-level type declaration for the specified API
-------------------------------------------------------------------------------
*/}}
{{define "DeclareAPI"}}
  var ID = ϟapi.ID(id.OfString("{{Global "API"}}"))

  type API struct {}

  // Name returns "{{Global "API"}}".
  func (API) Name() string {
    return "{{Global "API"}}"
  }

  // ID returns the unique identifier of the {{Global "API"}} API.
  func (API) ID() ϟapi.ID {
    return ID
  }

  // Index returns the Index of the {{Global "API"}} API.
  func (API) Index() uint8 {
    return uint8({{$.Index}})
  }

	// CreateCmd constructs and returns a new command with the specified name.
	func (API) CreateCmd(name string) ϟapi.Cmd {
    switch name {
      {{range $c := AllCommands $}}
        {{if not (GetAnnotation $c "pfn")}}
          case "{{$c.Name}}":
            return &{{$c | GoCommandName}}{}
        {{end}}
      {{end}}
      default:
        return nil
    }
  }
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits code for reading a slice of structures and remapping all of their
  elements.
-------------------------------------------------------------------------------
*/}}
{{define "ReadStructWithRemapping"}}
  {{AssertType $ "Class"}}
  {{if $.Fields}}
    s.ReserveMemory(ϟctx, ϟc, ϟg, ϟb)
    // Write out the entire structure, then over-write
    // any pointer fields.
    ϟb.Write(s.Range(), s.ResourceID(ϟctx, ϟg))
    ϟd := s.Decoder(ϟctx, ϟg)
    for i, c := uint64(0), s.count; i < c; i++ {
      {{Template "ReadStructFieldsWithRemapping" $}}
    }
    panicOnError(ϟd.Error())
  {{end}}
{{end}}

{{/*
-------------------------------------------------------------------------------
  Emits remapping code for all of the elements in a structure.
-------------------------------------------------------------------------------
*/}}
{{define "ReadStructFieldsWithRemapping"}}
  {{AssertType $ "Class"}}
  {{range $f := $.Fields}}
    {{$name := $f.Name | GoPublicName}}
    {{if IsPointer ($f.Type | Underlying)}}
      { // {{$.Name}}.{{$name}}
        ϟd.Align({{Template "Go.AlignOf" (TypeOf $f)}})
        addr := value.ObservedPointer(s.base + ϟd.Offset())
        ϟb.Push({{Macro "Go.Type" $f}}(ϟd.Pointer()).value(ϟb, ϟc, ϟg))
        ϟb.Store(addr)
      }
    {{else if IsClass ($f.Type | Underlying)}}
      ϟd.Align({{Template "Go.AlignOf" (TypeOf $f)}})
      {{Template "ReadStructFieldsWithRemapping" $f.Type}}
    {{else}}
      {{if GetAnnotation $f.Type "replay_remap"}}
        {
          ϟd.Align({{Template "Go.AlignOf" (TypeOf $f)}})
          addr := value.ObservedPointer(s.base + ϟd.Offset())
          v := {{Template "Go.Decode" $f.Type}}
          if key, remap := v.remap(ϟc, ϟg); remap {
            loadRemap(ϟb, key, {{Template "Go.Replay.Type" $f.Type}}, {{Template "Go.Replay.Value" "Type" $f.Type "Name" "v"}})
            ϟb.Store(addr)
          }
        }
      {{else}}
        _ = {{Template "Go.Decode" $f.Type}} // {{$.Name}}.{{$name}}
      {{end}}
    {{end}}
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits non-empty if the specified item can be sorted in Go using '<'.
-------------------------------------------------------------------------------
*/}}

{{define "IsSortable"}}
  {{AssertType $ "Type"}}
  {{     if IsPseudonym     $}}{{Macro "IsSortable" $.To}}
  {{else if IsBool          $}}true
  {{else if IsInt           $}}true
  {{else if IsUint          $}}true
  {{else if IsChar          $}}true
  {{else if IsU8            $}}true
  {{else if IsS8            $}}true
  {{else if IsU16           $}}true
  {{else if IsS16           $}}true
  {{else if IsF32           $}}true
  {{else if IsU32           $}}true
  {{else if IsS32           $}}true
  {{else if IsF64           $}}true
  {{else if IsU64           $}}true
  {{else if IsS64           $}}true
  {{else if IsString        $}}true
  {{else if IsEnum          $}}true
  {{else}}
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits a the tags for the given command parameter.
-------------------------------------------------------------------------------
*/}}
{{define "CommandParameterTags"}}
  {{AssertType $ "Parameter"}}

  {{$cs := ConstantSetIndex $}}

  `§
  {{if $.IsReturn}}
    result:"true"§
  {{else}}
    param:"{{$.Name}}"§
  {{end}}
  {{if ge $cs 0}}§
    •constset:"{{$cs}}"§
  {{end}}§
  `
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits a the logic to add flags to the local variable out based on the flag
  expression.
-------------------------------------------------------------------------------
*/}}
{{define "FlagExpr"}}
  {{AssertType $.Annotation "Annotation"}}
  {{AssertType $.Flag       "string"}}

  {{if len $.Annotation.Arguments}}
    {{$expr := index $.Annotation.Arguments 0}}
    {{if $call := Macro "FlagCall" "Expr" $expr "Flag" $.Flag}}
      if {{$call}}; v {
        out = out | ϟapi.{{$.Flag}}
      }
    {{else}}
      if {{Template "Go.Read" $expr}} {
        out = out | ϟapi.{{$.Flag}}
      }
    {{end}}
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits a local assigned to the result of an expression call if $.Expr is a
  call. Used by CmdFlags().
-------------------------------------------------------------------------------
*/}}
{{define "FlagCall"}}
  {{AssertType $.Expr "Expression"}}

  {{if IsCall $.Expr}}
    {{$call := Unpack $.Expr}}
    {{$args := ForEach $call.Arguments "Go.Read" | JoinWith ", "}}
    v, _ := {{Template "Go.Subroutine" $call.Target.Function}}(ϟctx, ϟc, ϟi, ϟc.Extras().Observations(), ϟg, GetState(ϟg), ϟc.Thread(), nil, {{$args}})
  {{else}}
    {{Error "%T" $.Expr}}
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits a list of fields of the specified class.
-------------------------------------------------------------------------------
*/}}
{{define "ClassFields"}}
  {{AssertType $ "Class"}}
  {{range $v := $.Fields}}
    {{$name := $v.Name | GoPublicName}}
    {{$tags := Macro "ClassFieldTags" $v}}
    {{$name}} {{Template "Go.Type" $v}} {{if $tags}}`{{$tags}}`{{end}}
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits a list of tags for the given class field.
-------------------------------------------------------------------------------
*/}}
{{define "ClassFieldTags"}}
  {{AssertType $ "Field"}}
  {{$cs := ConstantSetIndex $}}
  {{if ge $cs 0}}constset:"{{$cs}}" §{{end}}
  {{if GetAnnotation $ "hidden"}}hidden:"true" §{{end}}
  {{if GetAnnotation $ "nobox"}}nobox:"true" §{{end}}
{{end}}



