{{/*
 * Copyright (C) 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */}}

{{Global "module" ""}}
{{Include "go_common.tmpl"}}
{{Include "go_convert_common.tmpl"}}
{{$ | Macro "convert.go" | NewReflow "\t" | Write "convert.go"}}

{{define "convert.go"}}
  {{Global "Store" (printf "%s_pb" (Global "OutputDir"))}}
  §{{Copyright "generated" "apic"}}§
  package {{Global "OutputDir"}}¶
  ¶
  import (»¶
    "context"¶
    "fmt"¶
    "unsafe"¶
¶
    "github.com/golang/protobuf/proto"¶
¶
    "github.com/google/gapid/core/data/protoconv"¶
    "github.com/google/gapid/gapis/api/{{Global "OutputDir"}}/{{Global "Store"}}"¶
    "github.com/google/gapid/gapis/api"¶
    "github.com/google/gapid/gapis/memory"¶
    "github.com/google/gapid/gapis/memory/memory_pb"¶
  «)¶
  ¶
  // Just in case it is not used¶
  var _ memory.PoolID¶
  var _ memory_pb.Pointer¶
  var _ unsafe.Pointer ¶
  ¶
  func init() {»¶
    {{range $c := AllCommands $}}
      {{if not (GetAnnotation $c "pfn")}}
        {{$proto := $c.Name | ProtoGoName}}
        {{$p := print (Global "Store") "." $proto}}
        {{$o := $c.Name | GoCommandName}}
        protoconv.Register(»¶
          func(ctx context.Context, ref_cb func(interface{}) uint64, in *{{$o}}) (*{{$p}}, error) { return in.ToProto(ref_cb), nil },¶
          func(ctx context.Context, ref_cb func(uint64, interface{}), in *{{$p}}) (*{{$o}}, error) { return {{$o}}From(in, ref_cb), nil },¶
        «)¶
      {{end}}
    {{end}}
    {{range $c := $.Classes}}
      {{if (GetAnnotation $c "serialize")}}
        {{$proto := $c.Name | ProtoGoName}}
        {{$p := print (Global "Store") "." $proto}}
        {{$o := Macro "Go.Type" $c}}
        protoconv.Register(¶
          func(ctx context.Context, ref_cb func(interface{}) uint64, in *{{$o}}) (*{{$p}}, error) { return in.ToProto(ref_cb), nil },¶
          func(ctx context.Context, ref_cb func(uint64, interface{}), in *{{$p}}) (*{{$o}}, error) { v := {{$o}}From(in, ref_cb); return &v, nil },¶
        «)¶
      {{end}}
    {{end}}
  «}¶

  {{range $c := AllCommands $}}
    {{if not (GetAnnotation $c "pfn")}}
      {{Template "CommandEntry" $c}}
    {{end}}
  {{end}}

  {{range $c := $.Classes}}
    {{if (GetAnnotation $c "serialize")}}
      {{Template "ClassEntry" $c}}
    {{end}}
  {{end}}
{{end}}
