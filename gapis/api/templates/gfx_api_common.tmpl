{{/*
 * Copyright (C) 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */}}

{{/* ---- Includes ---- */}}
{{Include "cpp_common.tmpl"    }}

{{/*
-------------------------------------------------------------------------------
  Emits the C++ type declaration specified AST type if it hasn't already been
  declared.
-------------------------------------------------------------------------------
*/}}
{{define "DeclareType"}}
  {{if not (IsBuiltin $)}}
    {{$key  := printf "ApiType%vDeclared" $.Name}}
    {{if not (Global $key)}}
      {{Global $key "true"}}
      {{     if IsEnum        $}}{{Template "DeclareEnum"      $}}
      {{else if IsPseudonym   $}}{{Template "DeclarePseudonym" $}}
      {{else if IsClass       $}}{{Template "DeclareClass"     $}}
      {{else if IsPointer     $}}{{Template "DeclareType"      $.To}}
      {{else if IsReference   $}}{{Template "DeclareType"      $.To}}
      {{else if IsSlice       $}}{{Template "DeclareType"      $.To}}
      {{else if IsStaticArray $}}{{Template "DeclareType"      $.ValueType}}
      {{else if IsMap         $}}{{Template "DeclareType" $.KeyType}}{{Template "DeclareType" $.ValueType}}
      {{else}}{{Error "DeclareType does not support type '%T'" $}}
      {{end}}
    {{end}}
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits enum entry declarations as a number of uint32_t constants.
-------------------------------------------------------------------------------
*/}}
{{define "DeclareEnumEntries"}}
  {{AssertType $ "Enum"}}

  {{range $entry := $.Entries}}
    static const {{Template "C++.Type" $.NumberType}} {{Template "C++.EnumEntryName" $entry}} = {{$entry.Value}};
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits an enum declaration as a number of integer constants in a struct
  namespace.
-------------------------------------------------------------------------------
*/}}
{{define "DeclareEnum"}}
  {{AssertType $ "Enum"}}

  struct {{Template "C++.EnumName" $}} {
    {{Template "DeclareEnumEntries" $}}
  };
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the declaration of the pseudonym's target type (if it is not already
  declared) followed by the pseudonym's typedef declaration.
-------------------------------------------------------------------------------
*/}}
{{define "DeclarePseudonym"}}
  {{AssertType $ "Pseudonym"}}

  {{Template "DeclareType" $.To}}

  typedef {{Template "C++.Type" $.To}} {{Template "C++.Type" $}};
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the declarations for all non-declared field types of the class followed
  by the class declaration.
-------------------------------------------------------------------------------
*/}}
{{define "DeclareClass"}}
  {{AssertType $ "Class"}}

  {{if not (or (GetAnnotation $ "internal") (GetAnnotation $ "forwarddecl"))}}
    {{range $f := $.Fields}}
      {{Template "DeclareType" (TypeOf $f)}}
    {{end}}

    typedef {{if GetAnnotation $ "union"}}union{{else}}struct{{end}} {
      {{range $f := $.Fields}}
        {{Template "C++.Type" $f}} {{$f.Name}};
      {{end}}
    } {{Template "C++.Type" $}};Â¶
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits the forward declaration of structs annotated as "forwarddecl".
-------------------------------------------------------------------------------
*/}}
{{define "ForwardDeclareStruct"}}
  {{AssertType $ "Class"}}

  {{if GetAnnotation $ "forwarddecl"}}
    struct {{$.Name}};
  {{end}}
{{end}}
