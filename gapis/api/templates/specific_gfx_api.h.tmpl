{{/*
 * Copyright (C) 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */}}

{{/* ---- Includes ---- */}}
{{Include "cpp_common.tmpl"}}
{{Include "gfx_api_common.tmpl"}}

{{$filename := print (Global "API") "_gfx_api.h" }}
{{$ | Macro "specific_gfx_api.h" | Reflow 4 | Write $filename}}

{{/*
-------------------------------------------------------------------------------
  Entry point.
-------------------------------------------------------------------------------
*/}}
{{define "specific_gfx_api.h"}}
{{AssertType $ "API"}}
{{template "C++.GeneratedHeader"}}
¶
#ifndef GAPIR_{{Upper (Global "API")}}_GFX_API_H
#define GAPIR_{{Upper (Global "API")}}_GFX_API_H
¶
#include "gapir/cc/gfx_api.h"
#include "gapir/cc/cached_unordered_map.h"
¶
#include "core/cc/static_array.h"
#include "core/cc/target.h"
#include "core/cc/{{Global "API"}}_ptr_types.h"
¶
#include <stdint.h>
#include <functional>
#include <string>
¶
{{/* Forward declare structs used by the graphics API in the global namespace. */}}
{{range $c := $.Classes}}
  {{Template "ForwardDeclareStruct" $c}}
{{end}}
¶
namespace gapir {«
¶
class {{Title (Global "API")}} : public Api {
«public:»
  // The unique identifier of the graphics API.
  static const char* ID;
  // The index of the graphics API.
  static uint8_t INDEX;
¶
  // Constructor
  {{Title (Global "API")}}();
¶
  // Returns the unique identifier of the graphics API.
  const char* id() const override;
  // Returns the index of the graphics API.
  uint8_t index() const override;
¶
  // Look-up the API function addresses for the graphics API.
  void resolve();
¶
  {{range $e := $.Enums}}
    {{Template "DeclareType" $e}}
  {{end}}
  {{range $p := $.Pseudonyms}}
    {{Template "DeclareType" $p}}
  {{end}}
  {{range $c := $.Classes}}
    {{Template "DeclareType" $c}}
  {{end}}
¶
  {{range $c := AllCommands $}}
    {{if not (GetAnnotation $c "synthetic")}}
      {{Template "C++.TypedefFunctionPtr" $c}}
    {{end}}
  {{end}}
¶
  {{range $p := PartitionByKey (AllCommands $) "FinalIndirection"}}
    {{$table := Title (Macro "FinalIndirection" (index $p 0))}}
    struct {{$table}}FunctionStubs {
      {{range $f := $p}}
        {{if and (not (GetAnnotation $f "synthetic")) (not (GetAnnotation $f "pfn"))}}
          {{if not (GetAnnotation $f "indirect")}}
            {{Template "C++.FunctionPtrDecl" $f}} = nullptr;
          {{else}}
            {{Template "C++.LazyResolvedFunctionDecl" $f}} = nullptr;
          {{end}}
        {{end}}
      {{end}}
    };
    {{if $table}}
      gapir::cached_unordered_map<{{$table}}, {{$table}}FunctionStubs> m{{$table}}FunctionStubs;
    {{else}}
      FunctionStubs mFunctionStubs;
    {{end}}¶
  {{end}}
¶
  #include "gapir/cc/{{Global "API"}}_gfx_api.inc"
¶
  {{range $c := AllCommands $}}
    {{if and (not (GetAnnotation $c "synthetic")) (not (GetAnnotation $c "pfn"))}}
      {{$name := Macro "CmdName" $c}}
      bool call{{Template "C++.Public" $name}}(uint32_t label, Stack* stack, bool pushReturn);
    {{end}}
  {{end}}
};
¶
}  // namespace gapir
¶
// List of the function identifiers for the builtin API functions.
// This list have to be consistent with the server side because they are part of
// the communication protocol.
// TODO(antiagainst): create a separate file for these builtins.
namespace Builtins {«
¶
  {{$synthetics := $.Functions | WithAnnotation "synthetic"}}
  {{range $i, $c := $synthetics}}
    {{/* 0xff81..0xffff reserved for synthetic functions */}}
    static const uint16_t {{Template "C++.Public" (Macro "CmdName" $c)}} = 0x10000 - {{len $synthetics}} + {{$i}};
  {{end}}
¶
}  // namespace Builtins
¶
#endif  // GAPIR_{{Upper (Global "API")}}_GFX_API_H
¶
{{end}}
