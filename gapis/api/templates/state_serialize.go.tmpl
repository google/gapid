{{/*
 * Copyright (C) 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */}}

{{Global "module" ""}}
{{Include "go_common.tmpl"}}
{{Include "go_convert_common.tmpl"}}
{{$ | Macro "state_serialize.go" | NewReflow "\t" | Write "state_serialize.go"}}

{{define "state_serialize.go"}}
  {{Global "Store" (printf "%s_pb" (Global "OutputDir"))}}
  §{{Copyright "generated" "apic"}}§
  package {{Global "OutputDir"}}¶
  ¶
  import (»¶
    "context"¶
    "fmt"¶
¶
    "github.com/google/gapid/core/data/protoconv"¶
    "github.com/google/gapid/core/memory/arena"¶
    "github.com/google/gapid/gapis/api/{{Global "OutputDir"}}/{{Global "Store"}}"¶
    "github.com/google/gapid/gapis/memory"¶
    "github.com/google/gapid/gapis/memory/memory_pb"¶
  «)¶
  ¶
  // Just in case it is not used¶
  var _ arena.Arena¶
  var _ fmt.Stringer¶
  var _ memory.PoolID¶
  var _ memory_pb.Slice¶
  ¶
  {{$p := print (Global "Store") ".State"}}
  func init() {»¶
    protoconv.Register(»¶
      func(ctx context.Context, in *State) (*{{$p}}, error) {»¶
        ϟrefs := &protoconv.ToProtoContext{}¶
        return in.ToProto(ϟrefs), nil¶
      «},¶
      func(ctx context.Context, in *{{$p}}) (*State, error) {»¶
        ϟrefs := &protoconv.FromProtoContext{}¶
        return StateFrom(ctx, in, ϟrefs), nil¶
      «},¶
    «)¶
  «}¶
  ¶

  // ToProto returns the storage form of the State.¶
  func (ϟc *State) ToProto(ϟrefs *protoconv.ToProtoContext) *{{$p}} {»¶
    to := &{{$p}}{}¶
    {{range $g := $.Globals}}
      {{if (GetAnnotation $g "serialize")}}
        {{Template "Convert.To" "Field" $g}}
      {{end}}
    {{end}}
    return to¶
  «}¶
  ¶
  // StateFrom builds a State from the storage form.¶
  func StateFrom(ctx context.Context, from *{{$p}}, ϟrefs *protoconv.FromProtoContext) *State {»¶
    ϟc := NewState(arena.Get(ctx))¶
    ϟa := ϟc.Arena(); _ = ϟa¶
    {{range $g := $.Globals}}
      {{if $init := Macro "Go.DefaultInitialValue" $g.Type}}
        ϟc.Set{{$g.Name | GoPublicName}}({{$init}})¶
      {{else}}
        ϟc.Set{{$g.Name | GoPublicName}}({{Template "Go.Null" $g.Type}})¶
      {{end}}
      {{if (GetAnnotation $g "serialize")}}
        {{Template "Convert.From" "Field" $g}}
      {{end}}
    {{end}}
    return ϟc¶
  «}¶

{{end}}
