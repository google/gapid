{{/*
 * Copyright (C) 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */}}

{{/* ---- Includes ---- */}}
{{Include "cpp_common.tmpl"}}

{{/* ---- Overrides ---- */}}
{{Global "C++.EnumTypeOverride" "uint32_t"}}

{{$filename := print (Global "API") "_types.cpp" }}
{{$ | Macro "Types" | Reflow 4 | Write $filename}}

{{define "Types"}}
  {{AssertType $ "API"}}
  {{Template "C++.Copyright"}}
¶
  #include "gapii/cc/{{Global "API"}}_types.h"
  #include "gapis/api/{{Global "API"}}/{{Global "API"}}_pb/api.pb.h"
¶
  #include "gapii/cc/slice.h"
  #include "gapii/cc/to_proto.h"
¶
  #include "core/cc/scratch_allocator.h"
  #include "core/cc/static_array.h"
¶
  namespace gapii {«
  class CallObserver;
  {{range $c := $.Classes}}
    {{Template "DefineClassMethods" $c}}
  {{end}}
¶
  namespace cmd {«
    {{range $c := AllCommands $}}
      {{Template "DefineCommandMethods" $c}}
    {{end}}
  »} // namespace cmd

  »} // namespace gapii
¶
{{end}}

{{/*
-------------------------------------------------------------------------------
  Emits the definition of member methods of a class.
-------------------------------------------------------------------------------
*/}}
{{define "DefineClassMethods"}}
  {{AssertType $ "Class"}}

  {{$serializable := GetAnnotation $ "serialize"}}
  {{$name := Macro "C++.Type" $}}
  {{if len $.Fields}}
¶
    {{$name}}::{{$name}}()»»
      {{$a := ForEach $.Fields "DeclareDefaultInitializer" | JoinWith "\n, "}}
      {{if $a}}: {{$a}}{{end}}
      ««§•{}
¶
    {{$name}}::{{$name}}(§»
      {{range $i, $f := $.Fields}}
        {{if $i}}, §{{end}}
        {{if (IsStaticArray (TypeOf $f))}}const §{{end}}
        {{Template "C++.Type" $f}} {{$f.Name}}§
      {{end}}
      «)»»
      {{$a := ForEach $.Fields "DeclareCopyInitializer" | JoinWith "\n, "}}
      {{if $a}}: {{$a}}{{end}}
      ««§•{}
  {{end}}
  {{if $serializable}}
¶
    ::google::protobuf::Message* {{$name}}::toProto() const {
      auto out = new {{Global "API"}}_pb::{{$name}}();
      toProto(out);
      return out;
    }
¶
    void {{$name}}::toProto(ProtoType* out) const {
      {{range $f := $.Fields}}
        {{Template "C++.SetProtoField" "Proto" "out->" "Prefix" "m" "Name" $f.Name "Type" $f}}
      {{end}}
    }
  {{end}}
{{end}}

{{/*
-------------------------------------------------------------------------------
  Emits a default initializer for the field.
-------------------------------------------------------------------------------
*/}}
{{define "DeclareDefaultInitializer"}}
  {{if IsNil $.Default}}
    m{{$.Name}}({{Macro "C++.Null" (TypeOf $)}})
  {{else}}
    m{{$.Name}}({{Macro "C++.Read" $.Default}})
  {{end}}
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits a copy initializer if the element is not a static array.
-------------------------------------------------------------------------------
*/}}
{{define "DeclareCopyInitializer"}}
  m{{$.Name}}({{$.Name}})
{{end}}

{{/*
-------------------------------------------------------------------------------
  Emits the definition of member methods of a command.
-------------------------------------------------------------------------------
*/}}
{{define "DefineCommandMethods"}}
¶
  {{$name := $.Name}}
  {{if not (GetAnnotation $ "pfn")}}
    ::google::protobuf::Message* {{$name}}::toProto() const {
      auto out = new {{Global "API"}}_pb::{{$name}}();
      out->set_thread(thread);
      {{range $f := $.CallParameters}}
        {{Template "C++.SetProtoField" "Proto" "out->" "Prefix" "" "Name" $f.Name "Type" $f}}
      {{end}}
      return out;
    }
    {{if not (IsVoid $.Return.Type)}}
      ::google::protobuf::Message* {{$name}}Call::toProto() const {
        auto out = new {{Global "API"}}_pb::{{$name}}Call();
        {{Template "C++.SetProtoField" "Proto" "out->" "Prefix" "" "Name" "result" "Type" $.Return.Type}}
        return out;
      };
    {{end}}
  {{end}}
{{end}}
