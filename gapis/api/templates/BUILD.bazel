# Copyright (C) 2018 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("//tools/build:rules.bzl", "api_template")

package(default_visibility = ["//visibility:public"])

filegroup(
    name = "templates",
    srcs = glob(["**/*.tmpl"]),
)

api_template(
    name = "api",
    includes = [":templates"],
    outputs = [
        "api.go",
        "api_amrp.go",
        "api_builder.go",
        "api_classes.go",
        "api_commands.go",
        "api_enums.go",
        "api_pointers.go",
        "api_slices.go",
        "api_state.go",
    ],
    template = "api.go.tmpl",
    deps = [
        "//core/data:go_default_library",
        "//core/data/binary:go_default_library",
        "//core/data/dictionary:go_default_library",
        "//core/data/id:go_default_library",
        "//core/math/u64:go_default_library",
        "//core/os/device:go_default_library",
        "//gapis/api:go_default_library",
        "//gapis/capture:go_default_library",
        "//gapis/memory:go_default_library",
        "//gapis/replay:go_default_library",
        "//gapis/replay/builder:go_default_library",
        "//gapis/replay/protocol:go_default_library",
        "//gapis/replay/value:go_default_library",
        "//gapis/service/path:go_default_library",
    ],
)

api_template(
    name = "mutate",
    includes = [":templates"],
    outputs = ["mutate.go"],
    template = "mutate.go.tmpl",
)

api_template(
    name = "ctypes_h",
    includes = [":templates"],
    outputs = ["ctypes.h"],
    template = "go_ctypes.h.tmpl",
)

api_template(
    name = "state_serialize",
    includes = [":templates"],
    outputs = ["state_serialize.go"],
    template = "state_serialize.go.tmpl",
)

api_template(
    name = "constant_sets",
    includes = [":templates"],
    outputs = ["constant_sets.go"],
    template = "constant_sets.go.tmpl",
)

api_template(
    name = "convert",
    includes = [":templates"],
    outputs = ["convert.go"],
    template = "convert.go.tmpl",
)

api_template(
    name = "proto",
    includes = [":templates"],
    outputs = ["api.proto"],
    template = "api.proto.tmpl",
)

api_template(
    name = "specific_gfx_api.cpp",
    includes = [":templates"],
    outputs = ["{api}_gfx_api.cpp"],
    template = "specific_gfx_api.cpp.tmpl",
)

api_template(
    name = "specific_gfx_api.h",
    includes = [":templates"],
    outputs = ["{api}_gfx_api.h"],
    template = "specific_gfx_api.h.tmpl",
)

api_template(
    name = "vulkan_gfx_api_extras.cpp",
    includes = [":templates"],
    outputs = ["vulkan_gfx_api_extras.cpp"],
    template = "vulkan_gfx_api_extras.tmpl",
)

api_template(
    name = "api_imports.h",
    includes = [":templates"],
    outputs = ["{api}_imports.h"],
    template = "api_imports.h.tmpl",
)

api_template(
    name = "api_spy.h",
    includes = [":templates"],
    outputs = ["{api}_spy.h"],
    template = "api_spy.h.tmpl",
)

api_template(
    name = "api_spy.cpp",
    includes = [":templates"],
    outputs = [
        "{api}_spy_0.cpp",
        "{api}_spy_1.cpp",
        "{api}_spy_2.cpp",
        "{api}_spy_3.cpp",
        "{api}_spy_subroutines_0.cpp",
        "{api}_spy_subroutines_1.cpp",
    ],
    template = "api_spy.cpp.tmpl",
)

api_template(
    name = "api_types.h",
    includes = [":templates"],
    outputs = ["{api}_types.h"],
    template = "api_types.h.tmpl",
)

api_template(
    name = "api_types.cpp",
    includes = [":templates"],
    outputs = ["{api}_types.cpp"],
    template = "api_types.cpp.tmpl",
)

api_template(
    name = "opengl32_exports.def",
    includes = [":templates"],
    outputs = ["opengl32_exports.def"],
    template = "opengl32_exports.def.tmpl",
)

api_template(
    name = "opengl32_resolve.cpp",
    includes = [":templates"],
    outputs = ["opengl32_resolve.cpp"],
    template = "opengl32_resolve.cpp.tmpl",
)

api_template(
    name = "opengl32_x64.asm",
    includes = [":templates"],
    outputs = ["opengl32_x64.asm"],
    template = "opengl32_x64.asm.tmpl",
)

api_template(
    name = "opengl_framework_exports.cpp",
    includes = [":templates"],
    outputs = ["opengl_framework_exports.cpp"],
    template = "opengl_framework_exports.cpp.tmpl",
)

api_template(
    name = "enum_lookup.go",
    includes = [":templates"],
    outputs = ["{api}_enum_lookup.go"],
    template = "enum_lookup.go.tmpl",
)
