{{/*
 * Copyright (C) 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */}}

{{/* ---- Includes ---- */}}
{{Include "../../templates/cpp_common.tmpl"}}

{{/* ---- Overrides ---- */}}
{{Global "C++.EnumTypeOverride" "uint32_t"}}

{{$filename := print (Global "API") "_exports.cpp" }}
{{$ | Macro "Exports" | Reflow 4 | Write $filename}}

{{define "Exports"}}
  {{AssertType $ "API"}}
  {{Template "C++.Copyright"}}
¶
#include "gapii/cc/gles_exports.h"
#include "gapii/cc/{{Global "API"}}_imports.h"
#include "gapii/cc/{{Global "API"}}_types.h"
#include "gapii/cc/spy.h"
¶
#include "core/cc/get_{{Global "API"}}_proc_address.h"
#include "core/cc/log.h"
#include "core/cc/target.h" // STDCALL
¶
#include <memory>
¶
#include <string.h>
¶
using namespace gapii;
¶
const uint8_t GlesAPI = {{$.Index}};
¶
extern "C" {«
  {{range $c := AllCommands $}}
    {{if not (GetAnnotation $c "synthetic")}}
      {{$name := Macro "CmdName" $c}}
      EXPORT {{Template "C++.ReturnType" $c}} STDCALL {{$name}}({{Template "C++.CallParameters" $c}});
    {{end}}
  {{end}}
¶
  EXPORT void* STDCALL eglGetProcAddress(const char* name);
  EXPORT void* STDCALL wglGetProcAddress(const char* name);
  EXPORT void* STDCALL glXGetProcAddress(const char* name);
  EXPORT void* STDCALL glXGetProcAddressARB(const char* name);
»} // extern "C"
¶

namespace gapii {

Symbol kGLESExports[] = {
{{range $i, $c := AllCommandsSorted $}}
  {{$name := Macro "CmdName" $c}}
  {{if not (GetAnnotation $c "synthetic")}}
    {"{{$name}}", reinterpret_cast<void*>({{$name}})},
  {{end}}
{{end}}
  {"eglGetProcAddress",    reinterpret_cast<void*>(eglGetProcAddress)},
  {"wglGetProcAddress",    reinterpret_cast<void*>(wglGetProcAddress)},
  {"glXGetProcAddress",    reinterpret_cast<void*>(glXGetProcAddress)},
  {"glXGetProcAddressARB", reinterpret_cast<void*>(glXGetProcAddressARB)},
  {NULL, NULL}
};

} // namespace gapii

  namespace {«
¶
  void* STDCALL GetSpyProcAddress(const char* name) {
    if (void* proc = Spy::get()->LookupSymbol(name)) {
      return proc;
    } else {
      GAPID_ERROR("%s will NOT be captured.", name);
      return core::GetGlesProcAddress(name, true);
    }
  }
¶
  »} // anonymous namespace
¶
  extern "C" {«
¶
  {{range $c := AllCommands $}}
    {{if not (GetAnnotation $c "synthetic")}}
      {{$name := Macro "CmdName" $c}}
      {{$imports := print (Title (Global "API")) "Spy::imports()"}}
      EXPORT {{Template "C++.ReturnType" $c}} STDCALL {{$name}}({{Template "C++.CallParameters" $c}}) {
        Spy* s = Spy::get();
        GAPID_DEBUG({{Template "C++.PrintfCommandCall" $c}});
        auto spy_ctx = s->enter("{{$name}}", GlesAPI);
        {{if not (IsVoid $c.Return.Type)}}auto _result_ = §{{end}}
        s->{{$name}}({{Macro "C++.CallArguments" $c | Strings "spy_ctx" | JoinWith ", "}});
        s->exit();
        GAPID_DEBUG("{{$name}}() -- done");
        {{if not (IsVoid $c.Return.Type)}}return _result_;{{end}}
      }
    {{end}}
  {{end}}
¶
  EXPORT void* STDCALL eglGetProcAddress(const char* name)    { return GetSpyProcAddress(name); }
  EXPORT void* STDCALL wglGetProcAddress(const char* name)    { return GetSpyProcAddress(name); }
  EXPORT void* STDCALL glXGetProcAddress(const char* name)    { return GetSpyProcAddress(name); }
  EXPORT void* STDCALL glXGetProcAddressARB(const char* name) { return GetSpyProcAddress(name); }
¶
  »} // extern "C"
{{end}}
