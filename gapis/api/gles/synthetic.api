// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DEPRECATED - This synthetic is transformed into a ContextState extra
// and appended on the preceeding eglCreateContext or glMakeCurrent atom.
@synthetic @deprecated
cmd void contextInfo(u32     constant_count,
                     GLenum* constant_names,
                     u32*    constant_offsets,
                     u32*    constant_sizes,
                     u8*     constant_data,
                     GLsizei backbuffer_width,
                     GLsizei backbuffer_height,
                     GLenum  backbuffer_color_fmt,
                     GLenum  backbuffer_depth_fmt,
                     GLenum  backbuffer_stencil_fmt,
                     bool    reset_viewport_scissor,
                     bool    preserve_buffers_on_swap) {
}

// replayCreateRenderer constructs a GLES renderer for replay without making it active.
@synthetic
cmd void replayCreateRenderer(u32 rendererID) { }

// replayBindRenderer makes the renderer constructed with replayCreateRenderer active.
@synthetic
cmd void replayBindRenderer(u32 rendererID) { }

// replayUnbindRenderer makes the renderer constructed with replayCreateRenderer inactive.
@synthetic
cmd void replayUnbindRenderer(u32 rendererID) { }

// replayChangeBackbuffer alters the backbuffer dimensions and format.
@synthetic
cmd void replayChangeBackbuffer(u32     rendererID,
                                GLsizei backbuffer_width,
                                GLsizei backbuffer_height,
                                GLenum  backbuffer_color_fmt,
                                GLenum  backbuffer_depth_fmt,
                                GLenum  backbuffer_stencil_fmt,
                                bool    reset_viewport_scissor) { }

@synthetic
cmd void startTimer(u8 index) { }

@synthetic
cmd u64 stopTimer(u8 index) { return ? } // Time returned in nanoseconds

@synthetic
cmd void flushPostBuffer() { }
