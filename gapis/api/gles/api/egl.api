// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

type int   EGLBoolean
type void* EGLClientBuffer
type void* EGLConfig
type void* EGLContext
type void* EGLDisplay
@replay_remap @replay_custom_value type void* EGLImageKHR
type s32   EGLint
type int   EGLNativeDisplayType
type void* EGLNativePixmapType
type void* EGLNativeWindowType
type void* EGLSurface
type void* EGLSyncKHR
type u64   EGLTimeKHR

sub EGLint[] CloneAttribList(const EGLint* attrib_list) {
  // TODO: Replace with proper loop control flow
  length := make!s32(1)
  length[0] = 0
  if (attrib_list != null) {
    done := make!bool(1)
    done[0] = false
    for i in (0 .. 256) {
      if !(done[0]) {
        pair := attrib_list[i * 2:(i * 2) + 2]
        if as!EGLenum(pair[0]) == EGL_NONE {
          done[0] = true
          length[0] = (i * 2) + 1
        }
      }
    }
  }
  return clone(attrib_list[0:length[0]])
}

sub GLenum EGLSizedFormat2GLSizedFormat(AndroidGraphicsBufferFormat eglSizedFormat) {
  return switch eglSizedFormat {
    case HAL_PIXEL_FORMAT_RGBA_8888:    GL_RGBA8
    case HAL_PIXEL_FORMAT_RGBX_8888:    GL_RGB8 // Does not have a precise match
    case HAL_PIXEL_FORMAT_RGB_888:      GL_RGB8
    case HAL_PIXEL_FORMAT_RGB_565:      GL_RGB565
    case HAL_PIXEL_FORMAT_BGRA_8888:    GL_BGRA8_EXT
    case HAL_PIXEL_FORMAT_RGBA_5551:    GL_RGB5_A1
    case HAL_PIXEL_FORMAT_RGBA_4444:    GL_RGB4
    case HAL_PIXEL_FORMAT_YCrCb_420_SP: GL_RGB8 // Does not have a precise match
    default:                            GL_RGBA8 // TODO: Report warning
  }
}

@internal
class EGLImage {
  EGLImageKHR     ID
  EGLDisplay      Display
  EGLContext      Context
  EGLenum         Target
  EGLClientBuffer Buffer
  EGLint[]        AttribList

  @hidden ref!AndroidNativeBufferExtra Extra
  @hidden map!(EGLint, ref!Image)      Images
}

@serialize map!(EGLContext, ref!Context)   EGLContexts
@serialize map!(EGLImageKHR, ref!EGLImage) EGLImages

@no_replay
cmd EGLBoolean eglGetConfigAttrib(EGLDisplay display,
                                  EGLConfig  config,
                                  EGLint     attribute,
                                  EGLint*    value) {
  value[0] = ?
  return ?
}

@no_replay
cmd EGLBoolean eglBindAPI(EGLenum api) {
  return ? // TODO
}

@no_replay
cmd EGLBoolean eglBindTexImage(EGLDisplay display, EGLSurface surface, EGLint buffer) {
  return ? // TODO
}

@no_replay
cmd EGLBoolean eglChooseConfig(EGLDisplay    display,
                               EGLint const* attrib_list,
                               EGLConfig*    configs,
                               EGLint        config_size,
                               EGLint*       num_config) {
  _ = CloneAttribList(attrib_list)
  num := ?
  num_config[0] = num
  if configs != null {
    write(configs[0:num])
  }
  return ?
}

@no_replay
cmd EGLint eglClientWaitSyncKHR(EGLDisplay dpy,
                                EGLSyncKHR sync,
                                EGLint     sync_flags,
                                EGLTimeKHR timeout) {
  return ? // TODO
}

@no_replay
cmd EGLBoolean eglCopyBuffers(EGLDisplay          display,
                              EGLSurface          surface,
                              EGLNativePixmapType native_pixmap) {
  return ? // TODO
}

@custom @no_replay
///http://www.khronos.org/registry/egl/sdk/docs/man/html/eglCreateContext.xhtml
cmd EGLContext eglCreateContext(EGLDisplay display,
                                EGLConfig  config,
                                EGLContext share_context,
                                EGLint*    attrib_list) {
  _ = CloneAttribList(as!EGLint const*(attrib_list))
  handle := ?
  ctx := CreateContext(EGLContexts[share_context])
  EGLContexts[handle] = ctx
  return handle
}

@no_replay
cmd EGLSurface eglCreatePbufferFromClientBuffer(EGLDisplay      display,
                                                EGLenum         buftype,
                                                EGLClientBuffer buffer,
                                                EGLConfig       config,
                                                EGLint const*   attrib_list) {
  _ = CloneAttribList(attrib_list)
  return ? // TODO
}

@no_replay
cmd EGLSurface eglCreatePbufferSurface(EGLDisplay    display,
                                       EGLConfig     config,
                                       EGLint const* attrib_list) {
  _ = CloneAttribList(attrib_list)
  return ? // TODO
}

@no_replay
cmd EGLSurface eglCreatePixmapSurface(EGLDisplay          display,
                                      EGLConfig           config,
                                      EGLNativePixmapType native_pixmap,
                                      EGLint const*       attrib_list) {
  _ = CloneAttribList(attrib_list)
  return ? // TODO
}

@no_replay
cmd EGLSyncKHR eglCreateSyncKHR(EGLDisplay    dpy,
                                EGLenum       type,
                                const EGLint* attrib_list) {
  _ = CloneAttribList(attrib_list)
  return ? // TODO
}

@no_replay
cmd EGLSurface eglCreateWindowSurface(EGLDisplay          display,
                                      EGLConfig           config,
                                      EGLNativeWindowType native_window,
                                      EGLint const*       attrib_list) {
  _ = CloneAttribList(attrib_list)
  return ? // TODO
}

@no_replay
cmd EGLBoolean eglDestroyContext(EGLDisplay display, EGLContext context) {
  if (context != null) && context in EGLContexts {
    ctx := EGLContexts[context]
    ctx.Other.Destroyed = true
  }
  return ?
}

@no_replay
cmd EGLBoolean eglDestroySurface(EGLDisplay display, EGLSurface surface) {
  return ? // TODO
}

@no_replay
cmd EGLBoolean eglDestroySyncKHR(EGLDisplay dpy, EGLSyncKHR sync) {
  return ? // TODO
}

@no_replay
cmd EGLBoolean eglGetConfigs(EGLDisplay display,
                             EGLConfig* configs,
                             EGLint     config_size,
                             EGLint*    num_config) {
  num := ?
  num_config[0] = num
  if configs != null {
    write(configs[0:num])
  }
  return ? // TODO
}

@no_replay
cmd EGLContext eglGetCurrentContext() {
  return ? // TODO
}

@no_replay
cmd EGLDisplay eglGetCurrentDisplay() {
  return ? // TODO
}

@no_replay
cmd EGLSurface eglGetCurrentSurface(EGLint readdraw) {
  return ? // TODO
}

@no_replay
cmd EGLDisplay eglGetDisplay(EGLNativeDisplayType native_display) {
  return ? // TODO
}

@no_replay
@ignore_reentry // Many drivers internally call eglGetError(). Silence warnings.
cmd EGLint eglGetError() {
  return ? // TODO
}

@no_replay
cmd EGLBoolean eglGetSyncAttribKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint* value) {
  return ? // TODO
}

@no_replay
///http://www.khronos.org/registry/egl/sdk/docs/man/html/eglInitialize.xhtml
cmd EGLBoolean eglInitialize(EGLDisplay dpy, EGLint* major, EGLint* minor) {
  if major != null {
    major[0] = ?
  }
  if major != null {
    minor[0] = ?
  }
  return ?
}

@custom @no_replay
///http://www.khronos.org/registry/egl/sdk/docs/man/html/eglMakeCurrent.xhtml
cmd EGLBoolean eglMakeCurrent(EGLDisplay display,
                              EGLSurface draw,
                              EGLSurface read,
                              EGLContext context) {
  if (context == null) {
    SetContext(null)
  } else if context in EGLContexts {
    ctx := EGLContexts[context]
    if (draw == null) || (read == null) {
      // TODO: Check whether this extension is supported:
      // https://www.khronos.org/registry/EGL/extensions/KHR/EGL_KHR_surfaceless_context.txt
      // If not, error and abort.
    }
    if (ctx.Other.BoundOnThread != 0) && (ctx != Contexts[$Thread]) {
      _ = newMsg(SEVERITY_ERROR, new!ERR_CONTEXT_BOUND(id: as!u64(context)))
      abort
    }
    SetContext(ctx)
    if !ctx.Other.Initialized {
      ApplyStaticContextState(ctx, GetEGLStaticContextState(display, context))
      ApplyDynamicContextState(ctx, GetEGLDynamicContextState(display, draw, context), true)
    } else {
      ApplyDynamicContextState(ctx, GetEGLDynamicContextState(display, draw, context), false)
    }
  } else {
    dynamicState := GetEGLDynamicContextState(display, draw, context)
    staticState := GetEGLStaticContextState(display, context)
    if (dynamicState != null) && (staticState != null) {
      // We don't know anything about this context, but it existed at trace
      // time. In this situation it is likely that the context was created
      // before the interceptor was injected. The best thing we can do in this
      // situation is to build the context now.
      _ = newMsg(SEVERITY_WARNING, new!WARN_UNKNOWN_CONTEXT(id: as!u64(context)))
      ctx := CreateContext(null)
      EGLContexts[context] = ctx
      SetContext(ctx)
      // The current context is fetched by ApplyStaticContextState() and
      // ApplyDynamicContextState() so SetContext() must be set before these
      // calls.
      ApplyStaticContextState(ctx, staticState)
      ApplyDynamicContextState(ctx, dynamicState, false)
    } else {
      // TODO: onEGLError(EGL_BAD_CONTEXT)
      _ = newMsg(SEVERITY_ERROR, new!ERR_CONTEXT_DOES_NOT_EXIST(id: as!u64(context)))
      abort
    }
  }
  return ?
}

@no_replay
cmd EGLenum eglQueryAPI() {
  return ? // TODO
}

@no_replay
cmd EGLBoolean eglQueryContext(EGLDisplay display, EGLContext context, EGLint attribute, EGLint* value) {
  value[0] = ?
  return ?
}

@no_replay
cmd EGLBoolean eglQuerySurface(EGLDisplay display, EGLSurface surface, EGLint attribute, EGLint* value) {
  value[0] = ?
  return ?
}

@no_replay
cmd const char* eglQueryString(EGLDisplay display, EGLint name) {
  // TODO: EGL_CLIENT_APIS, EGL_VENDOR, EGL_VERSION, or EGL_EXTENSIONS
  return ?
}

@no_replay
cmd EGLBoolean eglReleaseTexImage(EGLDisplay display,
                                  EGLSurface surface,
                                  EGLint     buffer) {
  return ?
}

@no_replay
cmd EGLBoolean eglReleaseThread() {
  return ?
}

@no_replay
cmd EGLBoolean eglSignalSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLenum mode) {
  return ? // TODO
}

@no_replay
cmd EGLBoolean eglSurfaceAttrib(EGLDisplay display,
                                EGLSurface surface,
                                EGLint     attribute,
                                EGLint     value) {
  return ? // TODO
}

@frame_start
@custom
///http://www.khronos.org/registry/egl/sdk/docs/man/html/eglSwapBuffers.xhtml
cmd EGLBoolean eglSwapBuffers(EGLDisplay display, void* surface) {
  return ?
}

@frame_start
@no_replay
///https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_swap_buffers_with_damage.txt
cmd EGLBoolean eglSwapBuffersWithDamageKHR(EGLDisplay dpy,
                                           EGLSurface surface,
                                           EGLint*    rects,
                                           EGLint     n_rects) {
  read(rects[0:n_rects * as!EGLint(4)])
  return ?
}

@no_replay
cmd EGLBoolean eglSwapInterval(EGLDisplay display, EGLint interval) {
  return ? // TODO
}

@no_replay
cmd EGLBoolean eglTerminate(EGLDisplay display) {
  return ? // TODO
}

@no_replay
cmd EGLBoolean eglWaitClient() {
  return ? // TODO
}

@no_replay
cmd EGLBoolean eglWaitGL() {
  return ? // TODO
}

@no_replay
cmd EGLBoolean eglWaitNative(EGLint engine) {
  // TODO: EGL_CORE_NATIVE_ENGINE
  return ? // TODO
}

@if(Extension.EGL_KHR_image_base)
@doc("https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_image_base.txt", Extension.EGL_KHR_image_base)
@custom @no_replay
cmd EGLImageKHR eglCreateImageKHR(EGLDisplay      display,
                                  EGLContext      context,
                                  EGLenum         target,
                                  EGLClientBuffer buffer,
                                  const EGLint*   attrib_list) {
  attribList := CloneAttribList(attrib_list)
  id := ?
  eglImage := new!EGLImage(
    ID: id,
    Display: display,
    Context: context,
    Target: target,
    Buffer: buffer,
    AttribList: attribList)
  switch target {
    case EGL_GL_TEXTURE_2D: {
      c := EGLContexts[context]
      assert(c != null) // EGL_BAD_CONTEXT
      image := GetTextureImage(c.Objects.Textures[as!TextureId(as!u64(buffer))], 0, 0)
      assert(image != null) // EGL_BAD_PARAMETER
      eglImage.Images[0] = image
    }
    case EGL_NATIVE_BUFFER_ANDROID: {
      info := GetAndroidNativeBufferExtra(as!void*(buffer))
      sf := EGLSizedFormat2GLSizedFormat(info.Format)
      sfInfo := GetSizedFormatInfo(sf)
      eglImage.Extra = info
      for i in 0 .. max!u32(info.LayerCount, 1) {
        image := new!Image(
          Width:          as!GLsizei(info.Width),
          Height:         as!GLsizei(info.Height),
          SizedFormat:    sf,
          InternalFormat: sf,
          DataFormat:     sfInfo.UnsizedFormat,
          DataType:       sfInfo.DataType,
        )
        size := uncompressedImageSize(image.Width, image.Height, image.DataFormat, image.DataType)
        image.Data = make!u8(size)
        eglImage.Images[as!EGLint(i)] = image
      }
    }
  }
  EGLImages[id] = eglImage
  return id
}

@if(Extension.EGL_KHR_image_base)
@doc("https://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_image_base.txt", Extension.EGL_KHR_image_base)
@no_replay
cmd EGLBoolean eglDestroyImageKHR(EGLDisplay dpy, EGLImageKHR image) {
  // TODO
  return ?
}

@if(Extension.EGL_ANDROID_create_native_client_buffer)
@doc("https://www.khronos.org/registry/egl/extensions/ANDROID/EGL_ANDROID_create_native_client_buffer.txt", Extension.EGL_ANDROID_create_native_client_buffer)
@no_replay
cmd EGLClientBuffer eglCreateNativeClientBufferANDROID(const EGLint* attrib_list) {
  _ = CloneAttribList(attrib_list)
  // TODO
  return ?
}

@no_replay
cmd EGLClientBuffer eglGetNativeClientBufferANDROID(AHardwareBuffer buffer) {
  return ? // TODO
}

@if(Extension.EGL_ANDROID_native_fence_sync)
@doc("https://www.khronos.org/registry/EGL/extensions/ANDROID/EGL_ANDROID_native_fence_sync.txt", Extension.EGL_ANDROID_native_fence_sync)
@no_replay
cmd EGLint eglDupNativeFenceFDANDROID(EGLDisplay dpy, EGLSyncKHR sync) {
  return ? // TODO
}

@if(Extension.EGL_KHR_wait_sync)
@doc("https://www.khronos.org/registry/EGL/extensions/KHR/EGL_KHR_wait_sync.txt", Extension.EGL_KHR_wait_sync)
@no_replay
cmd EGLint eglWaitSyncKHR(EGLDisplay dpy,
                          EGLSyncKHR sync,
                          EGLint     flags) {
  return ? // TODO
}
