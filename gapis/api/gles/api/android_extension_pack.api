// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@if(Extension.GL_KHR_blend_equation_advanced)
@doc("https://www.khronos.org/registry/gles/extensions/KHR/KHR_blend_equation_advanced.txt", Extension.GL_KHR_blend_equation_advanced)
cmd void glBlendBarrierKHR() {
  BlendBarrier()
}

@if(Extension.GL_EXT_draw_buffers_indexed)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_draw_buffers_indexed.txt", Extension.GL_EXT_draw_buffers_indexed)
cmd void glBlendEquationSeparateiEXT(DrawBufferIndex buf, GLenum modeRGB, GLenum modeAlpha) {
  BlendEquationSeparatei(buf, modeRGB, modeAlpha)
}

@if(Extension.GL_EXT_draw_buffers_indexed)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_draw_buffers_indexed.txt", Extension.GL_EXT_draw_buffers_indexed)
cmd void glBlendEquationiEXT(DrawBufferIndex buf, GLenum mode) {
  BlendEquationi(buf, mode)
}

@if(Extension.GL_EXT_draw_buffers_indexed)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_draw_buffers_indexed.txt", Extension.GL_EXT_draw_buffers_indexed)
cmd void glBlendFuncSeparateiEXT(DrawBufferIndex buf,
                                 GLenum          srcRGB,
                                 GLenum          dstRGB,
                                 GLenum          srcAlpha,
                                 GLenum          dstAlpha) {
  BlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha)
}

@if(Extension.GL_EXT_draw_buffers_indexed)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_draw_buffers_indexed.txt", Extension.GL_EXT_draw_buffers_indexed)
cmd void glBlendFunciEXT(DrawBufferIndex buf, GLenum src, GLenum dst) {
  BlendFunci(buf, src, dst)
}

@if(Extension.GL_EXT_draw_buffers_indexed)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_draw_buffers_indexed.txt", Extension.GL_EXT_draw_buffers_indexed)
cmd void glColorMaskiEXT(DrawBufferIndex index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
  ColorMaski(index, r, g, b, a)
}

@if(Extension.GL_EXT_copy_image)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_copy_image.txt", Extension.GL_EXT_copy_image)
cmd void glCopyImageSubDataEXT(SrcImageId srcName,
                               GLenum     srcTarget,
                               GLint      srcLevel,
                               GLint      srcX,
                               GLint      srcY,
                               GLint      srcZ,
                               DstImageId dstName,
                               GLenum     dstTarget,
                               GLint      dstLevel,
                               GLint      dstX,
                               GLint      dstY,
                               GLint      dstZ,
                               GLsizei    srcWidth,
                               GLsizei    srcHeight,
                               GLsizei    srcDepth) {
  CopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth)
}

@if(Extension.GL_KHR_debug)
@doc("https://www.khronos.org/registry/gles/extensions/KHR/KHR_debug.txt", Extension.GL_KHR_debug)
cmd void glDebugMessageCallbackKHR(GLDEBUGPROC callback, const void* userParam) {
  DebugMessageCallback(callback, userParam)
}

@if(Extension.GL_KHR_debug)
@doc("https://www.khronos.org/registry/gles/extensions/KHR/KHR_debug.txt", Extension.GL_KHR_debug)
cmd void glDebugMessageControlKHR(GLenum        source,
                                  GLenum        type,
                                  GLenum        severity,
                                  GLsizei       count,
                                  const GLuint* ids,
                                  GLboolean     enabled) {
  DebugMessageControl(source, type, severity, count, ids, enabled)
}

@if(Extension.GL_KHR_debug)
@doc("https://www.khronos.org/registry/gles/extensions/KHR/KHR_debug.txt", Extension.GL_KHR_debug)
cmd void glDebugMessageInsertKHR(GLenum        source,
                                 GLenum        type,
                                 GLuint        id,
                                 GLenum        severity,
                                 GLsizei       length,
                                 const GLchar* message) {
  DebugMessageInsert(source, type, id, severity, length, message)
}

@if(Extension.GL_EXT_draw_buffers_indexed)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_draw_buffers_indexed.txt", Extension.GL_EXT_draw_buffers_indexed)
cmd void glDisableiEXT(GLenum target, GLuint index) {
  Disablei(target, index)
}

@if(Extension.GL_EXT_draw_buffers_indexed)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_draw_buffers_indexed.txt", Extension.GL_EXT_draw_buffers_indexed)
cmd void glEnableiEXT(GLenum target, GLuint index) {
  Enablei(target, index)
}

@if(Extension.GL_EXT_geometry_shader)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_geometry_shader.txt", Extension.GL_EXT_geometry_shader)
cmd void glFramebufferTextureEXT(GLenum target, GLenum attachment, TextureId texture, GLint level) {
  FramebufferTexture(target, attachment, texture, level)
}

@if(Extension.GL_KHR_debug)
@doc("https://www.khronos.org/registry/gles/extensions/KHR/KHR_debug.txt", Extension.GL_KHR_debug)
cmd GLuint glGetDebugMessageLogKHR(GLuint   count,
                                   GLsizei  bufSize,
                                   GLenum*  sources,
                                   GLenum*  types,
                                   GLuint*  ids,
                                   GLenum*  severities,
                                   GLsizei* lengths,
                                   GLchar*  messageLog) {
  l := ?
  GetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog, l)
  return l
}

@if(Extension.GL_KHR_debug)
@doc("https://www.khronos.org/registry/gles/extensions/KHR/KHR_debug.txt", Extension.GL_KHR_debug)
cmd void glGetObjectLabelKHR(GLenum   identifier,
                             GLuint   name,
                             GLsizei  bufSize,
                             GLsizei* length,
                             GLchar*  label) {
  GetObjectLabel(identifier, name, bufSize, length, label)
}

@if(Extension.GL_KHR_debug)
@doc("https://www.khronos.org/registry/gles/extensions/KHR/KHR_debug.txt", Extension.GL_KHR_debug)
cmd void glGetObjectPtrLabelKHR(const void* ptr,
                                GLsizei     bufSize,
                                GLsizei*    length,
                                GLchar*     label) {
  GetObjectPtrLabel(ptr, bufSize, length, label)
}

@if(Extension.GL_KHR_debug)
@doc("https://www.khronos.org/registry/gles/extensions/KHR/KHR_debug.txt", Extension.GL_KHR_debug)
cmd void glGetPointervKHR(GLenum pname, void** params) {
  GetPointerv(pname, params)
}

@if(Extension.GL_EXT_texture_border_clamp)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_border_clamp.txt", Extension.GL_EXT_texture_border_clamp)
cmd void glGetSamplerParameterIivEXT(SamplerId sampler, GLenum pname, GLint* params) {
  GetSamplerParameterIiv(sampler, pname, params)
}

@if(Extension.GL_EXT_texture_border_clamp)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_border_clamp.txt", Extension.GL_EXT_texture_border_clamp)
cmd void glGetSamplerParameterIuivEXT(SamplerId sampler, GLenum pname, GLuint* params) {
  GetSamplerParameterIuiv(sampler, pname, params)
}

@if(Extension.GL_EXT_texture_border_clamp)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_border_clamp.txt", Extension.GL_EXT_texture_border_clamp)
cmd void glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint* params) {
  GetTexParameterIiv(target, pname, params)
}

@if(Extension.GL_EXT_texture_border_clamp)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_border_clamp.txt", Extension.GL_EXT_texture_border_clamp)
cmd void glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint* params) {
  GetTexParameterIuiv(target, pname, params)
}

@if(Extension.GL_EXT_draw_buffers_indexed)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_draw_buffers_indexed.txt", Extension.GL_EXT_draw_buffers_indexed)
cmd GLboolean glIsEnablediEXT(GLenum target, GLuint index) {
  return IsEnabledi(target, index)
}

@if(Extension.GL_OES_sample_shading)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_sample_shading.txt", Extension.GL_OES_sample_shading)
cmd void glMinSampleShadingOES(GLfloat value) {
  MinSampleShading(value)
}

@if(Extension.GL_KHR_debug)
@doc("https://www.khronos.org/registry/gles/extensions/KHR/KHR_debug.txt", Extension.GL_KHR_debug)
cmd void glObjectLabelKHR(GLenum identifier, GLuint name, GLsizei length, const GLchar* label) {
  ObjectLabel(identifier, name, length, label)
}

@if(Extension.GL_KHR_debug)
@doc("https://www.khronos.org/registry/gles/extensions/KHR/KHR_debug.txt", Extension.GL_KHR_debug)
cmd void glObjectPtrLabelKHR(const void* ptr, GLsizei length, const GLchar* label) {
  ObjectPtrLabel(ptr, length, label)
}

@if(Extension.GL_EXT_tessellation_shader)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_tessellation_shader.txt", Extension.GL_EXT_tessellation_shader)
cmd void glPatchParameteriEXT(GLenum pname, GLint value) {
  PatchParameteri(pname, value)
}

@if(Extension.GL_KHR_debug)
@pop_user_marker
@doc("https://www.khronos.org/registry/gles/extensions/KHR/KHR_debug.txt", Extension.GL_KHR_debug)
cmd void glPopDebugGroupKHR() {
  PopDebugGroup()
}

@if(Extension.GL_EXT_primitive_bounding_box)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_primitive_bounding_box.txt", Extension.GL_EXT_primitive_bounding_box)
cmd void glPrimitiveBoundingBoxEXT(GLfloat minX,
                                   GLfloat minY,
                                   GLfloat minZ,
                                   GLfloat minW,
                                   GLfloat maxX,
                                   GLfloat maxY,
                                   GLfloat maxZ,
                                   GLfloat maxW) {
  PrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW)
}

@if(Extension.GL_KHR_debug)
@push_user_marker
@doc("https://www.khronos.org/registry/gles/extensions/KHR/KHR_debug.txt", Extension.GL_KHR_debug)
cmd void glPushDebugGroupKHR(GLenum source, GLuint id, GLsizei length, const GLchar* message) {
  PushDebugGroup(source, id, length, message)
}

@if(Extension.GL_EXT_texture_border_clamp)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_border_clamp.txt", Extension.GL_EXT_texture_border_clamp)
cmd void glSamplerParameterIivEXT(SamplerId sampler, GLenum pname, const GLint* param) {
  SamplerParameterIiv(sampler, pname, param)
}

@if(Extension.GL_EXT_texture_border_clamp)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_border_clamp.txt", Extension.GL_EXT_texture_border_clamp)
cmd void glSamplerParameterIuivEXT(SamplerId sampler, GLenum pname, const GLuint* param) {
  SamplerParameterIuiv(sampler, pname, param)
}

@if(Extension.GL_EXT_texture_buffer)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_buffer.txt", Extension.GL_EXT_texture_buffer)
cmd void glTexBufferEXT(GLenum target, GLenum internalformat, BufferId buffer) {
  TexBuffer(target, internalformat, buffer)
}

@if(Extension.GL_EXT_texture_buffer)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_buffer.txt", Extension.GL_EXT_texture_buffer)
cmd void glTexBufferRangeEXT(GLenum     target,
                             GLenum     internalformat,
                             BufferId   buffer,
                             GLintptr   offset,
                             GLsizeiptr size) {
  TexBufferRange(target, internalformat, buffer, offset, size)
}

@if(Extension.GL_EXT_texture_border_clamp)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_border_clamp.txt", Extension.GL_EXT_texture_border_clamp)
cmd void glTexParameterIivEXT(GLenum target, GLenum pname, const GLint* params) {
  TexParameterIiv(target, pname, params)
}

@if(Extension.GL_EXT_texture_border_clamp)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_border_clamp.txt", Extension.GL_EXT_texture_border_clamp)
cmd void glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint* params) {
  TexParameterIuiv(target, pname, params)
}

@if(Extension.GL_OES_texture_storage_multisample_2d_array)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_texture_storage_multisample_2d_array.txt", Extension.GL_OES_texture_storage_multisample_2d_array)
cmd void glTexStorage3DMultisampleOES(GLenum    target,
                                      GLsizei   samples,
                                      GLenum    internalformat,
                                      GLsizei   width,
                                      GLsizei   height,
                                      GLsizei   depth,
                                      GLboolean fixedsamplelocations) {
  TexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations)
}
