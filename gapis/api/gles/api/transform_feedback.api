// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@internal
class TransformFeedback {
  TransformFeedbackId ID

  // Table 21.35: Transform Feedback State
  map!(GLuint, BufferBinding) Buffers
  GLboolean                   Paused  = GL_FALSE
  GLboolean                   Active  = GL_FALSE
  @unused string              Label
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glBeginTransformFeedback.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glBeginTransformFeedback.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glBeginTransformFeedback.xhtml", Version.GLES32)
cmd void glBeginTransformFeedback(GLenum primitiveMode) {
  switch (primitiveMode) {
    case GL_LINES, GL_POINTS, GL_TRIANGLES: {
      // version 3.0
    }
    default: {
      glErrorInvalidEnum(primitiveMode)
    }
  }
  ctx := GetContext()
  ctx.Bound.TransformFeedback.Active = 1
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glBindTransformFeedback.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glBindTransformFeedback.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glBindTransformFeedback.xhtml", Version.GLES32)
cmd void glBindTransformFeedback(GLenum target, TransformFeedbackId id) {
  ctx := GetContext()
  switch (target) {
    case GL_TRANSFORM_FEEDBACK: {
      // version 3.0
      ctx.Bound.TransformFeedback = GetOrCreateTransformFeedback(id)
    }
    default: {
      glErrorInvalidEnum(target)
    }
  }
}

sub ref!TransformFeedback GetOrCreateTransformFeedback(TransformFeedbackId id) {
  ctx := GetContext()
  if (id != 0) && (ctx.Objects.TransformFeedbacks[id] == null) {
    ctx.Objects.TransformFeedbacks[id] = new!TransformFeedback(ID: id)
    ctx.Objects.GeneratedNames.TransformFeedbacks[id] = true
  }
  return ctx.Objects.TransformFeedbacks[id]
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glDeleteTransformFeedbacks.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glDeleteTransformFeedbacks.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDeleteTransformFeedbacks.xhtml", Version.GLES32)
cmd void glDeleteTransformFeedbacks(GLsizei count, const TransformFeedbackId* ids) {
  CheckCountGE!GLsizei(count, 0)
  tfs := ids[0:count]
  ctx := GetContext()
  for i in (0 .. count) {
    id := tfs[i]
    if id != 0 {
      delete(ctx.Objects.TransformFeedbacks, id)
      delete(ctx.Objects.GeneratedNames.TransformFeedbacks, id)
    }
  }
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glBeginTransformFeedback.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glBeginTransformFeedback.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glBeginTransformFeedback.xhtml", Version.GLES32)
cmd void glEndTransformFeedback() {
  ctx := GetContext()
  ctx.Bound.TransformFeedback.Paused = 0
  ctx.Bound.TransformFeedback.Active = 0
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGenTransformFeedbacks.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGenTransformFeedbacks.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGenTransformFeedbacks.xhtml", Version.GLES32)
cmd void glGenTransformFeedbacks(GLsizei count, TransformFeedbackId* ids) {
  CheckCountGE!GLsizei(count, 0)
  tfs := ids[0:count]
  ctx := GetContext()
  for i in (0 .. count) {
    id := as!TransformFeedbackId(?)
    assert(id != 0)
    ctx.Objects.GeneratedNames.TransformFeedbacks[id] = true
    tfs[i] = id
  }
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetTransformFeedbackVarying.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetTransformFeedbackVarying.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetTransformFeedbackVarying.xhtml", Version.GLES32)
cmd void glGetTransformFeedbackVarying(ProgramId program,
                                       GLuint    index,
                                       GLsizei   bufSize,
                                       GLsizei*  length,
                                       GLsizei*  size,
                                       GLenum*   type,
                                       GLchar*   name) {
  // TODO
  writeString(bufSize, length, name)
  size[0] = ?
  type[0] = ?
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glIsTransformFeedback.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glIsTransformFeedback.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glIsTransformFeedback.xhtml", Version.GLES32)
cmd GLboolean glIsTransformFeedback(TransformFeedbackId id) {
  ctx := GetContext()
  return as!GLboolean(id in ctx.Objects.TransformFeedbacks)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glPauseTransformFeedback.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glPauseTransformFeedback.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glPauseTransformFeedback.xhtml", Version.GLES32)
cmd void glPauseTransformFeedback() {
  ctx := GetContext()
  ctx.Bound.TransformFeedback.Paused = 1
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glResumeTransformFeedback.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glResumeTransformFeedback.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glResumeTransformFeedback.xhtml", Version.GLES32)
cmd void glResumeTransformFeedback() {
  ctx := GetContext()
  ctx.Bound.TransformFeedback.Paused = 0
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glTransformFeedbackVaryings.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glTransformFeedbackVaryings.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glTransformFeedbackVaryings.xhtml", Version.GLES32)
cmd void glTransformFeedbackVaryings(ProgramId            program,
                                     GLsizei              count,
                                     const GLchar* const* varyings,
                                     GLenum               bufferMode) {
  switch (bufferMode) {
    case GL_INTERLEAVED_ATTRIBS, GL_SEPARATE_ATTRIBS: {
      // version 3.0
    }
    default: {
      glErrorInvalidEnum(bufferMode)
    }
  }
  // TODO
  names := varyings[0:count]
  for i in (0 .. count) {
    _ = as!string(as!char*(names[i])) // Read null-terminated string. TODO: Better syntax.
  }
}
