// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@internal
class SyncObject {
// Table 21.37: Sync (state per sync object)
// GLenum ObjectType = GL_SYNC_FENCE
// GLenum SyncStatus = GL_UNSIGNALED
// GLenum SyncCondition = GL_SYNC_GPU_COMMANDS_COMPLETE
// GLint SyncFlags = 0
// string ObjectPtrLabel
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glClientWaitSync.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glClientWaitSync.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glClientWaitSync.xhtml", Version.GLES32)
cmd GLenum glClientWaitSync(GLsync sync, GLbitfield syncFlags, GLuint64 timeout) {
  ClientWaitSync(sync, syncFlags, timeout)
  return ?
}

sub void ClientWaitSync(GLsync sync, GLbitfield syncFlags, GLuint64 timeout) {
  supportsBits(syncFlags, GL_SYNC_FLUSH_COMMANDS_BIT)
  ctx := GetContext()
  if !(sync in ctx.Objects.SyncObjects) { glErrorInvalidObjectName!GLsync(sync) }
  if (GL_SYNC_FLUSH_COMMANDS_BIT in syncFlags) {
  }
  _ = timeout // TODO
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glDeleteSync.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glDeleteSync.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDeleteSync.xhtml", Version.GLES32)
cmd void glDeleteSync(GLsync sync) {
  DeleteSync(sync)
}

sub void DeleteSync(GLsync sync) {
  if sync != null {
    ctx := GetContext()
    if !(sync in ctx.Objects.SyncObjects) { glErrorInvalidValue!GLsync(sync) }
    delete(ctx.Objects.SyncObjects, sync)
  }
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glFenceSync.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glFenceSync.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glFenceSync.xhtml", Version.GLES32)
cmd GLsync glFenceSync(GLenum condition, GLbitfield syncFlags) {
  sync := as!GLsync(?)
  FenceSync(condition, syncFlags, sync)
  return sync
}

sub void FenceSync(GLenum condition, GLbitfield syncFlags, GLsync sync) {
  if condition != GL_SYNC_GPU_COMMANDS_COMPLETE { glErrorInvalidEnum(condition) }
  CheckEQ!GLbitfield(syncFlags, as!GLbitfield(0))
  ctx := GetContext()
  if (sync != null) {
    ctx.Objects.SyncObjects[sync] = new!SyncObject()
  }
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetSynciv.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetSynciv.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetSynciv.xhtml", Version.GLES32)
cmd void glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values) {
  GetSynciv(sync, pname, bufSize, length, values)
}

sub void GetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values) {
  _ = sync // TODO: Use or lose.
  switch (pname) {
    case GL_OBJECT_TYPE, GL_SYNC_CONDITION, GL_SYNC_FLAGS, GL_SYNC_STATUS: {
      // version 3.0
      if (values != null) && (bufSize > 0) {
        values[0] = ?
        if length != null {
          length[0] = 1
        }
      }
    }
    default: {
      glErrorInvalidEnum(pname)
    }
  }
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glIsSync.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glIsSync.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glIsSync.xhtml", Version.GLES32)
cmd GLboolean glIsSync(GLsync sync) {
  return IsSync(sync)
}

sub GLboolean IsSync(GLsync sync) {
  ctx := GetContext()
  return as!GLboolean(sync in ctx.Objects.SyncObjects)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glWaitSync.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glWaitSync.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glWaitSync.xhtml", Version.GLES32)
cmd void glWaitSync(GLsync sync, GLbitfield syncFlags, GLuint64 timeout) {
  WaitSync(sync, syncFlags, timeout)
}

sub void WaitSync(GLsync sync, GLbitfield syncFlags, GLuint64 timeout) {
  ctx := GetContext()
  if !(sync in ctx.Objects.SyncObjects) {
    glErrorInvalidOperation_ObjectDoesNotExist!GLsync(sync)
  }
  CheckEQ!GLuint64(timeout, 0xFFFFFFFFFFFFFFFF) // GL_TIMEOUT_IGNORED
  CheckEQ!GLbitfield(syncFlags, as!GLbitfield(0))
}
