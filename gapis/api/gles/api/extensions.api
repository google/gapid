// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@post_fence
extern void GetEGLImageData(EGLImageKHR img, GLsizei width, GLsizei height)

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glActiveShaderProgramEXT(PipelineId pipeline, ProgramId program) {
  // TODO
}

@if(Extension.GL_QCOM_alpha_test)
@doc("https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_alpha_test.txt", Extension.GL_QCOM_alpha_test)
cmd void glAlphaFuncQCOM(GLenum func, GLclampf ref) {
  // TODO
}

@if(Extension.GL_INTEL_framebuffer_CMAA)
@doc("https://www.khronos.org/registry/gles/extensions/INTEL/INTEL_framebuffer_CMAA.txt", Extension.GL_INTEL_framebuffer_CMAA)
cmd void glApplyFramebufferAttachmentCMAAINTEL() {
  // TODO
}

@if(Extension.GL_NV_conditional_render)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_conditional_render.txt", Extension.GL_NV_conditional_render)
cmd void glBeginConditionalRenderNV(GLuint id, GLenum mode) {
  // TODO
}

@if(Extension.GL_AMD_performance_monitor)
@doc("https://www.khronos.org/registry/gles/extensions/AMD/AMD_performance_monitor.txt", Extension.GL_AMD_performance_monitor)
cmd void glBeginPerfMonitorAMD(GLuint monitor) {
  // TODO
}

@if(Extension.GL_INTEL_performance_query)
@doc("https://www.khronos.org/registry/gles/extensions/INTEL/INTEL_performance_query.txt", Extension.GL_INTEL_performance_query)
cmd void glBeginPerfQueryINTEL(GLuint queryHandle) {
  // TODO
}

@if(Extension.GL_EXT_disjoint_timer_query || Extension.GL_EXT_occlusion_query_boolean)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_disjoint_timer_query.txt", Extension.GL_EXT_disjoint_timer_query)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_occlusion_query_boolean.txt", Extension.GL_EXT_occlusion_query_boolean)
cmd void glBeginQueryEXT(GLenum target, QueryId query) {

}

@if(Extension.GL_EXT_blend_func_extended)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_blend_func_extended.txt", Extension.GL_EXT_blend_func_extended)
cmd void glBindFragDataLocationEXT(ProgramId program, GLuint color, string name) {
}

@if(Extension.GL_EXT_blend_func_extended)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_blend_func_extended.txt", Extension.GL_EXT_blend_func_extended)
cmd void glBindFragDataLocationIndexedEXT(ProgramId program,
                                          GLuint    colorNumber,
                                          GLuint    index,
                                          string    name) {
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glBindProgramPipelineEXT(PipelineId pipeline) {
  // TODO
}

@if(Extension.GL_OES_vertex_array_object)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_vertex_array_object.txt", Extension.GL_OES_vertex_array_object)
cmd void glBindVertexArrayOES(VertexArrayId array) {
  BindVertexArray(array)
}

@if(Extension.GL_NV_blend_equation_advanced)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_blend_equation_advanced.txt", Extension.GL_NV_blend_equation_advanced)
cmd void glBlendBarrierNV() {
  BlendBarrier()
}

@if(Extension.GL_OES_draw_buffers_indexed)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_draw_buffers_indexed.txt", Extension.GL_OES_draw_buffers_indexed)
cmd void glBlendEquationSeparateiOES(DrawBufferIndex buf, GLenum modeRGB, GLenum modeAlpha) {
  BlendEquationSeparatei(buf, modeRGB, modeAlpha)
}

@if(Extension.GL_OES_draw_buffers_indexed)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_draw_buffers_indexed.txt", Extension.GL_OES_draw_buffers_indexed)
cmd void glBlendEquationiOES(DrawBufferIndex buf, GLenum mode) {
  BlendEquationi(buf, mode)
}

@if(Extension.GL_OES_draw_buffers_indexed)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_draw_buffers_indexed.txt", Extension.GL_OES_draw_buffers_indexed)
cmd void glBlendFuncSeparateiOES(DrawBufferIndex buf,
                                 GLenum          srcRGB,
                                 GLenum          dstRGB,
                                 GLenum          srcAlpha,
                                 GLenum          dstAlpha) {
  BlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha)
}

@if(Extension.GL_OES_draw_buffers_indexed)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_draw_buffers_indexed.txt", Extension.GL_OES_draw_buffers_indexed)
cmd void glBlendFunciOES(DrawBufferIndex buf, GLenum src, GLenum dst) {
  BlendFunci(buf, src, dst)
}

@if(Extension.GL_NV_blend_equation_advanced)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_blend_equation_advanced.txt", Extension.GL_NV_blend_equation_advanced)
cmd void glBlendParameteriNV(GLenum pname, GLint value) {
  // TODO
}

@if(Extension.GL_ANGLE_framebuffer_blit)
@doc("https://www.khronos.org/registry/gles/extensions/ANGLE/ANGLE_framebuffer_blit.txt", Extension.GL_ANGLE_framebuffer_blit)
cmd void glBlitFramebufferANGLE(GLint      srcX0,
                                GLint      srcY0,
                                GLint      srcX1,
                                GLint      srcY1,
                                GLint      dstX0,
                                GLint      dstY0,
                                GLint      dstX1,
                                GLint      dstY1,
                                GLbitfield mask,
                                GLenum     filter) {
  // TODO
}

@if(Extension.GL_NV_framebuffer_blit)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_framebuffer_blit.txt", Extension.GL_NV_framebuffer_blit)
cmd void glBlitFramebufferNV(GLint      srcX0,
                             GLint      srcY0,
                             GLint      srcX1,
                             GLint      srcY1,
                             GLint      dstX0,
                             GLint      dstY0,
                             GLint      dstX1,
                             GLint      dstY1,
                             GLbitfield mask,
                             GLenum     filter) {
  BlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter)
}

@if(Extension.GL_EXT_buffer_storage)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_buffer_storage.txt", Extension.GL_EXT_buffer_storage)
cmd void glBufferStorageEXT(GLenum target, GLsizeiptr size, const void* data, GLbitfield flag) {
  // TODO
}

@if(Extension.GL_APPLE_sync)
@doc("https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt", Extension.GL_APPLE_sync)
cmd GLenum glClientWaitSyncAPPLE(GLsync sync, GLbitfield flag, GLuint64 timeout) {
  ClientWaitSync(sync, flag, timeout)
  return ?
}

@if(Extension.GL_OES_draw_buffers_indexed)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_draw_buffers_indexed.txt", Extension.GL_OES_draw_buffers_indexed)
cmd void glColorMaskiOES(DrawBufferIndex index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
  ColorMaski(index, r, g, b, a)
}

@if(Extension.GL_OES_texture_3D)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_texture_3D.txt", Extension.GL_OES_texture_3D)
cmd void glCompressedTexImage3DOES(GLenum         target,
                                   GLint          level,
                                   GLenum         internalformat,
                                   GLsizei        width,
                                   GLsizei        height,
                                   GLsizei        depth,
                                   GLint          border,
                                   GLsizei        image_size,
                                   TexturePointer data) {
  CompressedTexImage3D(target, level, internalformat, width, height, depth, border, image_size, data)
}

@if(Extension.GL_OES_texture_3D)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_texture_3D.txt", Extension.GL_OES_texture_3D)
cmd void glCompressedTexSubImage3DOES(GLenum         target,
                                      GLint          level,
                                      GLint          xoffset,
                                      GLint          yoffset,
                                      GLint          zoffset,
                                      GLsizei        width,
                                      GLsizei        height,
                                      GLsizei        depth,
                                      GLenum         format,
                                      GLsizei        image_size,
                                      TexturePointer data) {
  CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, image_size, data)
}

@if(Extension.GL_NV_copy_buffer)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_copy_buffer.txt", Extension.GL_NV_copy_buffer)
cmd void glCopyBufferSubDataNV(GLenum     readTarget,
                               GLenum     writeTarget,
                               GLintptr   readOffset,
                               GLintptr   writeOffset,
                               GLsizeiptr size) {
  CopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size)
}

@if(Extension.GL_OES_copy_image)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_copy_image.txt", Extension.GL_OES_copy_image)
cmd void glCopyImageSubDataOES(SrcImageId srcName,
                               GLenum     srcTarget,
                               GLint      srcLevel,
                               GLint      srcX,
                               GLint      srcY,
                               GLint      srcZ,
                               DstImageId dstName,
                               GLenum     dstTarget,
                               GLint      dstLevel,
                               GLint      dstX,
                               GLint      dstY,
                               GLint      dstZ,
                               GLsizei    srcWidth,
                               GLsizei    srcHeight,
                               GLsizei    srcDepth) {
  CopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth)
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glCopyPathNV(GLuint resultPath, GLuint srcPath) {
  // TODO
}

@if(Extension.GL_OES_texture_3D)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_texture_3D.txt", Extension.GL_OES_texture_3D)
cmd void glCopyTexSubImage3DOES(GLenum  target,
                                GLint   level,
                                GLint   xoffset,
                                GLint   yoffset,
                                GLint   zoffset,
                                GLint   x,
                                GLint   y,
                                GLsizei width,
                                GLsizei height) {
  CopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height)
}

@if(Extension.GL_APPLE_copy_texture_levels)
@doc("https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_copy_texture_levels.txt", Extension.GL_APPLE_copy_texture_levels)
cmd void glCopyTextureLevelsAPPLE(GLuint  destinationTexture,
                                  GLuint  sourceTexture,
                                  GLint   sourceBaseLevel,
                                  GLsizei sourceLevelCount) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glCoverFillPathInstancedNV(GLsizei        numPaths,
                                    GLenum         pathNameType,
                                    const void*    paths,
                                    GLuint         pathBase,
                                    GLenum         coverMode,
                                    GLenum         transformType,
                                    const GLfloat* transformValues) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glCoverFillPathNV(GLuint path, GLenum coverMode) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glCoverStrokePathInstancedNV(GLsizei        numPaths,
                                      GLenum         pathNameType,
                                      const void*    paths,
                                      GLuint         pathBase,
                                      GLenum         coverMode,
                                      GLenum         transformType,
                                      const GLfloat* transformValues) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glCoverStrokePathNV(GLuint path, GLenum coverMode) {
  // TODO
}

@if(Extension.GL_NV_coverage_sample)
@doc("https://www.khronos.org/registry/gles/extensions/NV/EGL_NV_coverage_sample.txt", Extension.GL_NV_coverage_sample)
cmd void glCoverageMaskNV(GLboolean mask) {
  // TODO
}

@if(Extension.GL_NV_framebuffer_mixed_samples)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_framebuffer_mixed_samples.txt", Extension.GL_NV_framebuffer_mixed_samples)
cmd void glCoverageModulationNV(GLenum components) {
  // TODO
}

@if(Extension.GL_NV_framebuffer_mixed_samples)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_framebuffer_mixed_samples.txt", Extension.GL_NV_framebuffer_mixed_samples)
cmd void glCoverageModulationTableNV(GLsizei n, const GLfloat* v) {
  // TODO
}

@if(Extension.GL_NV_coverage_sample)
@doc("https://www.khronos.org/registry/gles/extensions/NV/EGL_NV_coverage_sample.txt", Extension.GL_NV_coverage_sample)
cmd void glCoverageOperationNV(GLenum operation) {
  // TODO
}

@if(Extension.GL_INTEL_performance_query)
@doc("https://www.khronos.org/registry/gles/extensions/INTEL/INTEL_performance_query.txt", Extension.GL_INTEL_performance_query)
cmd void glCreatePerfQueryINTEL(GLuint queryId, GLuint* queryHandle) {
  // TODO
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd GLuint glCreateShaderProgramvEXT(GLenum type, GLsizei count, const GLchar** strings) {
  // TODO
  return ?
}

@if(Extension.GL_NV_fence)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_fence.txt", Extension.GL_NV_fence)
cmd void glDeleteFencesNV(GLsizei n, const GLuint* fences) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glDeletePathsNV(GLuint path, GLsizei range) {
  // TODO
}

@if(Extension.GL_AMD_performance_monitor)
@doc("https://www.khronos.org/registry/gles/extensions/AMD/AMD_performance_monitor.txt", Extension.GL_AMD_performance_monitor)
cmd void glDeletePerfMonitorsAMD(GLsizei n, GLuint* monitors) {
  // TODO
}

@if(Extension.GL_INTEL_performance_query)
@doc("https://www.khronos.org/registry/gles/extensions/INTEL/INTEL_performance_query.txt", Extension.GL_INTEL_performance_query)
cmd void glDeletePerfQueryINTEL(GLuint queryHandle) {
  // TODO
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glDeleteProgramPipelinesEXT(GLsizei n, const PipelineId* pipelines) {
  DeleteProgramPipelines(n, pipelines)
}

@if(Extension.GL_EXT_disjoint_timer_query || Extension.GL_EXT_occlusion_query_boolean)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_disjoint_timer_query.txt", Extension.GL_EXT_disjoint_timer_query)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_occlusion_query_boolean.txt", Extension.GL_EXT_occlusion_query_boolean)
cmd void glDeleteQueriesEXT(GLsizei count, const QueryId* queries) {
  DeleteQueries(count, queries)
}

@if(Extension.GL_APPLE_sync)
@doc("https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt", Extension.GL_APPLE_sync)
cmd void glDeleteSyncAPPLE(GLsync sync) {
  DeleteSync(sync)
}

@if(Extension.GL_OES_vertex_array_object)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_vertex_array_object.txt", Extension.GL_OES_vertex_array_object)
cmd void glDeleteVertexArraysOES(GLsizei count, const VertexArrayId* arrays) {
  DeleteVertexArrays(count, arrays)
}

@if(Extension.GL_NV_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_viewport_array.txt", Extension.GL_NV_viewport_array)
cmd void glDepthRangeArrayfvNV(GLuint first, GLsizei count, const GLfloat* v) {
  // TODO
}

@if(Extension.GL_NV_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_viewport_array.txt", Extension.GL_NV_viewport_array)
cmd void glDepthRangeIndexedfNV(GLuint index, GLfloat n, GLfloat f) {
  // TODO
}

@if(Extension.GL_QCOM_driver_control)
@doc("https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_driver_control.txt", Extension.GL_QCOM_driver_control)
cmd void glDisableDriverControlQCOM(GLuint driverControl) {
  // TODO
}

@if(Extension.GL_NV_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_viewport_array.txt", Extension.GL_NV_viewport_array)
cmd void glDisableiNV(GLenum target, GLuint index) {
  Disablei(target, index)
}

@if(Extension.GL_OES_draw_buffers_indexed || Extension.GL_OES_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_draw_buffers_indexed.txt", Extension.GL_OES_draw_buffers_indexed)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_viewport_array.txt", Extension.GL_OES_viewport_array)
cmd void glDisableiOES(GLenum target, GLuint index) {
  Disablei(target, index)
}

@if(Extension.GL_EXT_discard_framebuffer)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_discard_framebuffer.txt", Extension.GL_EXT_discard_framebuffer)
cmd void glDiscardFramebufferEXT(GLenum        target,
                                 GLsizei       numAttachments,
                                 const GLenum* attachments) {
  InvalidateFramebuffer(target, numAttachments, attachments)
}

@if(Extension.GL_ANGLE_instanced_arrays)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/registry/gles/extensions/ANGLE/ANGLE_instanced_arrays.txt", Extension.GL_ANGLE_instanced_arrays)
cmd void glDrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount) {
  DrawArraysInstanced(mode, first, count, primcount)
}

@if(Extension.GL_EXT_base_instance)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_base_instance.txt", Extension.GL_EXT_base_instance)
cmd void glDrawArraysInstancedBaseInstanceEXT(GLenum  mode,
                                              GLint   first,
                                              GLsizei count,
                                              GLsizei instancecount,
                                              GLuint  baseinstance) {
  // TODO
}

@if(Extension.GL_EXT_draw_instanced || Extension.GL_EXT_instanced_arrays)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_draw_instanced.txt", Extension.GL_EXT_draw_instanced)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_instanced_arrays.txt", Extension.GL_EXT_instanced_arrays)
cmd void glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount) {
  DrawArraysInstanced(mode, start, count, primcount)
}

@if(Extension.GL_NV_draw_instanced)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_draw_instanced.txt", Extension.GL_NV_draw_instanced)
cmd void glDrawArraysInstancedNV(GLenum mode, GLint first, GLsizei count, GLsizei primcount) {
  DrawArraysInstanced(mode, first, count, primcount)
}

@if(Extension.GL_EXT_draw_buffers)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_draw_buffers.txt", Extension.GL_EXT_draw_buffers)
cmd void glDrawBuffersEXT(GLsizei n, const GLenum* bufs) {
  DrawBuffers(n, bufs)
}

@if(Extension.GL_EXT_multiview_draw_buffers)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_multiview_draw_buffers.txt", Extension.GL_EXT_multiview_draw_buffers)
cmd void glDrawBuffersIndexedEXT(GLint n, const GLenum* location, const GLint* indices) {
  // TODO
}

@if(Extension.GL_NV_draw_buffers)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_draw_buffers.txt", Extension.GL_NV_draw_buffers)
cmd void glDrawBuffersNV(GLsizei n, const GLenum* bufs) {
  DrawBuffers(n, bufs)
}

@if(Extension.GL_EXT_draw_elements_base_vertex)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_draw_elements_base_vertex.txt", Extension.GL_EXT_draw_elements_base_vertex)
cmd void glDrawElementsBaseVertexEXT(GLenum         mode,
                                     GLsizei        count,
                                     GLenum         type,
                                     IndicesPointer indices,
                                     GLint          basevertex) {
  DrawElementsBaseVertex(mode, count, type, indices, basevertex)
}

@if(Extension.GL_OES_draw_elements_base_vertex)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_draw_elements_base_vertex.txt", Extension.GL_OES_draw_elements_base_vertex)
cmd void glDrawElementsBaseVertexOES(GLenum         mode,
                                     GLsizei        count,
                                     GLenum         type,
                                     IndicesPointer indices,
                                     GLint          basevertex) {
  DrawElementsBaseVertex(mode, count, type, indices, basevertex)
}

@if(Extension.GL_ANGLE_instanced_arrays)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/registry/gles/extensions/ANGLE/ANGLE_instanced_arrays.txt", Extension.GL_ANGLE_instanced_arrays)
cmd void glDrawElementsInstancedANGLE(GLenum         mode,
                                      GLsizei        count,
                                      GLenum         type,
                                      IndicesPointer indices,
                                      GLsizei        primcount) {
  DrawElementsInstanced(mode, count, type, indices, primcount)
}

@if(Extension.GL_EXT_base_instance)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_base_instance.txt", Extension.GL_EXT_base_instance)
cmd void glDrawElementsInstancedBaseInstanceEXT(GLenum      mode,
                                                GLsizei     count,
                                                GLenum      type,
                                                const void* indices,
                                                GLsizei     instancecount,
                                                GLuint      baseinstance) {
  // TODO
}

@if(Extension.GL_EXT_base_instance)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_base_instance.txt", Extension.GL_EXT_base_instance)
cmd void glDrawElementsInstancedBaseVertexBaseInstanceEXT(GLenum      mode,
                                                          GLsizei     count,
                                                          GLenum      type,
                                                          const void* indices,
                                                          GLsizei     instancecount,
                                                          GLint       basevertex,
                                                          GLuint      baseinstance) {
  // TODO
}

@if(Extension.GL_EXT_draw_elements_base_vertex)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_draw_elements_base_vertex.txt", Extension.GL_EXT_draw_elements_base_vertex)
cmd void glDrawElementsInstancedBaseVertexEXT(GLenum         mode,
                                              GLsizei        count,
                                              GLenum         type,
                                              IndicesPointer indices,
                                              GLsizei        instancecount,
                                              GLint          basevertex) {
  DrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex)
}

@if(Extension.GL_OES_draw_elements_base_vertex)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_draw_elements_base_vertex.txt", Extension.GL_OES_draw_elements_base_vertex)
cmd void glDrawElementsInstancedBaseVertexOES(GLenum         mode,
                                              GLsizei        count,
                                              GLenum         type,
                                              IndicesPointer indices,
                                              GLsizei        instancecount,
                                              GLint          basevertex) {
  DrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex)
}

@if(Extension.GL_EXT_draw_instanced || Extension.GL_EXT_instanced_arrays)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_draw_instanced.txt", Extension.GL_EXT_draw_instanced)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_instanced_arrays.txt", Extension.GL_EXT_instanced_arrays)
cmd void glDrawElementsInstancedEXT(GLenum         mode,
                                    GLsizei        count,
                                    GLenum         type,
                                    IndicesPointer indices,
                                    GLsizei        primcount) {
  DrawElementsInstanced(mode, count, type, indices, primcount)
}

@if(Extension.GL_NV_draw_instanced)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_draw_instanced.txt", Extension.GL_NV_draw_instanced)
cmd void glDrawElementsInstancedNV(GLenum         mode,
                                   GLsizei        count,
                                   GLenum         type,
                                   IndicesPointer indices,
                                   GLsizei        primcount) {
  DrawElementsInstanced(mode, count, type, indices, primcount)
}

@if(Extension.GL_EXT_draw_elements_base_vertex)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_draw_elements_base_vertex.txt", Extension.GL_EXT_draw_elements_base_vertex)
cmd void glDrawRangeElementsBaseVertexEXT(GLenum         mode,
                                          GLuint         start,
                                          GLuint         end,
                                          GLsizei        count,
                                          GLenum         type,
                                          IndicesPointer indices,
                                          GLint          basevertex) {
  DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex)
}

@if(Extension.GL_OES_draw_elements_base_vertex)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_draw_elements_base_vertex.txt", Extension.GL_OES_draw_elements_base_vertex)
cmd void glDrawRangeElementsBaseVertexOES(GLenum         mode,
                                          GLuint         start,
                                          GLuint         end,
                                          GLsizei        count,
                                          GLenum         type,
                                          IndicesPointer indices,
                                          GLint          basevertex) {
  DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex)
}

@if(Extension.GL_OES_EGL_image)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_EGL_image.txt", Extension.GL_OES_EGL_image)
cmd void glEGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image) {

}

@if(Extension.GL_OES_EGL_image || Extension.GL_OES_EGL_image_external)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_EGL_image.txt", Extension.GL_OES_EGL_image)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_EGL_image_external.txt", Extension.GL_OES_EGL_image_external)
cmd void glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image) {
  switch (target) {
    @if(Extension.GL_OES_EGL_image)
    case GL_TEXTURE_2D: {}
    @if(Extension.GL_OES_EGL_image_external)
    case GL_TEXTURE_EXTERNAL_OES: {}
    default:
      glErrorInvalidEnum(target)
  }
  eglImage := EGLImages[as!EGLImageKHR(image)]
  if eglImage != null {
    t := GetBoundTextureOrErrorInvalidEnum(target)
    tmpLevel := t.Levels[0]
    tmpLevel.Layers[0] = eglImage.Image
    t.Levels[0] = tmpLevel
    t.EGLImage = eglImage
    GetEGLImageData(eglImage.ID, eglImage.Image.Width, eglImage.Image.Height)
  }
}

@if(Extension.GL_QCOM_driver_control)
@doc("https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_driver_control.txt", Extension.GL_QCOM_driver_control)
cmd void glEnableDriverControlQCOM(GLuint driverControl) {
  // TODO
}

@if(Extension.GL_NV_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_viewport_array.txt", Extension.GL_NV_viewport_array)
cmd void glEnableiNV(GLenum target, GLuint index) {
  Enablei(target, index)
}

@if(Extension.GL_OES_draw_buffers_indexed || Extension.GL_OES_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_draw_buffers_indexed.txt", Extension.GL_OES_draw_buffers_indexed)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_viewport_array.txt", Extension.GL_OES_viewport_array)
cmd void glEnableiOES(GLenum target, GLuint index) {
  Enablei(target, index)
}

@if(Extension.GL_NV_conditional_render)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_conditional_render.txt", Extension.GL_NV_conditional_render)
cmd void glEndConditionalRenderNV() {
  // TODO
}

@if(Extension.GL_AMD_performance_monitor)
@doc("https://www.khronos.org/registry/gles/extensions/AMD/AMD_performance_monitor.txt", Extension.GL_AMD_performance_monitor)
cmd void glEndPerfMonitorAMD(GLuint monitor) {
  // TODO
}

@if(Extension.GL_INTEL_performance_query)
@doc("https://www.khronos.org/registry/gles/extensions/INTEL/INTEL_performance_query.txt", Extension.GL_INTEL_performance_query)
cmd void glEndPerfQueryINTEL(GLuint queryHandle) {
  // TODO
}

@if(Extension.GL_EXT_disjoint_timer_query || Extension.GL_EXT_occlusion_query_boolean)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_disjoint_timer_query.txt", Extension.GL_EXT_disjoint_timer_query)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_occlusion_query_boolean.txt", Extension.GL_EXT_occlusion_query_boolean)
cmd void glEndQueryEXT(GLenum target) {

}

@if(Extension.GL_QCOM_tiled_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_tiled_rendering.txt", Extension.GL_QCOM_tiled_rendering)
cmd void glEndTilingQCOM(GLbitfield preserve_mask) {

}

@if(Extension.GL_QCOM_extended_get)
@doc("https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt", Extension.GL_QCOM_extended_get)
cmd void glExtGetBufferPointervQCOM(GLenum target, void** params) {
  // TODO
}

@if(Extension.GL_QCOM_extended_get)
@doc("https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt", Extension.GL_QCOM_extended_get)
cmd void glExtGetBuffersQCOM(BufferId* buffers, GLint maxBuffers, GLint* numBuffers) {
  // TODO
}

@if(Extension.GL_QCOM_extended_get)
@doc("https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt", Extension.GL_QCOM_extended_get)
cmd void glExtGetFramebuffersQCOM(FramebufferId* framebuffers,
                                  GLint          maxFramebuffers,
                                  GLint*         numFramebuffers) {
  // TODO
}

@if(Extension.GL_QCOM_extended_get2)
@doc("https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get2.txt", Extension.GL_QCOM_extended_get2)
cmd void glExtGetProgramBinarySourceQCOM(ProgramId program,
                                         GLenum    shadertype,
                                         GLchar*   source,
                                         GLint*    length) {
  // TODO
}

@if(Extension.GL_QCOM_extended_get2)
@doc("https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get2.txt", Extension.GL_QCOM_extended_get2)
cmd void glExtGetProgramsQCOM(ProgramId* programs, GLint maxPrograms, GLint* numPrograms) {
  // TODO
}

@if(Extension.GL_QCOM_extended_get)
@doc("https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt", Extension.GL_QCOM_extended_get)
cmd void glExtGetRenderbuffersQCOM(RenderbufferId* renderbuffers,
                                   GLint           maxRenderbuffers,
                                   GLint*          numRenderbuffers) {
  // TODO
}

@if(Extension.GL_QCOM_extended_get2)
@doc("https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get2.txt", Extension.GL_QCOM_extended_get2)
cmd void glExtGetShadersQCOM(ShaderId* shaders, GLint maxShaders, GLint* numShaders) {
  // TODO
}

@if(Extension.GL_QCOM_extended_get)
@doc("https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt", Extension.GL_QCOM_extended_get)
cmd void glExtGetTexLevelParameterivQCOM(TextureId texture,
                                         GLenum    face,
                                         GLint     level,
                                         GLenum    pname,
                                         GLint*    params) {
  // TODO
}

@if(Extension.GL_QCOM_extended_get)
@doc("https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt", Extension.GL_QCOM_extended_get)
cmd void glExtGetTexSubImageQCOM(GLenum  target,
                                 GLint   level,
                                 GLint   xoffset,
                                 GLint   yoffset,
                                 GLint   zoffset,
                                 GLsizei width,
                                 GLsizei height,
                                 GLsizei depth,
                                 GLenum  format,
                                 GLenum  type,
                                 void*   texels) {
  // TODO
}

@if(Extension.GL_QCOM_extended_get)
@doc("https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt", Extension.GL_QCOM_extended_get)
cmd void glExtGetTexturesQCOM(TextureId* textures, GLint maxTextures, GLint* numTextures) {
  // TODO
}

@if(Extension.GL_QCOM_extended_get2)
@doc("https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get2.txt", Extension.GL_QCOM_extended_get2)
cmd GLboolean glExtIsProgramBinaryQCOM(ProgramId program) {
  // TODO
  return ?
}

@if(Extension.GL_QCOM_extended_get)
@doc("https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_extended_get.txt", Extension.GL_QCOM_extended_get)
cmd void glExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param) {
  // TODO
}

@if(Extension.GL_APPLE_sync)
@doc("https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt", Extension.GL_APPLE_sync)
cmd GLsync glFenceSyncAPPLE(GLenum condition, GLbitfield flag) {
  sync := ?
  FenceSync(condition, flag, sync)
  return sync
}

@if(Extension.GL_NV_fence)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_fence.txt", Extension.GL_NV_fence)
cmd void glFinishFenceNV(GLuint fence) {
  // TODO
}

@if(Extension.GL_EXT_map_buffer_range)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_map_buffer_range.txt", Extension.GL_EXT_map_buffer_range)
cmd void glFlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length) {
  FlushMappedBufferRange(target, offset, length)
}

@if(Extension.GL_NV_fragment_coverage_to_color)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_fragment_coverage_to_color.txt", Extension.GL_NV_fragment_coverage_to_color)
cmd void glFragmentCoverageColorNV(GLuint color) {
  // TODO
}

@if(Extension.GL_NV_sample_locations)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_sample_locations.txt", Extension.GL_NV_sample_locations)
cmd void glFramebufferSampleLocationsfvNV(GLenum         target,
                                          GLuint         start,
                                          GLsizei        count,
                                          const GLfloat* v) {
  // TODO
}

@if(Extension.GL_EXT_multisampled_render_to_texture)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_multisampled_render_to_texture.txt", Extension.GL_EXT_multisampled_render_to_texture)
cmd void glFramebufferTexture2DMultisampleEXT(GLenum    target,
                                              GLenum    attachment,
                                              GLenum    textarget,
                                              TextureId texture,
                                              GLint     level,
                                              GLsizei   samples) {
  // TODO: Handle the multi-sampling instead of ignoring it.
  FramebufferTexture2D(target, attachment, textarget, texture, level)
}

@if(Extension.GL_IMG_multisampled_render_to_texture)
@doc("https://www.khronos.org/registry/gles/extensions/IMG/IMG_multisampled_render_to_texture.txt", Extension.GL_IMG_multisampled_render_to_texture)
cmd void glFramebufferTexture2DMultisampleIMG(GLenum    target,
                                              GLenum    attachment,
                                              GLenum    textarget,
                                              TextureId texture,
                                              GLint     level,
                                              GLsizei   samples) {
  // TODO
}

@if(Extension.GL_OES_texture_3D)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_texture_3D.txt", Extension.GL_OES_texture_3D)
cmd void glFramebufferTexture3DOES(GLenum    target,
                                   GLenum    attachment,
                                   GLenum    textarget,
                                   TextureId texture,
                                   GLint     level,
                                   GLint     zoffset) {
  // TODO
}

@if(Extension.GL_OVR_multiview)
@doc("https://www.khronos.org/registry/gles/extensions/OVR/OVR_multiview.txt", Extension.GL_OVR_multiview)
cmd void glFramebufferTextureMultiviewOVR(GLenum    target,
                                          GLenum    attachment,
                                          TextureId texture,
                                          GLint     level,
                                          GLint     baseViewIndex,
                                          GLsizei   numViews) {
  FramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews)
}

sub void FramebufferTextureMultiviewOVR(GLenum    target,
                                        GLenum    attachment,
                                        TextureId texture,
                                        GLint     level,
                                        GLint     baseViewIndex,
                                        GLsizei   numViews) {
  ctx := GetContext()
  attachment_info := FramebufferAttachment()
  if (texture != 0) {
    if !(texture in ctx.Objects.Textures) { glErrorInvalidObjectName!TextureId(texture) }
    attachment_info.Type = GL_TEXTURE
    attachment_info.Texture = ctx.Objects.Textures[texture]
    attachment_info.TextureLevel = level
    attachment_info.TextureLayer = baseViewIndex
    attachment_info.NumViews = numViews
  }
  SetFramebufferAttachment(target, attachment, attachment_info)
}

@if(Extension.GL_OES_geometry_shader)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_geometry_shader.txt", Extension.GL_OES_geometry_shader)
cmd void glFramebufferTextureOES(GLenum target, GLenum attachment, TextureId texture, GLint level) {
  FramebufferTexture(target, attachment, texture, level)
}

@if(Extension.GL_NV_fence)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_fence.txt", Extension.GL_NV_fence)
cmd void glGenFencesNV(GLsizei n, GLuint* fences) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd GLuint glGenPathsNV(GLsizei range) {
  // TODO
  return ?
}

@if(Extension.GL_AMD_performance_monitor)
@doc("https://www.khronos.org/registry/gles/extensions/AMD/AMD_performance_monitor.txt", Extension.GL_AMD_performance_monitor)
cmd void glGenPerfMonitorsAMD(GLsizei n, GLuint* monitors) {
  // TODO
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glGenProgramPipelinesEXT(GLsizei n, PipelineId* pipelines) {
  GenProgramPipelines(n, pipelines)
}

@if(Extension.GL_EXT_disjoint_timer_query || Extension.GL_EXT_occlusion_query_boolean)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_disjoint_timer_query.txt", Extension.GL_EXT_disjoint_timer_query)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_occlusion_query_boolean.txt", Extension.GL_EXT_occlusion_query_boolean)
cmd void glGenQueriesEXT(GLsizei count, QueryId* queries) {
  GenQueries(count, queries)
}

@if(Extension.GL_OES_vertex_array_object)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_vertex_array_object.txt", Extension.GL_OES_vertex_array_object)
cmd void glGenVertexArraysOES(GLsizei count, VertexArrayId* arrays) {
  GenVertexArrays(count, arrays)
}

@if(Extension.GL_OES_mapbuffer)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_mapbuffer.txt", Extension.GL_OES_mapbuffer)
cmd void glGetBufferPointervOES(GLenum target, GLenum pname, void** params) {
  GetBufferPointerv(target, pname, params)
}

@if(Extension.GL_NV_framebuffer_mixed_samples)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_framebuffer_mixed_samples.txt", Extension.GL_NV_framebuffer_mixed_samples)
cmd void glGetCoverageModulationTableNV(GLsizei bufsize, GLfloat* v) {
  // TODO
}

@if(Extension.GL_QCOM_driver_control)
@doc("https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_driver_control.txt", Extension.GL_QCOM_driver_control)
cmd void glGetDriverControlStringQCOM(GLuint   driverControl,
                                      GLsizei  bufSize,
                                      GLsizei* length,
                                      GLchar*  driverControlString) {
  // TODO
}

@if(Extension.GL_QCOM_driver_control)
@doc("https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_driver_control.txt", Extension.GL_QCOM_driver_control)
cmd void glGetDriverControlsQCOM(GLint* num, GLsizei size, GLuint* driverControls) {
  // TODO
}

@if(Extension.GL_NV_fence)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_fence.txt", Extension.GL_NV_fence)
cmd void glGetFenceivNV(GLuint fence, GLenum pname, GLint* params) {
  // TODO
}

@if(Extension.GL_INTEL_performance_query)
@doc("https://www.khronos.org/registry/gles/extensions/INTEL/INTEL_performance_query.txt", Extension.GL_INTEL_performance_query)
cmd void glGetFirstPerfQueryIdINTEL(GLuint* queryId) {
  // TODO
}

@if(Extension.GL_NV_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_viewport_array.txt", Extension.GL_NV_viewport_array)
cmd void glGetFloati_vNV(GLenum target, GLuint index, GLfloat* data) {
  // TODO
}

@if(Extension.GL_EXT_blend_func_extended)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_blend_func_extended.txt", Extension.GL_EXT_blend_func_extended)
cmd GLint glGetFragDataIndexEXT(ProgramId program, string name) {
  return ?
}

@if(Extension.GL_EXT_robustness)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_robustness.txt", Extension.GL_EXT_robustness)
cmd GLenum glGetGraphicsResetStatusEXT() {

  return ?
}

@if(Extension.GL_KHR_robustness)
@doc("https://www.khronos.org/registry/gles/extensions/KHR/KHR_robustness.txt", Extension.GL_KHR_robustness)
cmd GLenum glGetGraphicsResetStatusKHR() {
  GetGraphicsResetStatus()
  return ?
}

@if(Extension.GL_NV_bindless_texture)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_bindless_texture.txt", Extension.GL_NV_bindless_texture)
cmd GLuint64 glGetImageHandleNV(TextureId texture,
                                GLint     level,
                                GLboolean layered,
                                GLint     layer,
                                GLenum    format) {
  // TODO
  return ?
}

@if(Extension.GL_APPLE_sync)
@doc("https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt", Extension.GL_APPLE_sync)
cmd void glGetInteger64vAPPLE(GLenum pname, GLint64* params) {
  GetInteger64v(pname, params)
}

@if(Extension.GL_EXT_multiview_draw_buffers)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_multiview_draw_buffers.txt", Extension.GL_EXT_multiview_draw_buffers)
cmd void glGetIntegeri_vEXT(GLenum target, GLuint index, GLint* data) {
  // TODO
}

@if(Extension.GL_NV_internalformat_sample_query)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_internalformat_sample_query.txt", Extension.GL_NV_internalformat_sample_query)
cmd void glGetInternalformatSampleivNV(GLenum  target,
                                       GLenum  internalformat,
                                       GLsizei samples,
                                       GLenum  pname,
                                       GLsizei bufSize,
                                       GLint*  params) {
  // TODO
}

@if(Extension.GL_INTEL_performance_query)
@doc("https://www.khronos.org/registry/gles/extensions/INTEL/INTEL_performance_query.txt", Extension.GL_INTEL_performance_query)
cmd void glGetNextPerfQueryIdINTEL(GLuint queryId, GLuint* nextQueryId) {
  // TODO
}

@if(Extension.GL_EXT_debug_label)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_debug_label.txt", Extension.GL_EXT_debug_label)
cmd void glGetObjectLabelEXT(GLenum   type,
                             GLuint   object,
                             GLsizei  bufSize,
                             GLsizei* length,
                             GLchar*  label) {

  switch (type) {
    case GL_TEXTURE, GL_FRAMEBUFFER, GL_RENDERBUFFER,
        GL_BUFFER_OBJECT_EXT, GL_SHADER_OBJECT_EXT, GL_PROGRAM_OBJECT_EXT,
        GL_VERTEX_ARRAY_OBJECT_EXT, GL_QUERY_OBJECT_EXT, GL_SAMPLER, GL_TRANSFORM_FEEDBACK,
        GL_PROGRAM_PIPELINE_OBJECT_EXT: {
      // GL_EXT_debug_label
    }
    default: {
      glErrorInvalidEnum(type)
    }
  }

  _ = object // TODO
  writeString(bufSize, length, label)
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glGetPathCommandsNV(GLuint path, GLubyte* commands) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glGetPathCoordsNV(GLuint path, GLfloat* coords) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glGetPathDashArrayNV(GLuint path, GLfloat* dashArray) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd GLfloat glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments) {
  // TODO
  return ?
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glGetPathMetricRangeNV(GLbitfield metricQueryMask,
                                GLuint     firstPathName,
                                GLsizei    numPaths,
                                GLsizei    stride,
                                GLfloat*   metrics) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glGetPathMetricsNV(GLbitfield  metricQueryMask,
                            GLsizei     numPaths,
                            GLenum      pathNameType,
                            const void* paths,
                            GLuint      pathBase,
                            GLsizei     stride,
                            GLfloat*    metrics) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat* value) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glGetPathParameterivNV(GLuint path, GLenum pname, GLint* value) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glGetPathSpacingNV(GLenum      pathListMode,
                            GLsizei     numPaths,
                            GLenum      pathNameType,
                            const void* paths,
                            GLuint      pathBase,
                            GLfloat     advanceScale,
                            GLfloat     kerningScale,
                            GLenum      transformType,
                            GLfloat*    returnedSpacing) {
  // TODO
}

@if(Extension.GL_INTEL_performance_query)
@doc("https://www.khronos.org/registry/gles/extensions/INTEL/INTEL_performance_query.txt", Extension.GL_INTEL_performance_query)
cmd void glGetPerfCounterInfoINTEL(GLuint    queryId,
                                   GLuint    counterId,
                                   GLuint    counterNameLength,
                                   GLchar*   counterName,
                                   GLuint    counterDescLength,
                                   GLchar*   counterDesc,
                                   GLuint*   counterOffset,
                                   GLuint*   counterDataSize,
                                   GLuint*   counterTypeEnum,
                                   GLuint*   counterDataTypeEnum,
                                   GLuint64* rawCounterMaxValue) {
  // TODO
}

@if(Extension.GL_AMD_performance_monitor)
@doc("https://www.khronos.org/registry/gles/extensions/AMD/AMD_performance_monitor.txt", Extension.GL_AMD_performance_monitor)
cmd void glGetPerfMonitorCounterDataAMD(GLuint  monitor,
                                        GLenum  pname,
                                        GLsizei dataSize,
                                        GLuint* data,
                                        GLint*  bytesWritten) {
  // TODO
}

@if(Extension.GL_AMD_performance_monitor)
@doc("https://www.khronos.org/registry/gles/extensions/AMD/AMD_performance_monitor.txt", Extension.GL_AMD_performance_monitor)
cmd void glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void* data) {
  // TODO
}

@if(Extension.GL_AMD_performance_monitor)
@doc("https://www.khronos.org/registry/gles/extensions/AMD/AMD_performance_monitor.txt", Extension.GL_AMD_performance_monitor)
cmd void glGetPerfMonitorCounterStringAMD(GLuint   group,
                                          GLuint   counter,
                                          GLsizei  bufSize,
                                          GLsizei* length,
                                          GLchar*  counterString) {
  // TODO
}

@if(Extension.GL_AMD_performance_monitor)
@doc("https://www.khronos.org/registry/gles/extensions/AMD/AMD_performance_monitor.txt", Extension.GL_AMD_performance_monitor)
cmd void glGetPerfMonitorCountersAMD(GLuint  group,
                                     GLint*  numCounters,
                                     GLint*  maxActiveCounters,
                                     GLsizei counterSize,
                                     GLuint* counters) {
  // TODO
}

@if(Extension.GL_AMD_performance_monitor)
@doc("https://www.khronos.org/registry/gles/extensions/AMD/AMD_performance_monitor.txt", Extension.GL_AMD_performance_monitor)
cmd void glGetPerfMonitorGroupStringAMD(GLuint   group,
                                        GLsizei  bufSize,
                                        GLsizei* length,
                                        GLchar*  groupString) {
  // TODO
}

@if(Extension.GL_AMD_performance_monitor)
@doc("https://www.khronos.org/registry/gles/extensions/AMD/AMD_performance_monitor.txt", Extension.GL_AMD_performance_monitor)
cmd void glGetPerfMonitorGroupsAMD(GLint* numGroups, GLsizei groupsSize, GLuint* groups) {
  // TODO
}

@if(Extension.GL_INTEL_performance_query)
@doc("https://www.khronos.org/registry/gles/extensions/INTEL/INTEL_performance_query.txt", Extension.GL_INTEL_performance_query)
cmd void glGetPerfQueryDataINTEL(GLuint  queryHandle,
                                 GLuint  flag,
                                 GLsizei dataSize,
                                 GLvoid* data,
                                 GLuint* bytesWritten) {
  // TODO
}

@if(Extension.GL_INTEL_performance_query)
@doc("https://www.khronos.org/registry/gles/extensions/INTEL/INTEL_performance_query.txt", Extension.GL_INTEL_performance_query)
cmd void glGetPerfQueryIdByNameINTEL(GLchar* queryName, GLuint* queryId) {
  // TODO
}

@if(Extension.GL_INTEL_performance_query)
@doc("https://www.khronos.org/registry/gles/extensions/INTEL/INTEL_performance_query.txt", Extension.GL_INTEL_performance_query)
cmd void glGetPerfQueryInfoINTEL(GLuint  queryId,
                                 GLuint  queryNameLength,
                                 GLchar* queryName,
                                 GLuint* dataSize,
                                 GLuint* noCounters,
                                 GLuint* noInstances,
                                 GLuint* capsMask) {
  // TODO
}

@if(Extension.GL_OES_get_program_binary)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_get_program_binary.txt", Extension.GL_OES_get_program_binary)
cmd void glGetProgramBinaryOES(ProgramId program,
                               GLsizei   buffer_size,
                               GLsizei*  bytes_written,
                               GLenum*   binary_format,
                               void*     binary) {
  GetProgramBinary(program, buffer_size, bytes_written, binary_format, binary)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glGetProgramPipelineInfoLogEXT(PipelineId pipeline,
                                        GLsizei    bufSize,
                                        GLsizei*   length,
                                        GLchar*    infoLog) {
  // TODO
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glGetProgramPipelineivEXT(PipelineId pipeline, GLenum pname, GLint* params) {
  // TODO
}

@if(Extension.GL_EXT_blend_func_extended)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_blend_func_extended.txt", Extension.GL_EXT_blend_func_extended)
cmd GLint glGetProgramResourceLocationIndexEXT(ProgramId program,
                                               GLenum    programInterface,
                                               string    name) {
  return ?
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glGetProgramResourcefvNV(ProgramId     program,
                                  GLenum        programInterface,
                                  GLuint        index,
                                  GLsizei       propCount,
                                  const GLenum* props,
                                  GLsizei       bufSize,
                                  GLsizei*      length,
                                  GLfloat*      params) {
  // TODO
}

@if(Extension.GL_EXT_disjoint_timer_query)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_disjoint_timer_query.txt", Extension.GL_EXT_disjoint_timer_query)
cmd void glGetQueryObjecti64vEXT(QueryId query, GLenum parameter, GLint64* value) {

  value[0] = ?
}

@if(Extension.GL_EXT_disjoint_timer_query)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_disjoint_timer_query.txt", Extension.GL_EXT_disjoint_timer_query)
cmd void glGetQueryObjectivEXT(QueryId query, GLenum parameter, GLint* value) {

  value[0] = ?
}

@if(Extension.GL_EXT_disjoint_timer_query)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_disjoint_timer_query.txt", Extension.GL_EXT_disjoint_timer_query)
cmd void glGetQueryObjectui64vEXT(QueryId query, GLenum parameter, GLuint64* value) {

  value[0] = ?
}

@if(Extension.GL_EXT_disjoint_timer_query || Extension.GL_EXT_occlusion_query_boolean)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_disjoint_timer_query.txt", Extension.GL_EXT_disjoint_timer_query)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_occlusion_query_boolean.txt", Extension.GL_EXT_occlusion_query_boolean)
cmd void glGetQueryObjectuivEXT(QueryId query, GLenum parameter, GLuint* value) {

  value[0] = ?
}

@if(Extension.GL_EXT_disjoint_timer_query || Extension.GL_EXT_occlusion_query_boolean)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_disjoint_timer_query.txt", Extension.GL_EXT_disjoint_timer_query)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_occlusion_query_boolean.txt", Extension.GL_EXT_occlusion_query_boolean)
cmd void glGetQueryivEXT(GLenum target, GLenum parameter, GLint* value) {

  value[0] = ?
}

@if(Extension.GL_OES_texture_border_clamp)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_texture_border_clamp.txt", Extension.GL_OES_texture_border_clamp)
cmd void glGetSamplerParameterIivOES(SamplerId sampler, GLenum pname, GLint* params) {
  GetSamplerParameterIiv(sampler, pname, params)
}

@if(Extension.GL_OES_texture_border_clamp)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_texture_border_clamp.txt", Extension.GL_OES_texture_border_clamp)
cmd void glGetSamplerParameterIuivOES(SamplerId sampler, GLenum pname, GLuint* params) {
  GetSamplerParameterIuiv(sampler, pname, params)
}

@if(Extension.GL_APPLE_sync)
@doc("https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt", Extension.GL_APPLE_sync)
cmd void glGetSyncivAPPLE(GLsync   sync,
                          GLenum   pname,
                          GLsizei  bufSize,
                          GLsizei* length,
                          GLint*   values) {
  GetSynciv(sync, pname, bufSize, length, values)
}

@if(Extension.GL_OES_texture_border_clamp)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_texture_border_clamp.txt", Extension.GL_OES_texture_border_clamp)
cmd void glGetTexParameterIivOES(GLenum target, GLenum pname, GLint* params) {
  GetTexParameterIiv(target, pname, params)
}

@if(Extension.GL_OES_texture_border_clamp)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_texture_border_clamp.txt", Extension.GL_OES_texture_border_clamp)
cmd void glGetTexParameterIuivOES(GLenum target, GLenum pname, GLuint* params) {
  GetTexParameterIuiv(target, pname, params)
}

@if(Extension.GL_NV_bindless_texture)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_bindless_texture.txt", Extension.GL_NV_bindless_texture)
cmd GLuint64 glGetTextureHandleNV(TextureId texture) {
  // TODO
  return ?
}

@if(Extension.GL_NV_bindless_texture)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_bindless_texture.txt", Extension.GL_NV_bindless_texture)
cmd GLuint64 glGetTextureSamplerHandleNV(TextureId texture, SamplerId sampler) {
  // TODO
  return ?
}

@if(Extension.GL_ANGLE_translated_shader_source)
@doc("https://www.khronos.org/registry/gles/extensions/ANGLE/ANGLE_translated_shader_source.txt", Extension.GL_ANGLE_translated_shader_source)
cmd void glGetTranslatedShaderSourceANGLE(ShaderId shader,
                                          GLsizei  bufsize,
                                          GLsizei* length,
                                          GLchar*  source) {
  // TODO
}

@if(Extension.GL_EXT_robustness)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_robustness.txt", Extension.GL_EXT_robustness)
cmd void glGetnUniformfvEXT(ProgramId       program,
                            UniformLocation location,
                            GLsizei         bufSize,
                            GLfloat*        params) {
  // TODO
}

@if(Extension.GL_KHR_robustness)
@doc("https://www.khronos.org/registry/gles/extensions/KHR/KHR_robustness.txt", Extension.GL_KHR_robustness)
cmd void glGetnUniformfvKHR(ProgramId       program,
                            UniformLocation location,
                            GLsizei         bufSize,
                            GLfloat*        params) {
  GetnUniformfv!GLfloat*(program, location, bufSize, params)
}

@if(Extension.GL_EXT_robustness)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_robustness.txt", Extension.GL_EXT_robustness)
cmd void glGetnUniformivEXT(ProgramId       program,
                            UniformLocation location,
                            GLsizei         bufSize,
                            GLint*          params) {
  // TODO
}

@if(Extension.GL_KHR_robustness)
@doc("https://www.khronos.org/registry/gles/extensions/KHR/KHR_robustness.txt", Extension.GL_KHR_robustness)
cmd void glGetnUniformivKHR(ProgramId       program,
                            UniformLocation location,
                            GLsizei         bufSize,
                            GLint*          params) {
  GetnUniformiv(program, location, bufSize, params)
}

@if(Extension.GL_KHR_robustness)
@doc("https://www.khronos.org/registry/gles/extensions/KHR/KHR_robustness.txt", Extension.GL_KHR_robustness)
cmd void glGetnUniformuivKHR(ProgramId       program,
                             UniformLocation location,
                             GLsizei         bufSize,
                             GLuint*         params) {
  GetnUniformuiv(program, location, bufSize, params)
}

@if(Extension.GL_EXT_debug_marker)
@user_marker
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_debug_marker.txt", Extension.GL_EXT_debug_marker)
cmd void glInsertEventMarkerEXT(GLsizei length, const GLchar* marker) {

  if length > 0 {
    read(marker[0:length])
  } else {
    // TODO: Remove the extra cast.
    _ = as!string(as!char*(marker)) // Read null-terminated string. TODO: Better syntax.
  }
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) {
  // TODO
}

@if(Extension.GL_NV_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_viewport_array.txt", Extension.GL_NV_viewport_array)
cmd GLboolean glIsEnablediNV(GLenum target, GLuint index) {
  return IsEnabledi(target, index)
}

@if(Extension.GL_OES_draw_buffers_indexed || Extension.GL_OES_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_draw_buffers_indexed.txt", Extension.GL_OES_draw_buffers_indexed)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_viewport_array.txt", Extension.GL_OES_viewport_array)
cmd GLboolean glIsEnablediOES(GLenum target, GLuint index) {
  return IsEnabledi(target, index)
}

@if(Extension.GL_NV_fence)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_fence.txt", Extension.GL_NV_fence)
cmd GLboolean glIsFenceNV(GLuint fence) {
  // TODO
  return ?
}

@if(Extension.GL_NV_bindless_texture)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_bindless_texture.txt", Extension.GL_NV_bindless_texture)
cmd GLboolean glIsImageHandleResidentNV(GLuint64 handle) {
  // TODO
  return ?
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd GLboolean glIsPathNV(GLuint path) {
  // TODO
  return ?
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd GLboolean glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y) {
  // TODO
  return ?
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd GLboolean glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y) {
  // TODO
  return ?
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd GLboolean glIsProgramPipelineEXT(PipelineId pipeline) {
  // TODO
  return ?
}

@if(Extension.GL_EXT_disjoint_timer_query || Extension.GL_EXT_occlusion_query_boolean)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_disjoint_timer_query.txt", Extension.GL_EXT_disjoint_timer_query)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_occlusion_query_boolean.txt", Extension.GL_EXT_occlusion_query_boolean)
cmd GLboolean glIsQueryEXT(QueryId query) {

  ctx := GetContext()
  return as!GLboolean(query in ctx.Objects.Queries)
}

@if(Extension.GL_APPLE_sync)
@doc("https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt", Extension.GL_APPLE_sync)
cmd GLboolean glIsSyncAPPLE(GLsync sync) {
  return IsSync(sync)
}

@if(Extension.GL_NV_bindless_texture)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_bindless_texture.txt", Extension.GL_NV_bindless_texture)
cmd GLboolean glIsTextureHandleResidentNV(GLuint64 handle) {
  // TODO
  return ?
}

@if(Extension.GL_OES_vertex_array_object)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_vertex_array_object.txt", Extension.GL_OES_vertex_array_object)
cmd GLboolean glIsVertexArrayOES(VertexArrayId array) {
  return IsVertexArray(array)
}

@if(Extension.GL_EXT_debug_label)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_debug_label.txt", Extension.GL_EXT_debug_label)
cmd void glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar* label) {

  // GL_EXT_debug_label has different string semantics, even different from glObjectLabel
  str := switch label != null {
    case true:
      switch length == 0 {
        case true:
          // Zero length implies null-terminated string
          as!string(as!char*(label))
        case false:
          as!string(as!char[](label[0:length]))
      }
    case false:
      as!string(null)
  }

  ctx := GetContext()
  switch (type) {
    case GL_TEXTURE: {
      if !(as!TextureId(object) in ctx.Objects.Textures) {
        glErrorInvalidOperation_ObjectDoesNotExist!GLuint(object)
      }
      ctx.Objects.Textures[as!TextureId(object)].Label = str
    }
    case GL_FRAMEBUFFER: {
      if !(as!FramebufferId(object) in ctx.Objects.Framebuffers) {
        glErrorInvalidOperation_ObjectDoesNotExist!GLuint(object)
      }
      ctx.Objects.Framebuffers[as!FramebufferId(object)].Label = str
    }
    case GL_RENDERBUFFER: {
      if !(as!RenderbufferId(object) in ctx.Objects.Renderbuffers) {
        glErrorInvalidOperation_ObjectDoesNotExist!GLuint(object)
      }
      ctx.Objects.Renderbuffers[as!RenderbufferId(object)].Label = str
    }
    case GL_BUFFER_OBJECT_EXT: {
      if !(as!BufferId(object) in ctx.Objects.Buffers) {
        glErrorInvalidOperation_ObjectDoesNotExist!GLuint(object)
      }
      ctx.Objects.Buffers[as!BufferId(object)].Label = str
    }
    case GL_SHADER_OBJECT_EXT: {
      if !(as!ShaderId(object) in ctx.Objects.Shaders) {
        glErrorInvalidOperation_ObjectDoesNotExist!GLuint(object)
      }
      ctx.Objects.Shaders[as!ShaderId(object)].Label = str
    }
    case GL_PROGRAM_OBJECT_EXT: {
      if !(as!ProgramId(object) in ctx.Objects.Programs) {
        glErrorInvalidOperation_ObjectDoesNotExist!GLuint(object)
      }
      ctx.Objects.Programs[as!ProgramId(object)].Label = str
    }
    case GL_VERTEX_ARRAY_OBJECT_EXT: {
      if !(as!VertexArrayId(object) in ctx.Objects.VertexArrays) {
        glErrorInvalidOperation_ObjectDoesNotExist!GLuint(object)
      }
      ctx.Objects.VertexArrays[as!VertexArrayId(object)].Label = str
    }
    case GL_QUERY_OBJECT_EXT: {
      if !(as!QueryId(object) in ctx.Objects.Queries) {
        glErrorInvalidOperation_ObjectDoesNotExist!GLuint(object)
      }
      ctx.Objects.Queries[as!QueryId(object)].Label = str
    }
    case GL_SAMPLER: {
      if !(as!SamplerId(object) in ctx.Objects.Samplers) {
        glErrorInvalidOperation_ObjectDoesNotExist!GLuint(object)
      }
      ctx.Objects.Samplers[as!SamplerId(object)].Label = str
    }
    case GL_TRANSFORM_FEEDBACK: {
      if !(as!TransformFeedbackId(object) in ctx.Objects.TransformFeedbacks) {
        glErrorInvalidOperation_ObjectDoesNotExist!GLuint(object)
      }
      ctx.Objects.TransformFeedbacks[as!TransformFeedbackId(object)].Label = str
    }
    case GL_PROGRAM_PIPELINE_OBJECT_EXT: {
      if !(as!PipelineId(object) in ctx.Objects.Pipelines) {
        glErrorInvalidOperation_ObjectDoesNotExist!GLuint(object)
      }
      ctx.Objects.Pipelines[as!PipelineId(object)].Label = str
    }
    default: {
      glErrorInvalidEnum(type)
    }
  }
}

@if(Extension.GL_NV_bindless_texture)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_bindless_texture.txt", Extension.GL_NV_bindless_texture)
cmd void glMakeImageHandleNonResidentNV(GLuint64 handle) {
  // TODO
}

@if(Extension.GL_NV_bindless_texture)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_bindless_texture.txt", Extension.GL_NV_bindless_texture)
cmd void glMakeImageHandleResidentNV(GLuint64 handle, GLenum access) {
  // TODO
}

@if(Extension.GL_NV_bindless_texture)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_bindless_texture.txt", Extension.GL_NV_bindless_texture)
cmd void glMakeTextureHandleNonResidentNV(GLuint64 handle) {
  // TODO
}

@if(Extension.GL_NV_bindless_texture)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_bindless_texture.txt", Extension.GL_NV_bindless_texture)
cmd void glMakeTextureHandleResidentNV(GLuint64 handle) {
  // TODO
}

@if(Extension.GL_OES_mapbuffer)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_mapbuffer.txt", Extension.GL_OES_mapbuffer)
cmd void* glMapBufferOES(GLenum target, GLenum access) {
  ptr := ?
  MapBuffer(target, access, as!u8*(ptr))
  return ptr
}

@if(Extension.GL_EXT_map_buffer_range)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_map_buffer_range.txt", Extension.GL_EXT_map_buffer_range)
cmd void* glMapBufferRangeEXT(GLenum     target,
                              GLintptr   offset,
                              GLsizeiptr length,
                              GLbitfield access) {
  ptr := ?
  MapBufferRange(target, offset, length, access, as!u8*(ptr))
  return ptr
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glMatrixLoad3x2fNV(GLenum matrixMode, const GLfloat* m) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glMatrixLoad3x3fNV(GLenum matrixMode, const GLfloat* m) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glMatrixLoadTranspose3x3fNV(GLenum matrixMode, const GLfloat* m) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glMatrixMult3x2fNV(GLenum matrixMode, const GLfloat* m) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glMatrixMult3x3fNV(GLenum matrixMode, const GLfloat* m) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glMatrixMultTranspose3x3fNV(GLenum matrixMode, const GLfloat* m) {
  // TODO
}

@if(Extension.GL_EXT_multi_draw_arrays)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_multi_draw_arrays.txt", Extension.GL_EXT_multi_draw_arrays)
cmd void glMultiDrawArraysEXT(GLenum         mode,
                              const GLint*   first,
                              const GLsizei* count,
                              GLsizei        primcount) {
  // TODO
}

@if(Extension.GL_EXT_multi_draw_indirect)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_multi_draw_indirect.txt", Extension.GL_EXT_multi_draw_indirect)
cmd void glMultiDrawArraysIndirectEXT(GLenum      mode,
                                      const void* indirect,
                                      GLsizei     drawcount,
                                      GLsizei     stride) {
  // TODO
}

@if(Extension.GL_EXT_draw_elements_base_vertex)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_draw_elements_base_vertex.txt", Extension.GL_EXT_draw_elements_base_vertex)
cmd void glMultiDrawElementsBaseVertexEXT(GLenum             mode,
                                          const GLsizei*     count,
                                          GLenum             type,
                                          const void* const* indices,
                                          GLsizei            primcount,
                                          const GLint*       basevertex) {
  // TODO
}

@if(Extension.GL_OES_draw_elements_base_vertex)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_draw_elements_base_vertex.txt", Extension.GL_OES_draw_elements_base_vertex)
cmd void glMultiDrawElementsBaseVertexOES(GLenum             mode,
                                          const GLsizei*     count,
                                          GLenum             type,
                                          const void* const* indices,
                                          GLsizei            primcount,
                                          const GLint*       basevertex) {
  // TODO
}

@if(Extension.GL_EXT_multi_draw_arrays)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_multi_draw_arrays.txt", Extension.GL_EXT_multi_draw_arrays)
cmd void glMultiDrawElementsEXT(GLenum             mode,
                                const GLsizei*     count,
                                GLenum             type,
                                const void* const* indices,
                                GLsizei            primcount) {
  // TODO
}

@if(Extension.GL_EXT_multi_draw_indirect)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_multi_draw_indirect.txt", Extension.GL_EXT_multi_draw_indirect)
cmd void glMultiDrawElementsIndirectEXT(GLenum      mode,
                                        GLenum      type,
                                        const void* indirect,
                                        GLsizei     drawcount,
                                        GLsizei     stride) {
  // TODO
}

@if(Extension.GL_NV_sample_locations)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_sample_locations.txt", Extension.GL_NV_sample_locations)
cmd void glNamedFramebufferSampleLocationsfvNV(FramebufferId  framebuffer,
                                               GLuint         start,
                                               GLsizei        count,
                                               const GLfloat* v) {
  // TODO
}

@if(Extension.GL_OES_tessellation_shader)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_tessellation_shader.txt", Extension.GL_OES_tessellation_shader)
cmd void glPatchParameteriOES(GLenum pname, GLint value) {
  PatchParameteri(pname, value)
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glPathCommandsNV(GLuint         path,
                          GLsizei        numCommands,
                          const GLubyte* commands,
                          GLsizei        numCoords,
                          GLenum         coordType,
                          const void*    coords) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void* coords) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glPathCoverDepthFuncNV(GLenum func) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat* dashArray) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd GLenum glPathGlyphIndexArrayNV(GLuint      firstPathName,
                                   GLenum      fontTarget,
                                   const void* fontName,
                                   GLbitfield  fontStyle,
                                   GLuint      firstGlyphIndex,
                                   GLsizei     numGlyphs,
                                   GLuint      pathParameterTemplate,
                                   GLfloat     emScale) {
  // TODO
  return ?
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd GLenum glPathGlyphIndexRangeNV(GLenum      fontTarget,
                                   const void* fontName,
                                   GLbitfield  fontStyle,
                                   GLuint      pathParameterTemplate,
                                   GLfloat     emScale,
                                   GLuint      baseAndCount) {
  // TODO
  return ?
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glPathGlyphRangeNV(GLuint      firstPathName,
                            GLenum      fontTarget,
                            const void* fontName,
                            GLbitfield  fontStyle,
                            GLuint      firstGlyph,
                            GLsizei     numGlyphs,
                            GLenum      handleMissingGlyphs,
                            GLuint      pathParameterTemplate,
                            GLfloat     emScale) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glPathGlyphsNV(GLuint      firstPathName,
                        GLenum      fontTarget,
                        const void* fontName,
                        GLbitfield  fontStyle,
                        GLsizei     numGlyphs,
                        GLenum      type,
                        const void* charcodes,
                        GLenum      handleMissingGlyphs,
                        GLuint      pathParameterTemplate,
                        GLfloat     emScale) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd GLenum glPathMemoryGlyphIndexArrayNV(GLuint      firstPathName,
                                         GLenum      fontTarget,
                                         GLsizeiptr  fontSize,
                                         const void* fontData,
                                         GLsizei     faceIndex,
                                         GLuint      firstGlyphIndex,
                                         GLsizei     numGlyphs,
                                         GLuint      pathParameterTemplate,
                                         GLfloat     emScale) {
  // TODO
  return ?
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glPathParameterfNV(GLuint path, GLenum pname, GLfloat value) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat* value) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glPathParameteriNV(GLuint path, GLenum pname, GLint value) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glPathParameterivNV(GLuint path, GLenum pname, const GLint* value) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glPathStringNV(GLuint path, GLenum format, GLsizei length, const void* pathString) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glPathSubCommandsNV(GLuint         path,
                             GLsizei        commandStart,
                             GLsizei        commandsToDelete,
                             GLsizei        numCommands,
                             const GLubyte* commands,
                             GLsizei        numCoords,
                             GLenum         coordType,
                             const void*    coords) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glPathSubCoordsNV(GLuint      path,
                           GLsizei     coordStart,
                           GLsizei     numCoords,
                           GLenum      coordType,
                           const void* coords) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd GLboolean glPointAlongPathNV(GLuint   path,
                                 GLsizei  startSegment,
                                 GLsizei  numSegments,
                                 GLfloat  distance,
                                 GLfloat* x,
                                 GLfloat* y,
                                 GLfloat* tangentX,
                                 GLfloat* tangentY) {
  // TODO
  return ?
}

@if(Extension.GL_NV_polygon_mode)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_polygon_mode.txt", Extension.GL_NV_polygon_mode)
cmd void glPolygonModeNV(GLenum face, GLenum mode) {
  // TODO
}

@if(Extension.GL_EXT_debug_marker)
@pop_user_marker
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_debug_marker.txt", Extension.GL_EXT_debug_marker)
cmd void glPopGroupMarkerEXT() {
}

@if(Extension.GL_OES_primitive_bounding_box)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_primitive_bounding_box.txt", Extension.GL_OES_primitive_bounding_box)
cmd void glPrimitiveBoundingBoxOES(GLfloat minX,
                                   GLfloat minY,
                                   GLfloat minZ,
                                   GLfloat minW,
                                   GLfloat maxX,
                                   GLfloat maxY,
                                   GLfloat maxZ,
                                   GLfloat maxW) {
  PrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW)
}

@if(Extension.GL_OES_get_program_binary)
@custom
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_get_program_binary.txt", Extension.GL_OES_get_program_binary)
cmd void glProgramBinaryOES(ProgramId   program,
                            GLenum      binary_format,
                            const void* binary,
                            GLint       binary_size) {
  // TODO: spec - 'binary_size' changed type
  ProgramBinary(program, binary_format, binary, as!GLsizei(binary_size))
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramParameteriEXT(ProgramId program, GLenum pname, GLint value) {
  ProgramParameteri(program, pname, value)
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glProgramPathFragmentInputGenNV(ProgramId      program,
                                         GLint          location,
                                         GLenum         genMode,
                                         GLint          components,
                                         const GLfloat* coeffs) {
  // TODO
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform1fEXT(ProgramId program, UniformLocation location, GLfloat v0) {
  ProgramUniform1f(program, location, v0)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform1fvEXT(ProgramId       program,
                                UniformLocation location,
                                GLsizei         count,
                                const GLfloat*  value) {
  ProgramUniform1fv(program, location, count, value)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform1iEXT(ProgramId program, UniformLocation location, GLint v0) {
  ProgramUniform1i(program, location, v0)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform1ivEXT(ProgramId       program,
                                UniformLocation location,
                                GLsizei         count,
                                const GLint*    value) {
  ProgramUniform1iv(program, location, count, value)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform1uiEXT(ProgramId program, UniformLocation location, GLuint v0) {
  ProgramUniform1ui(program, location, v0)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform1uivEXT(ProgramId       program,
                                 UniformLocation location,
                                 GLsizei         count,
                                 const GLuint*   value) {
  ProgramUniform1uiv(program, location, count, value)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform2fEXT(ProgramId       program,
                               UniformLocation location,
                               GLfloat         v0,
                               GLfloat         v1) {
  ProgramUniform2f(program, location, v0, v1)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform2fvEXT(ProgramId       program,
                                UniformLocation location,
                                GLsizei         count,
                                const GLfloat*  value) {
  ProgramUniform2fv(program, location, count, value)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform2iEXT(ProgramId program, UniformLocation location, GLint v0, GLint v1) {
  ProgramUniform2i(program, location, v0, v1)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform2ivEXT(ProgramId       program,
                                UniformLocation location,
                                GLsizei         count,
                                const GLint*    value) {
  ProgramUniform2iv(program, location, count, value)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform2uiEXT(ProgramId program, UniformLocation location, GLuint v0, GLuint v1) {
  ProgramUniform2ui(program, location, v0, v1)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform2uivEXT(ProgramId       program,
                                 UniformLocation location,
                                 GLsizei         count,
                                 const GLuint*   value) {
  ProgramUniform2uiv(program, location, count, value)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform3fEXT(ProgramId       program,
                               UniformLocation location,
                               GLfloat         v0,
                               GLfloat         v1,
                               GLfloat         v2) {
  ProgramUniform3f(program, location, v0, v1, v2)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform3fvEXT(ProgramId       program,
                                UniformLocation location,
                                GLsizei         count,
                                const GLfloat*  value) {
  ProgramUniform3fv(program, location, count, value)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform3iEXT(ProgramId       program,
                               UniformLocation location,
                               GLint           v0,
                               GLint           v1,
                               GLint           v2) {
  ProgramUniform3i(program, location, v0, v1, v2)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform3ivEXT(ProgramId       program,
                                UniformLocation location,
                                GLsizei         count,
                                const GLint*    value) {
  ProgramUniform3iv(program, location, count, value)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform3uiEXT(ProgramId       program,
                                UniformLocation location,
                                GLuint          v0,
                                GLuint          v1,
                                GLuint          v2) {
  ProgramUniform3ui(program, location, v0, v1, v2)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform3uivEXT(ProgramId       program,
                                 UniformLocation location,
                                 GLsizei         count,
                                 const GLuint*   value) {
  ProgramUniform3uiv(program, location, count, value)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform4fEXT(ProgramId       program,
                               UniformLocation location,
                               GLfloat         v0,
                               GLfloat         v1,
                               GLfloat         v2,
                               GLfloat         v3) {
  ProgramUniform4f(program, location, v0, v1, v2, v3)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform4fvEXT(ProgramId       program,
                                UniformLocation location,
                                GLsizei         count,
                                const GLfloat*  value) {
  ProgramUniform4fv(program, location, count, value)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform4iEXT(ProgramId       program,
                               UniformLocation location,
                               GLint           v0,
                               GLint           v1,
                               GLint           v2,
                               GLint           v3) {
  ProgramUniform4i(program, location, v0, v1, v2, v3)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform4ivEXT(ProgramId       program,
                                UniformLocation location,
                                GLsizei         count,
                                const GLint*    value) {
  ProgramUniform4iv(program, location, count, value)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform4uiEXT(ProgramId       program,
                                UniformLocation location,
                                GLuint          v0,
                                GLuint          v1,
                                GLuint          v2,
                                GLuint          v3) {
  ProgramUniform4ui(program, location, v0, v1, v2, v3)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniform4uivEXT(ProgramId       program,
                                 UniformLocation location,
                                 GLsizei         count,
                                 const GLuint*   value) {
  ProgramUniform4uiv(program, location, count, value)
}

@if(Extension.GL_NV_bindless_texture)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_bindless_texture.txt", Extension.GL_NV_bindless_texture)
cmd void glProgramUniformHandleui64NV(ProgramId program, UniformLocation location, GLuint64 value) {
  // TODO
}

@if(Extension.GL_NV_bindless_texture)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_bindless_texture.txt", Extension.GL_NV_bindless_texture)
cmd void glProgramUniformHandleui64vNV(ProgramId       program,
                                       UniformLocation location,
                                       GLsizei         count,
                                       const GLuint64* values) {
  // TODO
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniformMatrix2fvEXT(ProgramId       program,
                                      UniformLocation location,
                                      GLsizei         count,
                                      GLboolean       transpose,
                                      const GLfloat*  value) {
  ProgramUniformMatrix2fv(program, location, count, transpose, value)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniformMatrix2x3fvEXT(ProgramId       program,
                                        UniformLocation location,
                                        GLsizei         count,
                                        GLboolean       transpose,
                                        const GLfloat*  value) {
  ProgramUniformMatrix2x3fv(program, location, count, transpose, value)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniformMatrix2x4fvEXT(ProgramId       program,
                                        UniformLocation location,
                                        GLsizei         count,
                                        GLboolean       transpose,
                                        const GLfloat*  value) {
  ProgramUniformMatrix2x4fv(program, location, count, transpose, value)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniformMatrix3fvEXT(ProgramId       program,
                                      UniformLocation location,
                                      GLsizei         count,
                                      GLboolean       transpose,
                                      const GLfloat*  value) {
  ProgramUniformMatrix3fv(program, location, count, transpose, value)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniformMatrix3x2fvEXT(ProgramId       program,
                                        UniformLocation location,
                                        GLsizei         count,
                                        GLboolean       transpose,
                                        const GLfloat*  value) {
  ProgramUniformMatrix3x2fv(program, location, count, transpose, value)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniformMatrix3x4fvEXT(ProgramId       program,
                                        UniformLocation location,
                                        GLsizei         count,
                                        GLboolean       transpose,
                                        const GLfloat*  value) {
  ProgramUniformMatrix3x4fv(program, location, count, transpose, value)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniformMatrix4fvEXT(ProgramId       program,
                                      UniformLocation location,
                                      GLsizei         count,
                                      GLboolean       transpose,
                                      const GLfloat*  value) {
  ProgramUniformMatrix4fv(program, location, count, transpose, value)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniformMatrix4x2fvEXT(ProgramId       program,
                                        UniformLocation location,
                                        GLsizei         count,
                                        GLboolean       transpose,
                                        const GLfloat*  value) {
  ProgramUniformMatrix4x2fv(program, location, count, transpose, value)
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glProgramUniformMatrix4x3fvEXT(ProgramId       program,
                                        UniformLocation location,
                                        GLsizei         count,
                                        GLboolean       transpose,
                                        const GLfloat*  value) {
  ProgramUniformMatrix4x3fv(program, location, count, transpose, value)
}

@if(Extension.GL_EXT_debug_marker)
@push_user_marker
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_debug_marker.txt", Extension.GL_EXT_debug_marker)
cmd void glPushGroupMarkerEXT(GLsizei length, const GLchar* marker) {

  if length > 0 {
    read(marker[0:length])
  } else {
    _ = as!string(as!char*(marker)) // Read null-terminated string. TODO: Better syntax.
  }
}

@if(Extension.GL_EXT_disjoint_timer_query)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_disjoint_timer_query.txt", Extension.GL_EXT_disjoint_timer_query)
cmd void glQueryCounterEXT(QueryId query, GLenum target) {

}

@if(Extension.GL_EXT_raster_multisample || Extension.GL_EXT_texture_filter_minmax || Extension.GL_NV_framebuffer_mixed_samples)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_raster_multisample.txt", Extension.GL_EXT_raster_multisample)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_filter_minmax.txt", Extension.GL_EXT_texture_filter_minmax)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_framebuffer_mixed_samples.txt", Extension.GL_NV_framebuffer_mixed_samples)
cmd void glRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations) {
  // TODO
}

@if(Extension.GL_EXT_multiview_draw_buffers)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_multiview_draw_buffers.txt", Extension.GL_EXT_multiview_draw_buffers)
cmd void glReadBufferIndexedEXT(GLenum src, GLint index) {
  // TODO
}

@if(Extension.GL_NV_read_buffer)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_read_buffer.txt", Extension.GL_NV_read_buffer)
cmd void glReadBufferNV(GLenum mode) {
  // TODO
}

@if(Extension.GL_EXT_robustness)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_robustness.txt", Extension.GL_EXT_robustness)
cmd void glReadnPixelsEXT(GLint   x,
                          GLint   y,
                          GLsizei width,
                          GLsizei height,
                          GLenum  format,
                          GLenum  type,
                          GLsizei bufSize,
                          void*   data) {
  ReadnPixels(x, y, width, height, format, type, bufSize, data)
}

@if(Extension.GL_KHR_robustness)
@doc("https://www.khronos.org/registry/gles/extensions/KHR/KHR_robustness.txt", Extension.GL_KHR_robustness)
cmd void glReadnPixelsKHR(GLint   x,
                          GLint   y,
                          GLsizei width,
                          GLsizei height,
                          GLenum  format,
                          GLenum  type,
                          GLsizei bufSize,
                          void*   data) {
  ReadnPixels(x, y, width, height, format, type, bufSize, data)
}

@if(Extension.GL_ANGLE_framebuffer_multisample)
@doc("https://www.khronos.org/registry/gles/extensions/ANGLE/ANGLE_framebuffer_multisample.txt", Extension.GL_ANGLE_framebuffer_multisample)
cmd void glRenderbufferStorageMultisampleANGLE(GLenum  target,
                                               GLsizei samples,
                                               GLenum  internalformat,
                                               GLsizei width,
                                               GLsizei height) {
  // TODO
}

@if(Extension.GL_APPLE_framebuffer_multisample)
@doc("https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_framebuffer_multisample.txt", Extension.GL_APPLE_framebuffer_multisample)
cmd void glRenderbufferStorageMultisampleAPPLE(GLenum  target,
                                               GLsizei samples,
                                               GLenum  internalformat,
                                               GLsizei width,
                                               GLsizei height) {
  // TODO
}

@if(Extension.GL_EXT_multisampled_render_to_texture)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_multisampled_render_to_texture.txt", Extension.GL_EXT_multisampled_render_to_texture)
cmd void glRenderbufferStorageMultisampleEXT(GLenum  target,
                                             GLsizei samples,
                                             GLenum  internalformat,
                                             GLsizei width,
                                             GLsizei height) {
  RenderbufferStorageMultisample(target, samples, internalformat, width, height)
}

@if(Extension.GL_IMG_multisampled_render_to_texture)
@doc("https://www.khronos.org/registry/gles/extensions/IMG/IMG_multisampled_render_to_texture.txt", Extension.GL_IMG_multisampled_render_to_texture)
cmd void glRenderbufferStorageMultisampleIMG(GLenum  target,
                                             GLsizei samples,
                                             GLenum  internalformat,
                                             GLsizei width,
                                             GLsizei height) {
  // TODO
}

@if(Extension.GL_NV_framebuffer_multisample)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_framebuffer_multisample.txt", Extension.GL_NV_framebuffer_multisample)
cmd void glRenderbufferStorageMultisampleNV(GLenum  target,
                                            GLsizei samples,
                                            GLenum  internalformat,
                                            GLsizei width,
                                            GLsizei height) {
  RenderbufferStorageMultisample(target, samples, internalformat, width, height)
}

@if(Extension.GL_NV_sample_locations)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_sample_locations.txt", Extension.GL_NV_sample_locations)
cmd void glResolveDepthValuesNV() {
  // TODO
}

@if(Extension.GL_APPLE_framebuffer_multisample)
@doc("https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_framebuffer_multisample.txt", Extension.GL_APPLE_framebuffer_multisample)
cmd void glResolveMultisampleFramebufferAPPLE() {
  // TODO
}

@if(Extension.GL_OES_texture_border_clamp)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_texture_border_clamp.txt", Extension.GL_OES_texture_border_clamp)
cmd void glSamplerParameterIivOES(SamplerId sampler, GLenum pname, const GLint* param) {
  SamplerParameterIiv(sampler, pname, param)
}

@if(Extension.GL_OES_texture_border_clamp)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_texture_border_clamp.txt", Extension.GL_OES_texture_border_clamp)
cmd void glSamplerParameterIuivOES(SamplerId sampler, GLenum pname, const GLuint* param) {
  SamplerParameterIuiv(sampler, pname, param)
}

@if(Extension.GL_NV_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_viewport_array.txt", Extension.GL_NV_viewport_array)
cmd void glScissorArrayvNV(GLuint first, GLsizei count, const GLint* v) {
  // TODO
}

@if(Extension.GL_NV_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_viewport_array.txt", Extension.GL_NV_viewport_array)
cmd void glScissorIndexedNV(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) {
  // TODO
}

@if(Extension.GL_NV_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_viewport_array.txt", Extension.GL_NV_viewport_array)
cmd void glScissorIndexedvNV(GLuint index, const GLint* v) {
  // TODO
}

@if(Extension.GL_AMD_performance_monitor)
@doc("https://www.khronos.org/registry/gles/extensions/AMD/AMD_performance_monitor.txt", Extension.GL_AMD_performance_monitor)
cmd void glSelectPerfMonitorCountersAMD(GLuint    monitor,
                                        GLboolean enable,
                                        GLuint    group,
                                        GLint     numCounters,
                                        GLuint*   counterList) {
  // TODO
}

@if(Extension.GL_NV_fence)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_fence.txt", Extension.GL_NV_fence)
cmd void glSetFenceNV(GLuint fence, GLenum condition) {
  // TODO
}

@if(Extension.GL_QCOM_tiled_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/QCOM/QCOM_tiled_rendering.txt", Extension.GL_QCOM_tiled_rendering)
cmd void glStartTilingQCOM(GLuint     x,
                           GLuint     y,
                           GLuint     width,
                           GLuint     height,
                           GLbitfield preserveMask) {

}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glStencilFillPathInstancedNV(GLsizei        numPaths,
                                      GLenum         pathNameType,
                                      const void*    paths,
                                      GLuint         pathBase,
                                      GLenum         fillMode,
                                      GLuint         mask,
                                      GLenum         transformType,
                                      const GLfloat* transformValues) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glStencilStrokePathInstancedNV(GLsizei        numPaths,
                                        GLenum         pathNameType,
                                        const void*    paths,
                                        GLuint         pathBase,
                                        GLint          reference,
                                        GLuint         mask,
                                        GLenum         transformType,
                                        const GLfloat* transformValues) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glStencilThenCoverFillPathInstancedNV(GLsizei        numPaths,
                                               GLenum         pathNameType,
                                               const void*    paths,
                                               GLuint         pathBase,
                                               GLenum         fillMode,
                                               GLuint         mask,
                                               GLenum         coverMode,
                                               GLenum         transformType,
                                               const GLfloat* transformValues) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glStencilThenCoverStrokePathInstancedNV(GLsizei        numPaths,
                                                 GLenum         pathNameType,
                                                 const void*    paths,
                                                 GLuint         pathBase,
                                                 GLint          reference,
                                                 GLuint         mask,
                                                 GLenum         coverMode,
                                                 GLenum         transformType,
                                                 const GLfloat* transformValues) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glStencilThenCoverStrokePathNV(GLuint path,
                                        GLint  reference,
                                        GLuint mask,
                                        GLenum coverMode) {
  // TODO
}

@if(Extension.GL_NV_conservative_raster)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_conservative_raster.txt", Extension.GL_NV_conservative_raster)
cmd void glSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits) {
  // TODO
}

@if(Extension.GL_NV_fence)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_fence.txt", Extension.GL_NV_fence)
cmd GLboolean glTestFenceNV(GLuint fence) {
  // TODO
  return ?
}

@if(Extension.GL_OES_texture_buffer)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_texture_buffer.txt", Extension.GL_OES_texture_buffer)
cmd void glTexBufferOES(GLenum target, GLenum internalformat, BufferId buffer) {
  TexBuffer(target, internalformat, buffer)
}

@if(Extension.GL_OES_texture_buffer)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_texture_buffer.txt", Extension.GL_OES_texture_buffer)
cmd void glTexBufferRangeOES(GLenum     target,
                             GLenum     internalformat,
                             BufferId   buffer,
                             GLintptr   offset,
                             GLsizeiptr size) {
  TexBufferRange(target, internalformat, buffer, offset, size)
}

@if(Extension.GL_OES_texture_3D)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_texture_3D.txt", Extension.GL_OES_texture_3D)
cmd void glTexImage3DOES(GLenum         target,
                         GLint          level,
                         GLenum         internalformat,
                         GLsizei        width,
                         GLsizei        height,
                         GLsizei        depth,
                         GLint          border,
                         GLenum         format,
                         GLenum         type,
                         TexturePointer pixels) {
  // TODO: spec - 'internalformat' changed type
  TexImage3D(target, level, as!GLint(internalformat), width, height, depth, border, format, type, pixels)
}

@if(Extension.GL_EXT_sparse_texture)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_sparse_texture.txt", Extension.GL_EXT_sparse_texture)
cmd void glTexPageCommitmentEXT(GLenum    target,
                                GLint     level,
                                GLint     xoffset,
                                GLint     yoffset,
                                GLint     zoffset,
                                GLsizei   width,
                                GLsizei   height,
                                GLsizei   depth,
                                GLboolean commit) {
  // TODO
}

@if(Extension.GL_OES_texture_border_clamp)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_texture_border_clamp.txt", Extension.GL_OES_texture_border_clamp)
cmd void glTexParameterIivOES(GLenum target, GLenum pname, const GLint* params) {
  TexParameterIiv(target, pname, params)
}

@if(Extension.GL_OES_texture_border_clamp)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_texture_border_clamp.txt", Extension.GL_OES_texture_border_clamp)
cmd void glTexParameterIuivOES(GLenum target, GLenum pname, const GLuint* params) {
  TexParameterIuiv(target, pname, params)
}

@if(Extension.GL_EXT_texture_storage)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_storage.txt", Extension.GL_EXT_texture_storage)
cmd void glTexStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {

}

@if(Extension.GL_EXT_texture_storage)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_storage.txt", Extension.GL_EXT_texture_storage)
cmd void glTexStorage2DEXT(GLenum  target,
                           GLsizei levels,
                           GLenum  internalformat,
                           GLsizei width,
                           GLsizei height) {
  TexStorage2D(target, levels, internalformat, width, height)
}

@if(Extension.GL_EXT_texture_storage)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_storage.txt", Extension.GL_EXT_texture_storage)
cmd void glTexStorage3DEXT(GLenum  target,
                           GLsizei levels,
                           GLenum  internalformat,
                           GLsizei width,
                           GLsizei height,
                           GLsizei depth) {
  TexStorage3D(target, levels, internalformat, width, height, depth)
}

@if(Extension.GL_OES_texture_3D)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_texture_3D.txt", Extension.GL_OES_texture_3D)
cmd void glTexSubImage3DOES(GLenum         target,
                            GLint          level,
                            GLint          xoffset,
                            GLint          yoffset,
                            GLint          zoffset,
                            GLsizei        width,
                            GLsizei        height,
                            GLsizei        depth,
                            GLenum         format,
                            GLenum         type,
                            TexturePointer pixels) {
  TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
}

@if(Extension.GL_EXT_texture_storage)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_storage.txt", Extension.GL_EXT_texture_storage)
cmd void glTextureStorage1DEXT(TextureId texture,
                               GLenum    target,
                               GLsizei   levels,
                               GLenum    internalformat,
                               GLsizei   width) {

}

@if(Extension.GL_EXT_texture_storage)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_storage.txt", Extension.GL_EXT_texture_storage)
cmd void glTextureStorage2DEXT(TextureId texture,
                               GLenum    target,
                               GLsizei   levels,
                               GLenum    internalformat,
                               GLsizei   width,
                               GLsizei   height) {

}

@if(Extension.GL_EXT_texture_storage)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_storage.txt", Extension.GL_EXT_texture_storage)
cmd void glTextureStorage3DEXT(TextureId texture,
                               GLenum    target,
                               GLsizei   levels,
                               GLenum    internalformat,
                               GLsizei   width,
                               GLsizei   height,
                               GLsizei   depth) {

}

@if(Extension.GL_EXT_texture_view)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_texture_view.txt", Extension.GL_EXT_texture_view)
cmd void glTextureViewEXT(TextureId texture,
                          GLenum    target,
                          GLuint    origtexture,
                          GLenum    internalformat,
                          GLuint    minlevel,
                          GLuint    numlevels,
                          GLuint    minlayer,
                          GLuint    numlayers) {
  // TODO
}

@if(Extension.GL_OES_texture_view)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_texture_view.txt", Extension.GL_OES_texture_view)
cmd void glTextureViewOES(TextureId texture,
                          GLenum    target,
                          GLuint    origtexture,
                          GLenum    internalformat,
                          GLuint    minlevel,
                          GLuint    numlevels,
                          GLuint    minlayer,
                          GLuint    numlayers) {
  // TODO
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glTransformPathNV(GLuint         resultPath,
                           GLuint         srcPath,
                           GLenum         transformType,
                           const GLfloat* transformValues) {
  // TODO
}

@if(Extension.GL_NV_bindless_texture)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_bindless_texture.txt", Extension.GL_NV_bindless_texture)
cmd void glUniformHandleui64NV(UniformLocation location, GLuint64 value) {
  // TODO
}

@if(Extension.GL_NV_bindless_texture)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_bindless_texture.txt", Extension.GL_NV_bindless_texture)
cmd void glUniformHandleui64vNV(UniformLocation location, GLsizei count, const GLuint64* value) {
  // TODO
}

@if(Extension.GL_NV_non_square_matrices)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_non_square_matrices.txt", Extension.GL_NV_non_square_matrices)
cmd void glUniformMatrix2x3fvNV(UniformLocation location,
                                GLsizei         count,
                                GLboolean       transpose,
                                const GLfloat*  value) {
  UniformMatrix2x3fv(location, count, transpose, value)
}

@if(Extension.GL_NV_non_square_matrices)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_non_square_matrices.txt", Extension.GL_NV_non_square_matrices)
cmd void glUniformMatrix2x4fvNV(UniformLocation location,
                                GLsizei         count,
                                GLboolean       transpose,
                                const GLfloat*  value) {
  UniformMatrix2x4fv(location, count, transpose, value)
}

@if(Extension.GL_NV_non_square_matrices)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_non_square_matrices.txt", Extension.GL_NV_non_square_matrices)
cmd void glUniformMatrix3x2fvNV(UniformLocation location,
                                GLsizei         count,
                                GLboolean       transpose,
                                const GLfloat*  value) {
  UniformMatrix3x2fv(location, count, transpose, value)
}

@if(Extension.GL_NV_non_square_matrices)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_non_square_matrices.txt", Extension.GL_NV_non_square_matrices)
cmd void glUniformMatrix3x4fvNV(UniformLocation location,
                                GLsizei         count,
                                GLboolean       transpose,
                                const GLfloat*  value) {
  UniformMatrix3x4fv(location, count, transpose, value)
}

@if(Extension.GL_NV_non_square_matrices)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_non_square_matrices.txt", Extension.GL_NV_non_square_matrices)
cmd void glUniformMatrix4x2fvNV(UniformLocation location,
                                GLsizei         count,
                                GLboolean       transpose,
                                const GLfloat*  value) {
  UniformMatrix4x2fv(location, count, transpose, value)
}

@if(Extension.GL_NV_non_square_matrices)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_non_square_matrices.txt", Extension.GL_NV_non_square_matrices)
cmd void glUniformMatrix4x3fvNV(UniformLocation location,
                                GLsizei         count,
                                GLboolean       transpose,
                                const GLfloat*  value) {
  UniformMatrix4x3fv(location, count, transpose, value)
}

@if(Extension.GL_OES_mapbuffer)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_mapbuffer.txt", Extension.GL_OES_mapbuffer)
cmd GLboolean glUnmapBufferOES(GLenum target) {
  UnmapBuffer(target)
  return ?
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glUseProgramStagesEXT(PipelineId pipeline, GLbitfield stages, ProgramId program) {
  // TODO
}

@if(Extension.GL_EXT_separate_shader_objects)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_separate_shader_objects.gles.txt", Extension.GL_EXT_separate_shader_objects)
cmd void glValidateProgramPipelineEXT(PipelineId pipeline) {
  // TODO
}

@if(Extension.GL_ANGLE_instanced_arrays)
@doc("https://www.khronos.org/registry/gles/extensions/ANGLE/ANGLE_instanced_arrays.txt", Extension.GL_ANGLE_instanced_arrays)
cmd void glVertexAttribDivisorANGLE(AttributeLocation index, GLuint divisor) {
  VertexAttribDivisor(index, divisor)
}

@if(Extension.GL_EXT_instanced_arrays)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_instanced_arrays.txt", Extension.GL_EXT_instanced_arrays)
cmd void glVertexAttribDivisorEXT(AttributeLocation index, GLuint divisor) {
  VertexAttribDivisor(index, divisor)
}

@if(Extension.GL_NV_instanced_arrays)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_instanced_arrays.txt", Extension.GL_NV_instanced_arrays)
cmd void glVertexAttribDivisorNV(AttributeLocation index, GLuint divisor) {
  VertexAttribDivisor(index, divisor)
}

@if(Extension.GL_NV_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_viewport_array.txt", Extension.GL_NV_viewport_array)
cmd void glViewportArrayvNV(GLuint first, GLsizei count, const GLfloat* v) {
  // TODO
}

@if(Extension.GL_NV_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_viewport_array.txt", Extension.GL_NV_viewport_array)
cmd void glViewportIndexedfNV(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {
  // TODO
}

@if(Extension.GL_NV_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_viewport_array.txt", Extension.GL_NV_viewport_array)
cmd void glViewportIndexedfvNV(GLuint index, const GLfloat* v) {
  // TODO
}

@if(Extension.GL_APPLE_sync)
@doc("https://www.khronos.org/registry/gles/extensions/APPLE/APPLE_sync.txt", Extension.GL_APPLE_sync)
cmd void glWaitSyncAPPLE(GLsync sync, GLbitfield flag, GLuint64 timeout) {
  WaitSync(sync, flag, timeout)
}

@if(Extension.GL_NV_path_rendering)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_path_rendering.txt", Extension.GL_NV_path_rendering)
cmd void glWeightPathsNV(GLuint         resultPath,
                         GLsizei        numPaths,
                         const GLuint*  paths,
                         const GLfloat* weights) {
  // TODO
}

@if(Extension.GL_EXT_shader_pixel_local_storage2)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_shader_pixel_local_storage2.txt", Extension.GL_EXT_shader_pixel_local_storage2)
cmd void glClearPixelLocalStorageuiEXT(GLsizei offset, GLsizei n, const GLuint* values) {
}

@if(Extension.GL_EXT_clear_texture)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_clear_texture.txt", Extension.GL_EXT_clear_texture)
cmd void glClearTexImageEXT(GLuint texture, GLint level, GLenum format, GLenum type, const void* data) {
}

@if(Extension.GL_EXT_clear_texture)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_clear_texture.txt", Extension.GL_EXT_clear_texture)
cmd void glClearTexSubImageEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* data) {
}

@if(Extension.GL_NV_conservative_raster_pre_snap_triangles)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_conservative_raster_pre_snap_triangles.txt", Extension.GL_NV_conservative_raster_pre_snap_triangles)
cmd void glConservativeRasterParameteriNV(GLenum pname, GLint param) {
}

@if(Extension.GL_OES_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_viewport_array.txt", Extension.GL_OES_viewport_array)
cmd void glDepthRangeArrayfvOES(GLuint first, GLsizei count, const GLfloat* v) {
}

@if(Extension.GL_OES_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_viewport_array.txt", Extension.GL_OES_viewport_array)
cmd void glDepthRangeIndexedfOES(GLuint index, GLfloat n, GLfloat f) {
}

@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@if(Extension.GL_EXT_draw_transform_feedback)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_draw_transform_feedback.txt", Extension.GL_EXT_draw_transform_feedback)
cmd void glDrawTransformFeedbackEXT(GLenum mode, GLuint id) {
}

@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@if(Extension.GL_EXT_draw_transform_feedback)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_draw_transform_feedback.txt", Extension.GL_EXT_draw_transform_feedback)
cmd void glDrawTransformFeedbackInstancedEXT(GLenum mode, GLuint id, GLsizei instancecount) {
}

@if(Extension.GL_EXT_shader_pixel_local_storage2)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_shader_pixel_local_storage2.txt", Extension.GL_EXT_shader_pixel_local_storage2)
cmd void glFramebufferPixelLocalStorageSizeEXT(GLuint target, GLsizei size) {
}

@if(Extension.GL_IMG_framebuffer_downsample)
@doc("https://www.khronos.org/registry/gles/extensions/IMG/IMG_framebuffer_downsample.txt", Extension.GL_IMG_framebuffer_downsample)
cmd void glFramebufferTexture2DDownsampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale) {
}

@if(Extension.GL_IMG_framebuffer_downsample)
@doc("https://www.khronos.org/registry/gles/extensions/IMG/IMG_framebuffer_downsample.txt", Extension.GL_IMG_framebuffer_downsample)
cmd void glFramebufferTextureLayerDownsampleIMG(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale) {
}

@if(Extension.GL_OVR_multiview_multisampled_render_to_texture)
@doc("https://www.khronos.org/registry/gles/extensions/OVR/OVR_multiview_multisampled_render_to_texture.txt", Extension.GL_OVR_multiview_multisampled_render_to_texture)
cmd void glFramebufferTextureMultisampleMultiviewOVR(GLenum target, GLenum attachment, TextureId texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews) {
  // TODO: Handle the multi-sampling instead of ignoring it.
  FramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews)
}

@if(Extension.GL_OES_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_viewport_array.txt", Extension.GL_OES_viewport_array)
cmd void glGetFloati_vOES(GLenum target, GLuint index, GLfloat* data) {
}

@if(Extension.GL_EXT_shader_pixel_local_storage2)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_shader_pixel_local_storage2.txt", Extension.GL_EXT_shader_pixel_local_storage2)
cmd GLsizei glGetFramebufferPixelLocalStorageSizeEXT(GLuint target) {
  return ?
}

@if(Extension.GL_IMG_bindless_texture)
@doc("https://www.khronos.org/registry/gles/extensions/IMG/IMG_bindless_texture.txt", Extension.GL_IMG_bindless_texture)
cmd GLuint64 glGetTextureHandleIMG(GLuint texture) {
  return ?
}

@if(Extension.GL_IMG_bindless_texture)
@doc("https://www.khronos.org/registry/gles/extensions/IMG/IMG_bindless_texture.txt", Extension.GL_IMG_bindless_texture)
cmd GLuint64 glGetTextureSamplerHandleIMG(GLuint texture, GLuint sampler) {
  return ?
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT* params) {
}

@if(Extension.GL_EXT_polygon_offset_clamp)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_polygon_offset_clamp.txt", Extension.GL_EXT_polygon_offset_clamp)
cmd void glPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT* value) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT* value) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT* value) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT* value) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value) {
}

@if(Extension.GL_IMG_bindless_texture)
@doc("https://www.khronos.org/registry/gles/extensions/IMG/IMG_bindless_texture.txt", Extension.GL_IMG_bindless_texture)
cmd void glProgramUniformHandleui64IMG(GLuint program, GLint location, GLuint64 value) {
}

@if(Extension.GL_IMG_bindless_texture)
@doc("https://www.khronos.org/registry/gles/extensions/IMG/IMG_bindless_texture.txt", Extension.GL_IMG_bindless_texture)
cmd void glProgramUniformHandleui64vIMG(GLuint program, GLint location, GLsizei count, const GLuint64* values) {
}

@if(Extension.GL_OES_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_viewport_array.txt", Extension.GL_OES_viewport_array)
cmd void glScissorArrayvOES(GLuint first, GLsizei count, const GLint* v) {
}

@if(Extension.GL_OES_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_viewport_array.txt", Extension.GL_OES_viewport_array)
cmd void glScissorIndexedOES(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) {
}

@if(Extension.GL_OES_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_viewport_array.txt", Extension.GL_OES_viewport_array)
cmd void glScissorIndexedvOES(GLuint index, const GLint* v) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glUniform1i64NV(GLint location, GLint64EXT x) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT* value) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glUniform1ui64NV(GLint location, GLuint64EXT x) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT* value) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT* value) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT* value) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT* value) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT* value) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT* value) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
}

@if(Extension.GL_NV_gpu_shader5)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_gpu_shader5.txt", Extension.GL_NV_gpu_shader5)
cmd void glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT* value) {
}

@if(Extension.GL_IMG_bindless_texture)
@doc("https://www.khronos.org/registry/gles/extensions/IMG/IMG_bindless_texture.txt", Extension.GL_IMG_bindless_texture)
cmd void glUniformHandleui64IMG(GLint location, GLuint64 value) {
}

@if(Extension.GL_IMG_bindless_texture)
@doc("https://www.khronos.org/registry/gles/extensions/IMG/IMG_bindless_texture.txt", Extension.GL_IMG_bindless_texture)
cmd void glUniformHandleui64vIMG(GLint location, GLsizei count, const GLuint64* value) {
}

@if(Extension.GL_OES_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_viewport_array.txt", Extension.GL_OES_viewport_array)
cmd void glViewportArrayvOES(GLuint first, GLsizei count, const GLfloat* v) {
}

@if(Extension.GL_OES_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_viewport_array.txt", Extension.GL_OES_viewport_array)
cmd void glViewportIndexedfOES(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {
}

@if(Extension.GL_OES_viewport_array)
@doc("https://www.khronos.org/registry/gles/extensions/OES/OES_viewport_array.txt", Extension.GL_OES_viewport_array)
cmd void glViewportIndexedfvOES(GLuint index, const GLfloat* v) {
}

@if(Extension.GL_NV_viewport_swizzle)
@doc("https://www.khronos.org/registry/gles/extensions/NV/NV_viewport_swizzle.txt", Extension.GL_NV_viewport_swizzle)
cmd void glViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) {
}

@if(Extension.GL_EXT_window_rectangles)
@doc("https://www.khronos.org/registry/gles/extensions/EXT/EXT_window_rectangles.txt", Extension.GL_EXT_window_rectangles)
cmd void glWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint* box) {
}
