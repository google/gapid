// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

extern void onGlError(GLenum v)

sub void supportsBits(GLbitfield seenBits, GLbitfield validBits) {
  CheckEQ!GLbitfield((seenBits & validBits), seenBits)
}

sub void glErrorInvalidEnum(GLenum value) {
  glErrorInvalidEnumMsg(new!ERR_INVALID_ENUM(value: as!u32(value)))
}

sub void glErrorInvalidEnumMsg(message m) {
  onGlError(GL_INVALID_ENUM)
  _ = newMsg(SEVERITY_ERROR, m)
  abort
}

sub void glErrorInvalidValue!T(T value) {
  glErrorInvalidValueMsg(new!ERR_INVALID_VALUE(value: as!s64(value)))
}

sub void glErrorInvalidObjectName!T(T value) {
  glErrorInvalidValueMsg(new!ERR_INVALID_OBJECT_NAME(value: as!s64(value)))
}

sub void glErrorInvalidValueMsg(message m) {
  onGlError(GL_INVALID_VALUE)
  _ = newMsg(SEVERITY_ERROR, m)
  abort
}

sub void glErrorInvalidOperation() {
  glErrorInvalidOperationMsg(new!ERR_INVALID_OPERATION())
}

sub void glErrorInvalidOperationMsg(message m) {
  onGlError(GL_INVALID_OPERATION)
  _ = newMsg(SEVERITY_ERROR, m)
  abort
}

sub void CheckEQ!T(T value, T constraint) {
  if !(as!s64(value) == as!s64(constraint)) {
    glErrorInvalidValueMsg(new!ERR_INVALID_VALUE_CHECK_EQ(value: as!s64(value), constraint: as!s64(constraint)))
  }
}

sub void CheckNE!T(T value, T constraint) {
  if !(as!s64(value) != as!s64(constraint)) {
    glErrorInvalidValueMsg(new!ERR_INVALID_VALUE_CHECK_NE(value: as!s64(value), constraint: as!s64(constraint)))
  }
}

sub void CheckGE!T(T value, T constraint) {
  if !(as!s64(value) >= as!s64(constraint)) {
    glErrorInvalidValueMsg(new!ERR_INVALID_VALUE_CHECK_GE(value: as!s64(value), constraint: as!s64(constraint)))
  }
}

sub void CheckGT!T(T value, T constraint) {
  if !(as!s64(value) > as!s64(constraint)) {
    glErrorInvalidValueMsg(new!ERR_INVALID_VALUE_CHECK_GT(value: as!s64(value), constraint: as!s64(constraint)))
  }
}

sub void CheckLE!T(T value, T constraint) {
  if !(as!s64(value) <= as!s64(constraint)) {
    glErrorInvalidValueMsg(new!ERR_INVALID_VALUE_CHECK_LE(value: as!s64(value), constraint: as!s64(constraint)))
  }
}

sub void CheckLT!T(T value, T constraint) {
  if !(as!s64(value) < as!s64(constraint)) {
    glErrorInvalidValueMsg(new!ERR_INVALID_VALUE_CHECK_LT(value: as!s64(value), constraint: as!s64(constraint)))
  }
}

sub void CheckLocationLT!T(T value, T constraint) {
  if !(as!s64(value) < as!s64(constraint)) {
    glErrorInvalidValueMsg(new!ERR_INVALID_VALUE_CHECK_LOCATION_LT(value: as!s64(value), constraint: as!s64(constraint)))
  }
}

sub void CheckCountGE!T(T value, T constraint) {
  if !(as!s64(value) >= as!s64(constraint)) {
    glErrorInvalidValueMsg(new!ERR_INVALID_VALUE_CHECK_COUNT_GE(value: as!s64(value), constraint: as!s64(constraint)))
  }
}

sub void CheckSizeGE!T(T value, T constraint) {
  if !(as!s64(value) >= as!s64(constraint)) {
    glErrorInvalidValueMsg(new!ERR_INVALID_VALUE_CHECK_SIZE_GE(value: as!s64(value), constraint: as!s64(constraint)))
  }
}

sub void glErrorInvalidOperation_ObjectDoesNotExist!T(T id) {
  glErrorInvalidOperationMsg(new!ERR_INVALID_OPERATION_OBJECT_DOES_NOT_EXIST(id: as!u64(id)))
}
