// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// TODO: What if the index buffer is written by shader?

sub void checkPrimitiveType(GLenum draw_mode) {
  switch (draw_mode) {
    case GL_LINES, GL_LINE_LOOP, GL_LINE_STRIP, GL_POINTS, GL_TRIANGLES, GL_TRIANGLE_FAN,
        GL_TRIANGLE_STRIP: {
      // version 2.0
    }
    @if(Version.GLES32)
    case GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_PATCHES, GL_TRIANGLES_ADJACENCY,
        GL_TRIANGLE_STRIP_ADJACENCY: {
    }
    default: {
      glErrorInvalidEnum(draw_mode)
    }
  }
}

sub void checkIndicesType(GLenum indices_type) {
  switch (indices_type) {
    case GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT: {
      // version 2.0
    }
    @if(Version.GLES30)
    case GL_UNSIGNED_INT: {
    }
    default: {
      glErrorInvalidEnum(indices_type)
    }
  }
}

sub bool isDrawCall() {
  return !isTransformFeedback()
}

sub bool isTransformFeedback() {
  ctx := GetContext()
  return ctx.Bound.TransformFeedback.Active == GL_TRUE
}

@if(Version.GLES10)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDrawArrays.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glDrawArrays.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glDrawArrays.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDrawArrays.xhtml", Version.GLES32)
cmd void glDrawArrays(GLenum draw_mode, GLint first_index, GLsizei indices_count) {
  checkPrimitiveType(draw_mode)
  CheckGE!GLint(first_index, 0) // "Recommended behaviour"
  CheckCountGE!GLsizei(indices_count, 0)
  ctx := GetContext()
  ReadVertexArrays(ctx, as!u32(first_index), as!u32(indices_count), 1)
  WriteGPUFramebufferData(ctx)
  DrawCommandDependencies(ctx, as!u32(indices_count), 1)
}

// See GLES 3.2 spec '10.5 Drawing Commands Using Vertex Arrays'
class DrawArraysIndirectCommand {
  u32 count
  u32 instanceCount
  u32 first
  u32 reservedMustBeZero
}

@if(Version.GLES31)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glDrawArraysIndirect.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDrawArraysIndirect.xhtml", Version.GLES32)
cmd void glDrawArraysIndirect(GLenum draw_mode, const void* indirect) {
  CheckNonDefaultVertexArrayBound()
  ctx := GetContext()
  if ctx.Bound.DrawIndirectBuffer == null { glErrorInvalidOperation() }
  // TODO: INVALID_OPERATION error if the command would source data beyond the end of the buffer object.
  // TODO: CheckEQ(as!u64(indirect) % 4, 0)
  command := as!DrawArraysIndirectCommand*(indirect)[0]
  DrawArraysInstanced(draw_mode, as!GLint(command.first), as!GLsizei(command.count), as!GLsizei(command.instanceCount))
}

@if(Version.GLES30)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glDrawArraysInstanced.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glDrawArraysInstanced.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDrawArraysInstanced.xhtml", Version.GLES32)
cmd void glDrawArraysInstanced(GLenum draw_mode, GLint first_index, GLsizei indices_count, GLsizei instance_count) {
  DrawArraysInstanced(draw_mode, first_index, indices_count, instance_count)
}

sub void DrawArraysInstanced(GLenum draw_mode, GLint first_index, GLsizei indices_count, GLsizei instance_count) {
  checkPrimitiveType(draw_mode)
  CheckGE!GLint(first_index, 0) // "Recommended behaviour"
  CheckCountGE!GLsizei(indices_count, 0)
  CheckCountGE!GLsizei(instance_count, 0)
  ctx := GetContext()
  ReadVertexArrays(ctx, as!u32(first_index), as!u32(indices_count), as!u32(instance_count))
  WriteGPUFramebufferData(ctx)
  DrawCommandDependencies(ctx, as!u32(indices_count), as!u32(instance_count))
}

sub void DrawElements(ref!Context    ctx,
                      GLenum         draw_mode,
                      GLsizei        indices_count,
                      GLenum         indices_type,
                      IndicesPointer indices,
                      GLsizei        instance_count,
                      GLint          base_vertex) {
  checkPrimitiveType(draw_mode)
  CheckCountGE!GLsizei(indices_count, 0) // SPEC: missing in pdf
  checkIndicesType(indices_type)
  CheckCountGE!GLsizei(instance_count, 0) // SPEC: missing in pdf
  if indices_count > 0 {
    count := as!u32(indices_count)
    index_buffer := ctx.Bound.VertexArray.ElementArrayBuffer
    if (index_buffer != null) {
      // Element array buffer bound - indices is an offset on the buffer.
      index_data := index_buffer.Data
      offset := as!u64(indices)

      // Read the vertices
      index_size := IndexSize(indices_type)
      index_start := min!u64(offset, len(index_data)) // Clamp offset
      index_end := min!u64(offset+as!u64(index_size*count), len(index_data)) // Clamp count
      limits := IndexLimits(index_data[index_start:index_end], as!s32(index_size))
      ReadVertexArrays(ctx, limits.first + as!u32(base_vertex), limits.count, as!u32(instance_count))

      // No need to read the indices - they're already in a GPU-side buffer.
    } else {
      // No element array buffer bound - indices is a pointer.
      index_data := as!u8*(indices)

      // Read the vertices
      index_size := IndexSize(indices_type)
      limits := IndexLimits(index_data[0:index_size*count], as!s32(index_size))
      ReadVertexArrays(ctx, limits.first + as!u32(base_vertex), limits.count, as!u32(instance_count))

      // Read the indices
      read(index_data[0:count * IndexSize(indices_type)])
    }
  }
  WriteGPUFramebufferData(ctx)
  DrawCommandDependencies(ctx, as!u32(indices_count), as!u32(instance_count))
}

@if(Version.GLES10)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDrawElements.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glDrawElements.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glDrawElements.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDrawElements.xhtml", Version.GLES32)
cmd void glDrawElements(GLenum         draw_mode,
                        GLsizei        indices_count,
                        GLenum         indices_type,
                        IndicesPointer indices) {
  ctx := GetContext()
  DrawElements(ctx, draw_mode, indices_count, indices_type, indices, 1, 0)
}

@if(Version.GLES32)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDrawElementsBaseVertex.xhtml", Version.GLES32)
cmd void glDrawElementsBaseVertex(GLenum         draw_mode,
                                  GLsizei        indices_count,
                                  GLenum         indices_type,
                                  IndicesPointer indices,
                                  GLint          base_vertex) {
  DrawElementsBaseVertex(draw_mode, indices_count, indices_type, indices, base_vertex)
}

sub void DrawElementsBaseVertex(GLenum draw_mode, GLsizei indices_count, GLenum indices_type, IndicesPointer indices, GLint base_vertex) {
  ctx := GetContext()
  DrawElements(ctx, draw_mode, indices_count, indices_type, indices, 1, base_vertex)
}

// See GLES 3.2 spec '10.5 Drawing Commands Using Vertex Arrays'
class DrawElementsIndirectCommand {
  u32 count
  u32 instanceCount
  u32 firstIndex
  s32 baseVertex
  u32 reservedMustBeZero
}

@if(Version.GLES31)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glDrawElementsIndirect.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDrawElementsIndirect.xhtml", Version.GLES32)
cmd void glDrawElementsIndirect(GLenum draw_mode, GLenum indices_type, const void* indirect) {
  checkIndicesType(indices_type)
  CheckNonDefaultVertexArrayBound()
  // TODO: Error if enabled array is not bound or is mapped.
  ctx := GetContext()
  if ctx.Bound.DrawIndirectBuffer == null { glErrorInvalidOperation() }
  // TODO: INVALID_OPERATION error if the command would source data beyond the end of the buffer object.
  // TODO: CheckEQ(as!u64(indirect) % 4, 0)

  command := as!DrawElementsIndirectCommand*(indirect)[0]
  // TODO: The following is the actual sepc implementation, yet it does not compile because of an seemly impossible cast.
  //
  // size_of_type := switch(indices_type) {
  //   case GL_UNSIGNED_BYTE:  { 1 }
  //   case GL_UNSIGNED_SHORT: { 2 }
  //   case GL_UNSIGNED_INT:   { 4 }
  // }
  //
  // ## The cast as!void*() below fails:
  // DrawElementsInstancedBaseVertex(draw_mode, as!GLsizei(command.count), indices_type, as!void*(command.firstIndex * as!u32(size_of_type)), as!GLsizei(command.instanceCount), as!GLint(command.baseVertex))

  // TODO: once the cast issue above is fixed, we should be able to get rid of these three calls:
  checkPrimitiveType(draw_mode)
  WriteGPUFramebufferData(ctx)
  _ = command // Necessary to use 'command' here, because DrawCommandDependencies() is @spy_disabled
  DrawCommandDependencies(ctx, command.count, command.instanceCount)
}

@if(Version.GLES30)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glDrawElementsInstanced.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glDrawElementsInstanced.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDrawElementsInstanced.xhtml", Version.GLES32)
cmd void glDrawElementsInstanced(GLenum         draw_mode,
                                 GLsizei        indices_count,
                                 GLenum         indices_type,
                                 IndicesPointer indices,
                                 GLsizei        instance_count) {
  DrawElementsInstanced(draw_mode, indices_count, indices_type, indices, instance_count)
}

sub void DrawElementsInstanced(GLenum draw_mode, GLsizei indices_count, GLenum indices_type, IndicesPointer indices, GLsizei instance_count) {
  ctx := GetContext()
  DrawElements(ctx, draw_mode, indices_count, indices_type, indices, instance_count, 0)
}

@if(Version.GLES32)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDrawElementsInstancedBaseVertex.xhtml", Version.GLES32)
cmd void glDrawElementsInstancedBaseVertex(GLenum         draw_mode,
                                           GLsizei        indices_count,
                                           GLenum         indices_type,
                                           IndicesPointer indices,
                                           GLsizei        instance_count,
                                           GLint          base_vertex) {
  DrawElementsInstancedBaseVertex(draw_mode, indices_count, indices_type, indices, instance_count, base_vertex)
}

sub void DrawElementsInstancedBaseVertex(GLenum draw_mode, GLsizei indices_count, GLenum indices_type, IndicesPointer indices, GLsizei instance_count, GLint base_vertex) {
  ctx := GetContext()
  DrawElements(ctx, draw_mode, indices_count, indices_type, indices, instance_count, base_vertex)
}

@if(Version.GLES30)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glDrawRangeElements.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glDrawRangeElements.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDrawRangeElements.xhtml", Version.GLES32)
cmd void glDrawRangeElements(GLenum         draw_mode,
                             GLuint         start,
                             GLuint         end,
                             GLsizei        indices_count,
                             GLenum         indices_type,
                             IndicesPointer indices) {
  CheckGE!GLuint(end, start)
  ctx := GetContext()
  DrawElements(ctx, draw_mode, indices_count, indices_type, indices, 1, 0)
}

@if(Version.GLES32)
@draw_call(isDrawCall())
@transform_feedback(isTransformFeedback())
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDrawRangeElementsBaseVertex.xhtml", Version.GLES32)
cmd void glDrawRangeElementsBaseVertex(GLenum         draw_mode,
                                       GLuint         start,
                                       GLuint         end,
                                       GLsizei        indices_count,
                                       GLenum         indices_type,
                                       IndicesPointer indices,
                                       GLint          base_vertex) {
  DrawRangeElementsBaseVertex(draw_mode, start, end, indices_count, indices_type, indices, base_vertex)
}

sub void DrawRangeElementsBaseVertex(GLenum draw_mode, GLuint start, GLuint end, GLsizei indices_count, GLenum indices_type, IndicesPointer indices, GLint base_vertex) {
  CheckGE!GLuint(end, start)
  ctx := GetContext()
  DrawElements(ctx, draw_mode, indices_count, indices_type, indices, 1, base_vertex)
}

@if(Version.GLES32)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glPatchParameteri.xhtml", Version.GLES32)
cmd void glPatchParameteri(GLenum pname, GLint value) {
  PatchParameteri(pname, value)
}

// TODO: Move to misc?
sub void PatchParameteri(GLenum pname, GLint value) {
  if pname != GL_PATCH_VERTICES { glErrorInvalidEnum(pname) }
  ctx := GetContext()
  ctx.Vertex.PatchVertices = value
}

@if(Version.GLES32)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glPrimitiveBoundingBox.xhtml", Version.GLES32)
cmd void glPrimitiveBoundingBox(GLfloat minX,
                                GLfloat minY,
                                GLfloat minZ,
                                GLfloat minW,
                                GLfloat maxX,
                                GLfloat maxY,
                                GLfloat maxZ,
                                GLfloat maxW) {
  PrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW)
}

// TODO: Move to rasterization?
sub void PrimitiveBoundingBox(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) {
  ctx := GetContext()
  ctx.Rasterization.PrimitiveBoundingBox.Min = Vec4f(minX, minY, minZ, minW)
  ctx.Rasterization.PrimitiveBoundingBox.Max = Vec4f(maxX, maxY, maxZ, maxW)
}

// WriteGPUFramebufferAttachment updates the data of the given FramebufferAttachment.
sub void WriteGPUFramebufferAttachment(FramebufferAttachment a) {
  numViews := a.NumViews
  for view in (0 .. numViews) {
    layer := a.TextureLayer + as!GLint(view)
    img := GetTextureImage(a.Texture, a.TextureLevel, layer)
    if img != null {
      if img.Data == null {
        img.Data = ReadGPUTextureData(a.Texture, a.TextureLevel, layer)
      } else {
        copy(img.Data, ReadGPUTextureData(a.Texture, a.TextureLevel, layer))
      }
    }
  }
}

// WriteGPUFramebufferData updates the data of currently bound framebuffer textures.
sub void WriteGPUFramebufferData(ref!Context ctx) {
  fb := ctx.Bound.DrawFramebuffer
  for _, _, a in fb.ColorAttachments {
    WriteGPUFramebufferAttachment(a)
  }
  WriteGPUFramebufferAttachment(fb.DepthAttachment)
  WriteGPUFramebufferAttachment(fb.StencilAttachment)
}

// ReadGPUTextureData is used to read the texture updated by the GPU.
// This is typically done to read the result of a render-to-texture.
@internal
extern u8[] ReadGPUTextureData(ref!Texture texture, GLint level, GLint layer)

//////////////////
// Dependencies //
//////////////////

// ReadFramebufferAttachment creates a read on this FramebufferAttachment.
@spy_disabled
sub void ReadFramebufferAttachment(FramebufferAttachment a) {
  switch (a.Type) {
    case GL_FRAMEBUFFER_DEFAULT, GL_RENDERBUFFER: {
      read(a.Renderbuffer.Image.Data)
    }
    case GL_TEXTURE: {
      read(a.Texture.Image.Data)
    }
    case GL_NONE: {
      // nothing to do
    }
  }
}

// WriteFramebufferAttachment creates a write on this FramebufferAttachment.
@spy_disabled
sub void WriteFramebufferAttachment(FramebufferAttachment a) {
  switch (a.Type) {
    case GL_FRAMEBUFFER_DEFAULT, GL_RENDERBUFFER: {
      write(a.Renderbuffer.Image.Data)
    }
    case GL_TEXTURE: {
      write(a.Texture.Image.Data)
    }
    case GL_NONE: {
      // nothing to do
    }
  }
}

// DependencyReadTexture read all relevant fields of texture to create dependencies
@spy_disabled
sub void DependencyReadTexture(ref!Texture texture) {
  // TODO(hevrard): Check minlod and maxlod
  for _, idx, level in texture.Levels {
    if (texture.BaseLevel <= idx) && (idx <= texture.MaxLevel) {
      for _, _, image in level.Layers {
        read(image.Data)
      }
    }
  }

  // Sampling may be affected by all these parameters
  _ = texture.SwizzleR
  _ = texture.SwizzleG
  _ = texture.SwizzleB
  _ = texture.SwizzleA
  _ = texture.BorderColor
  _ = texture.BorderColorI
  _ = texture.MinFilter
  _ = texture.MagFilter
  _ = texture.WrapS
  _ = texture.WrapT
  _ = texture.WrapR
  _ = texture.MinLod
  _ = texture.MaxLod
  _ = texture.DepthStencilTextureMode
  _ = texture.CompareMode
  _ = texture.CompareFunc
  _ = texture.MaxAnisotropy
  _ = texture.DecodeSRGB
}

// DrawCommandDependencies creates relevant dependencies of draw commands.
@spy_disabled
sub void DrawCommandDependencies(ref!Context ctx, u32 index_count, u32 instance_count) {
  if (index_count > 0) && (instance_count > 0) {
    read_fb := ctx.Bound.ReadFramebuffer
    draw_fb := ctx.Bound.DrawFramebuffer

    _ = ctx.Rasterization.Viewport

    if ctx.Pixel.Stencil.Test == GL_TRUE {
      ReadFramebufferAttachment(read_fb.StencilAttachment)
    }

    if ctx.Pixel.Depth.Test == GL_TRUE {
      ReadFramebufferAttachment(read_fb.DepthAttachment)
    }

    for i in (0 .. ctx.Constants.MaxDrawBuffers) {
      if draw_fb.DrawBuffer[i] != GL_NONE {
        blendState := ctx.Pixel.Blend[as!DrawBufferIndex(i)]
        if blendState.Enabled == GL_TRUE {
          _ = blendState.SrcRgb
          _ = blendState.SrcAlpha
          _ = blendState.DstRgb
          _ = blendState.DstAlpha
          _ = blendState.EquationRgb
          _ = blendState.EquationAlpha
        }
      }
    }

    if ctx.Bound.Program != null {
      for _, _, u in ctx.Bound.Program.UniformLocations {
        // The program execution reads uniform values
        read(u.Values)

        // Sampler uniform refers to a texture
        texture_target := GetTextureTargetFromSamplerType(u.Type)
        if texture_target != GL_NONE {
          texture_unit := ctx.Objects.TextureUnits[as!TextureUnitId(u.Value[0])]
          if texture_unit != null {
            DependencyReadTexture(GetBoundTextureForUnit(texture_unit, texture_target))
          }
        }
      }
    }

    // Vertex input
    if !IsDefaultVertexArrayBound() {
      // Read host-side vertex input data. glDraw*() typically calls ReadVertexArrays() which
      // reads client-side vertex input data, the only necessary reads at capture time.
      // Here the reads for host-side vertex input is done to create dependencies.
      arrayBuffer := ctx.Bound.ArrayBuffer
      read(arrayBuffer.Data)
      for _, _, a in ctx.Bound.VertexArray.VertexAttributeArrays {
        if a.Enabled == GL_TRUE {
          _ = a.Size
          _ = a.Stride
          _ = a.Type
          _ = a.Normalized
          _ = a.Integer
          _ = a.Pointer
          _ = a.RelativeOffset
          _ = a.Binding.Id
          _ = a.Binding.Buffer
          _ = a.Binding.Offset
          _ = a.Binding.Stride
          _ = a.Binding.Divisor
        }
      }
    }

    for _, _, a in draw_fb.ColorAttachments {
      ReadFramebufferAttachment(a)
      WriteFramebufferAttachment(a)
    }

    SharedDrawClearCommandDependencies(ctx)
  }
}

// SharedDrawClearCommandDependencies creates relevant dependencies which are shared between draw and clear commands.
@spy_disabled
sub void SharedDrawClearCommandDependencies(ref!Context ctx) {
  scissorState := ctx.Pixel.Scissor
  if scissorState.Test == GL_TRUE {
    _ = scissorState.Box.X
    _ = scissorState.Box.Y
    _ = scissorState.Box.Width
    _ = scissorState.Box.Height
  }
}
