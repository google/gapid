// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@internal
class UnsizedFormatInfo {
  u32            Count
  @unused GLenum Channel0
  @unused GLenum Channel1
  @unused GLenum Channel2
  @unused GLenum Channel3
  @unused bool   Integer
}

sub UnsizedFormatInfo GetUnsizedFormatInfo(GLenum uf) {
  x := GL_NONE
  R := GL_RED
  G := GL_GREEN
  B := GL_BLUE
  A := GL_ALPHA
  L := GL_LUMINANCE
  D := GL_DEPTH_COMPONENT
  S := GL_STENCIL_INDEX
  INTEGER := true
  return switch uf {
    // TODO: Where is this defined?
    case GL_ABGR_EXT: UnsizedFormatInfo(4, A, B, G, R)
    @if(Version.GLES20)
    case GL_ALPHA:             UnsizedFormatInfo(1, A)
    case GL_ALPHA_INTEGER_EXT: UnsizedFormatInfo(1, A, x, x, x, INTEGER)
    case GL_BGR:               UnsizedFormatInfo(3, B, G, R)
    case GL_BGR_INTEGER:       UnsizedFormatInfo(3, B, G, R, x, INTEGER)
    @if(Extension.GL_EXT_texture_format_BGRA8888)
    case GL_BGRA:         UnsizedFormatInfo(4, B, G, R, A)
    case GL_BGRA_INTEGER: UnsizedFormatInfo(4, B, G, R, A, INTEGER)
    @if(Version.GLES30 || Extension.GL_OES_depth_texture)
    case GL_DEPTH_COMPONENT: UnsizedFormatInfo(1, D)
    @if(Version.GLES30 || Extension.GL_OES_packed_depth_stencil)
    case GL_DEPTH_STENCIL: UnsizedFormatInfo(2, D, S)
    @if(Version.GLES20)
    case GL_LUMINANCE:             UnsizedFormatInfo(1, L)
    case GL_LUMINANCE_INTEGER_EXT: UnsizedFormatInfo(1, L, x, x, x, INTEGER)
    @if(Version.GLES20)
    case GL_LUMINANCE_ALPHA:             UnsizedFormatInfo(2, L, A)
    case GL_LUMINANCE_ALPHA_INTEGER_EXT: UnsizedFormatInfo(2, L, A, x, x, INTEGER)
    @if(Version.GLES30 || Extension.GL_EXT_texture_rg)
    case GL_RED: UnsizedFormatInfo(1, R)
    @if(Version.GLES30)
    case GL_RED_INTEGER: UnsizedFormatInfo(1, R, x, x, x, INTEGER)
    @if(Version.GLES30 || Extension.GL_EXT_texture_rg)
    case GL_RG: UnsizedFormatInfo(2, R, G)
    @if(Version.GLES30)
    case GL_RG_INTEGER: UnsizedFormatInfo(2, R, G, x, x, INTEGER)
    @if(Version.GLES20)
    case GL_RGB: UnsizedFormatInfo(3, R, G, B)
    @if(Version.GLES30)
    case GL_RGB_INTEGER: UnsizedFormatInfo(3, R, G, B, x, INTEGER)
    @if(Version.GLES20)
    case GL_RGBA: UnsizedFormatInfo(4, R, G, B, A)
    @if(Version.GLES30)
    case GL_RGBA_INTEGER: UnsizedFormatInfo(4, R, G, B, A, INTEGER)
    @if(Version.GLES32 || Extension.GL_OES_texture_stencil8)
    case GL_STENCIL_INDEX: UnsizedFormatInfo(1, S)
    default:               UnsizedFormatInfo()
  }
}

@internal
class SizedFormatInfo {
  // "Internal format" with explicit memory size. Includes compressed formats.
  // (RGB565, RGBA8, R16UI, DEPTH24_STENCIL8, COMPRESSED_SRGB8_ETC2, ...)
  @unused GLenum SizedFormat

  // "Base format" which specifies just the channels. Includes the _INTEGER suffix.
  // This must be just the {R,G,B,A,D,S,INTEGER} part of the sized format above.
  // (RGB, RGBA, RED, DEPTH_STENCIL, RGB_INTEGER, ...)
  GLenum UnsizedFormat

  // Type of either one channel or the whole pixel. NONE for compressed formats.
  // This must be just the data type part of the sized format above (exactly).
  // For example, RGB565 must use UNSIGNED_SHORT_5_6_5, not UNSIGNED_BYTE.
  // (UNSIGNED_BYTE, FLOAT, UNSIGNED_SHORT_5_6_5...)
  GLenum DataType

  // True if the data is converted from sRGB to liner space by the sampler.
  // Note that GL does not care about colour spaces, and colour textures
  // will generally contain sRGB content even if this flag is off.
  // Thus, this flag just allows sRGB conscious developer to save a few
  // fragment shader instructions by doing the conversion in texture unit.
  @unused bool SRGB

  // Information about the compression algorithm
  CompressionAlgorithm Compression
  @unused u32          BlockWidth
  @unused u32          BlockHeight
  @unused u32          BlockSize
}

@internal
enum CompressionAlgorithm {
  Uncompressed = 0,
  ETC1         = 1,
  ETC2         = 2,
  S3TC         = 3,
  ASTC         = 4,
  ATC          = 5,
  EAC          = 6,
}

// uncompressedImageSize returns image size based on given format and type.
// TODO: Users of this function generally ignore packing/unpacking rules.
sub u32 uncompressedImageSize(GLsizei width, GLsizei height, GLenum format, GLenum ty) {
  return as!u32(width) * as!u32(height) * uncompressedPixelSize(format, ty)
}

// uncompressedPixelSize returns the pixel data size in bytes for the given format and type.
sub u32 uncompressedPixelSize(GLenum unsizedFormat, GLenum ty) {
  fmtInfo := GetUnsizedFormatInfo(unsizedFormat)
  num_components := fmtInfo.Count

  return switch ty {
    case GL_UNSIGNED_BYTE:                  num_components * 1
    case GL_BYTE:                           num_components * 1
    case GL_UNSIGNED_SHORT:                 num_components * 2
    case GL_SHORT:                          num_components * 2
    case GL_UNSIGNED_INT:                   num_components * 4
    case GL_INT:                            num_components * 4
    case GL_HALF_FLOAT:                     num_components * 2
    case GL_HALF_FLOAT_OES:                 num_components * 2
    case GL_FLOAT:                          num_components * 4
    case GL_UNSIGNED_SHORT_5_6_5:           2
    case GL_UNSIGNED_SHORT_4_4_4_4:         2
    case GL_UNSIGNED_SHORT_5_5_5_1:         2
    case GL_UNSIGNED_INT_2_10_10_10_REV:    4
    case GL_UNSIGNED_INT_10F_11F_11F_REV:   4
    case GL_UNSIGNED_INT_5_9_9_9_REV:       4
    case GL_UNSIGNED_INT_24_8:              4
    case GL_FLOAT_32_UNSIGNED_INT_24_8_REV: 8
    default:                                0 // TODO: What should we do in this case?
  }
}


sub SizedFormatInfo GetSizedFormatInfo(GLenum sf) {
  // Give the constant name for clarity
  sRGB := true
  linear := false
  return switch (sf) {
    // Uncompressed colour formats
    @if(Extension.GL_EXT_texture_storage)
    case GL_LUMINANCE8_ALPHA8_EXT:  SizedFormatInfo(sf, GL_LUMINANCE_ALPHA, GL_UNSIGNED_BYTE)
    @if(Extension.GL_EXT_texture_storage)
    case GL_LUMINANCE8_EXT:         SizedFormatInfo(sf, GL_LUMINANCE, GL_UNSIGNED_BYTE)
    @if(Extension.GL_EXT_texture_storage)
    case GL_ALPHA8_EXT:             SizedFormatInfo(sf, GL_ALPHA, GL_UNSIGNED_BYTE)
    @if(Extension.GL_EXT_texture_storage && Extension.GL_OES_texture_float)
    case GL_LUMINANCE_ALPHA32F_EXT: SizedFormatInfo(sf, GL_LUMINANCE_ALPHA, GL_FLOAT)
    @if(Extension.GL_EXT_texture_storage && Extension.GL_OES_texture_float)
    case GL_LUMINANCE32F_EXT:       SizedFormatInfo(sf, GL_LUMINANCE, GL_FLOAT )
    @if(Extension.GL_EXT_texture_storage && Extension.GL_OES_texture_float)
    case GL_ALPHA32F_EXT:           SizedFormatInfo(sf, GL_ALPHA, GL_FLOAT)
    @if(Extension.GL_EXT_texture_storage && Extension.GL_OES_texture_half_float)
    case GL_LUMINANCE_ALPHA16F_EXT: SizedFormatInfo(sf, GL_LUMINANCE_ALPHA, GL_HALF_FLOAT)
    @if(Extension.GL_EXT_texture_storage && Extension.GL_OES_texture_half_float)
    case GL_LUMINANCE16F_EXT:       SizedFormatInfo(sf, GL_LUMINANCE, GL_HALF_FLOAT )
    @if(Extension.GL_EXT_texture_storage && Extension.GL_OES_texture_half_float)
    case GL_ALPHA16F_EXT:           SizedFormatInfo(sf, GL_ALPHA, GL_HALF_FLOAT)
    @if(Extension.GL_EXT_texture_storage && Extension.GL_EXT_texture_format_BGRA8888)
    case GL_BGRA8_EXT:      SizedFormatInfo(sf, GL_BGRA, GL_UNSIGNED_BYTE)
    @if(Version.GLES30)
    case GL_R11F_G11F_B10F: SizedFormatInfo(sf, GL_RGB, GL_UNSIGNED_INT_10F_11F_11F_REV)
    @if(Version.GLES31 || Extension.GL_EXT_texture_norm16)
    case GL_R16:            SizedFormatInfo(sf, GL_RED, GL_UNSIGNED_SHORT)
    @if(Version.GLES30 || (Extension.GL_EXT_texture_storage && Extension.GL_EXT_texture_rg && Extension.GL_OES_texture_half_float))
    case GL_R16F:           SizedFormatInfo(sf, GL_RED, GL_HALF_FLOAT)
    @if(Version.GLES30)
    case GL_R16I:           SizedFormatInfo(sf, GL_RED_INTEGER, GL_SHORT)
    @if(Version.GLES30)
    case GL_R16UI:          SizedFormatInfo(sf, GL_RED_INTEGER, GL_UNSIGNED_SHORT)
    @if(Version.GLES31 || Extension.GL_EXT_texture_norm16)
    case GL_R16_SNORM:      SizedFormatInfo(sf, GL_RED, GL_SHORT)
    @if(Version.GLES30 || (Extension.GL_EXT_texture_storage && Extension.GL_EXT_texture_rg && Extension.GL_OES_texture_float))
    case GL_R32F:           SizedFormatInfo(sf, GL_RED, GL_FLOAT)
    @if(Version.GLES30)
    case GL_R32I:           SizedFormatInfo(sf, GL_RED_INTEGER, GL_INT)
    @if(Version.GLES30)
    case GL_R32UI:          SizedFormatInfo(sf, GL_RED_INTEGER, GL_UNSIGNED_INT)
    @if(Version.GLES30 || (Extension.GL_EXT_texture_storage && Extension.GL_EXT_texture_rg))
    case GL_R8:             SizedFormatInfo(sf, GL_RED, GL_UNSIGNED_BYTE)
    @if(Version.GLES30)
    case GL_R8I:            SizedFormatInfo(sf, GL_RED_INTEGER, GL_BYTE)
    @if(Version.GLES30)
    case GL_R8UI:           SizedFormatInfo(sf, GL_RED_INTEGER, GL_UNSIGNED_BYTE)
    @if(Version.GLES30)
    case GL_R8_SNORM:       SizedFormatInfo(sf, GL_RED, GL_BYTE)
    @if(Version.GLES31 || Extension.GL_EXT_texture_norm16)
    case GL_RG16:           SizedFormatInfo(sf, GL_RG, GL_UNSIGNED_SHORT)
    @if(Version.GLES30 || (Extension.GL_EXT_texture_storage && Extension.GL_EXT_texture_rg && Extension.GL_OES_texture_half_float))
    case GL_RG16F:          SizedFormatInfo(sf, GL_RG, GL_HALF_FLOAT)
    @if(Version.GLES30)
    case GL_RG16I:          SizedFormatInfo(sf, GL_RG_INTEGER, GL_SHORT)
    @if(Version.GLES30)
    case GL_RG16UI:         SizedFormatInfo(sf, GL_RG_INTEGER, GL_UNSIGNED_SHORT)
    @if(Version.GLES31 || Extension.GL_EXT_texture_norm16)
    case GL_RG16_SNORM:     SizedFormatInfo(sf, GL_RG, GL_SHORT)
    @if(Version.GLES30 || (Extension.GL_EXT_texture_storage && Extension.GL_EXT_texture_rg && Extension.GL_OES_texture_float))
    case GL_RG32F:          SizedFormatInfo(sf, GL_RG, GL_FLOAT)
    @if(Version.GLES30)
    case GL_RG32I:          SizedFormatInfo(sf, GL_RG_INTEGER, GL_INT)
    @if(Version.GLES30)
    case GL_RG32UI:         SizedFormatInfo(sf, GL_RG_INTEGER, GL_UNSIGNED_INT)
    @if(Version.GLES30 || (Extension.GL_EXT_texture_storage && Extension.GL_EXT_texture_rg))
    case GL_RG8:            SizedFormatInfo(sf, GL_RG, GL_UNSIGNED_BYTE)
    @if(Version.GLES30)
    case GL_RG8I:           SizedFormatInfo(sf, GL_RG_INTEGER, GL_BYTE)
    @if(Version.GLES30)
    case GL_RG8UI:          SizedFormatInfo(sf, GL_RG_INTEGER, GL_UNSIGNED_BYTE)
    @if(Version.GLES30)
    case GL_RG8_SNORM:      SizedFormatInfo(sf, GL_RG, GL_BYTE)
    @if(Extension.GL_EXT_texture_storage && Extension.GL_EXT_texture_type_2_10_10_10_REV)
    case GL_RGB10:          SizedFormatInfo(sf, GL_RGB, GL_UNSIGNED_INT_2_10_10_10_REV)
    @if(Version.GLES30 || (Extension.GL_EXT_texture_storage && Extension.GL_EXT_texture_type_2_10_10_10_REV))
    case GL_RGB10_A2:       SizedFormatInfo(sf, GL_RGBA, GL_UNSIGNED_INT_2_10_10_10_REV)
    @if(Version.GLES30)
    case GL_RGB10_A2UI:     SizedFormatInfo(sf, GL_RGBA_INTEGER, GL_UNSIGNED_INT_2_10_10_10_REV)
    @if(Version.GLES31 || Extension.GL_EXT_texture_norm16)
    case GL_RGB16:          SizedFormatInfo(sf, GL_RGB, GL_UNSIGNED_SHORT)
    @if(Version.GLES30 || (Extension.GL_EXT_texture_storage && Extension.GL_OES_texture_half_float))
    case GL_RGB16F:         SizedFormatInfo(sf, GL_RGB, GL_HALF_FLOAT)
    @if(Version.GLES30)
    case GL_RGB16I:         SizedFormatInfo(sf, GL_RGB_INTEGER, GL_SHORT)
    @if(Version.GLES30)
    case GL_RGB16UI:        SizedFormatInfo(sf, GL_RGB_INTEGER, GL_UNSIGNED_SHORT)
    @if(Version.GLES31 || Extension.GL_EXT_texture_norm16)
    case GL_RGB16_SNORM:    SizedFormatInfo(sf, GL_RGB, GL_SHORT)
    @if(Version.GLES30 || (Extension.GL_EXT_texture_storage && Extension.GL_OES_texture_float))
    case GL_RGB32F:         SizedFormatInfo(sf, GL_RGB, GL_FLOAT)
    @if(Version.GLES30)
    case GL_RGB32I:         SizedFormatInfo(sf, GL_RGB_INTEGER, GL_INT)
    @if(Version.GLES30)
    case GL_RGB32UI:        SizedFormatInfo(sf, GL_RGB_INTEGER, GL_UNSIGNED_INT)
    @if(Version.GLES30 || Extension.GL_EXT_texture_storage)
    case GL_RGB565:         SizedFormatInfo(sf, GL_RGB, GL_UNSIGNED_SHORT_5_6_5)
    @if(Version.GLES30 || Extension.GL_EXT_texture_storage)
    case GL_RGB5_A1:        SizedFormatInfo(sf, GL_RGBA, GL_UNSIGNED_SHORT_5_5_5_1)
    @if(Version.GLES30 || Extension.GL_EXT_texture_storage)
    case GL_RGB8:           SizedFormatInfo(sf, GL_RGB, GL_UNSIGNED_BYTE)
    @if(Version.GLES30)
    case GL_RGB8I:          SizedFormatInfo(sf, GL_RGB_INTEGER, GL_BYTE)
    @if(Version.GLES30)
    case GL_RGB8UI:         SizedFormatInfo(sf, GL_RGB_INTEGER, GL_UNSIGNED_BYTE)
    @if(Version.GLES30)
    case GL_RGB8_SNORM:     SizedFormatInfo(sf, GL_RGB, GL_BYTE)
    @if(Version.GLES30)
    case GL_RGB9_E5:        SizedFormatInfo(sf, GL_RGB, GL_UNSIGNED_INT_5_9_9_9_REV)
    @if(Version.GLES31 || Extension.GL_EXT_texture_norm16)
    case GL_RGBA16:         SizedFormatInfo(sf, GL_RGBA, GL_UNSIGNED_SHORT)
    @if(Version.GLES30 || (Extension.GL_EXT_texture_storage && Extension.GL_OES_texture_half_float))
    case GL_RGBA16F:        SizedFormatInfo(sf, GL_RGBA, GL_HALF_FLOAT)
    @if(Version.GLES30)
    case GL_RGBA16I:        SizedFormatInfo(sf, GL_RGBA_INTEGER, GL_SHORT)
    @if(Version.GLES30)
    case GL_RGBA16UI:       SizedFormatInfo(sf, GL_RGBA_INTEGER, GL_UNSIGNED_SHORT)
    @if(Version.GLES31 || Extension.GL_EXT_texture_norm16)
    case GL_RGBA16_SNORM:   SizedFormatInfo(sf, GL_RGBA, GL_SHORT)
    @if(Version.GLES30 || (Extension.GL_EXT_texture_storage && Extension.GL_OES_texture_float))
    case GL_RGBA32F:        SizedFormatInfo(sf, GL_RGBA, GL_FLOAT)
    @if(Version.GLES30)
    case GL_RGBA32I:        SizedFormatInfo(sf, GL_RGBA_INTEGER, GL_INT)
    @if(Version.GLES30)
    case GL_RGBA32UI:       SizedFormatInfo(sf, GL_RGBA_INTEGER, GL_UNSIGNED_INT)
    @if(Version.GLES30 || Extension.GL_EXT_texture_storage)
    case GL_RGBA4:          SizedFormatInfo(sf, GL_RGBA, GL_UNSIGNED_SHORT_4_4_4_4)
    @if(Version.GLES30 || Extension.GL_EXT_texture_storage)
    case GL_RGBA8:          SizedFormatInfo(sf, GL_RGBA, GL_UNSIGNED_BYTE)
    @if(Version.GLES30)
    case GL_RGBA8I:         SizedFormatInfo(sf, GL_RGBA_INTEGER, GL_BYTE)
    @if(Version.GLES30)
    case GL_RGBA8UI:        SizedFormatInfo(sf, GL_RGBA_INTEGER, GL_UNSIGNED_BYTE)
    @if(Version.GLES30)
    case GL_RGBA8_SNORM:    SizedFormatInfo(sf, GL_RGBA, GL_BYTE)
    @if(Version.GLES30)
    case GL_SRGB8:          SizedFormatInfo(sf, GL_RGB, GL_UNSIGNED_BYTE, sRGB)
    @if(Version.GLES30)
    case GL_SRGB8_ALPHA8:   SizedFormatInfo(sf, GL_RGBA, GL_UNSIGNED_BYTE, sRGB)
    // Uncompressed depth/stencil formats
    @if(Version.GLES30 || (Extension.GL_EXT_texture_storage && Extension.GL_OES_packed_depth_stencil))
    case GL_DEPTH24_STENCIL8:   SizedFormatInfo(sf, GL_DEPTH_STENCIL, GL_UNSIGNED_INT_24_8)
    @if(Version.GLES30)
    case GL_DEPTH32F_STENCIL8:  SizedFormatInfo(sf, GL_DEPTH_STENCIL, GL_FLOAT_32_UNSIGNED_INT_24_8_REV)
    @if(Version.GLES30 || (Extension.GL_EXT_texture_storage && Extension.GL_OES_depth_texture))
    case GL_DEPTH_COMPONENT16:  SizedFormatInfo(sf, GL_DEPTH_COMPONENT, GL_UNSIGNED_SHORT)
    @if(Version.GLES30)
    case GL_DEPTH_COMPONENT24:  SizedFormatInfo(sf, GL_DEPTH_COMPONENT, GL_UNSIGNED_INT)
    @if(Extension.GL_EXT_texture_storage && Extension.GL_OES_depth_texture)
    case GL_DEPTH_COMPONENT32:  SizedFormatInfo(sf, GL_DEPTH_COMPONENT, GL_UNSIGNED_INT)
    @if(Version.GLES30)
    case GL_DEPTH_COMPONENT32F: SizedFormatInfo(sf, GL_DEPTH_COMPONENT, GL_FLOAT)
    @if(Version.GLES32)
    case GL_STENCIL_INDEX8:     SizedFormatInfo(sf, GL_STENCIL_INDEX, GL_UNSIGNED_BYTE)
    // Compressed formats
    @if(Version.GLES30)
    case GL_COMPRESSED_R11_EAC:                        SizedFormatInfo(sf, GL_RED, GL_NONE, linear, EAC, 4, 4, 8)
    @if(Version.GLES30)
    case GL_COMPRESSED_RG11_EAC:                       SizedFormatInfo(sf, GL_RG, GL_NONE, linear, EAC, 4, 4, 16)
    @if(Version.GLES30)
    case GL_COMPRESSED_RGB8_ETC2:                      SizedFormatInfo(sf, GL_RGB, GL_NONE, linear, ETC2, 4, 4, 8)
    @if(Version.GLES30)
    case GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:  SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ETC2, 4, 4, 8)
    @if(Version.GLES30)
    case GL_COMPRESSED_RGBA8_ETC2_EAC:                 SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ETC2, 4, 4, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_RGBA_ASTC_10x10:                SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 10, 10, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_RGBA_ASTC_10x5:                 SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 10, 5, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_RGBA_ASTC_10x6:                 SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 10, 6, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_RGBA_ASTC_10x8:                 SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 10, 8, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_RGBA_ASTC_12x10:                SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 12, 10, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_RGBA_ASTC_12x12:                SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 12, 12, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_RGBA_ASTC_4x4:                  SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 4, 4, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_RGBA_ASTC_5x4:                  SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 5, 4, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_RGBA_ASTC_5x5:                  SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 5, 5, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_RGBA_ASTC_6x5:                  SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 6, 5, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_RGBA_ASTC_6x6:                  SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 6, 6, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_RGBA_ASTC_8x5:                  SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 8, 5, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_RGBA_ASTC_8x6:                  SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 8, 6, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_RGBA_ASTC_8x8:                  SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 8, 8, 16)
    @if(Version.GLES30)
    case GL_COMPRESSED_SIGNED_R11_EAC:                 SizedFormatInfo(sf, GL_RED, GL_NONE, linear, EAC, 4, 4, 8)
    @if(Version.GLES30)
    case GL_COMPRESSED_SIGNED_RG11_EAC:                SizedFormatInfo(sf, GL_RG, GL_NONE, linear, EAC, 4, 4, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10:        SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 10, 10, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5:         SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 10, 5, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6:         SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 10, 6, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8:         SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 10, 8, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10:        SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 12, 10, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12:        SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 12, 12, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4:          SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 4, 4, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4:          SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 5, 4, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5:          SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 5, 5, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5:          SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 6, 5, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6:          SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 6, 6, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5:          SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 8, 5, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6:          SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 8, 6, 16)
    @if(Version.GLES32)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8:          SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 8, 8, 16)
    @if(Version.GLES30)
    case GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:          SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ETC2, 4, 4, 16)
    @if(Version.GLES30)
    case GL_COMPRESSED_SRGB8_ETC2:                     SizedFormatInfo(sf, GL_RGB, GL_NONE, sRGB, ETC2, 4, 4, 8)
    @if(Version.GLES30)
    case GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ETC2, 4, 4, 8)
    @if(Extension.GL_OES_compressed_ETC1_RGB8_texture)
    case GL_ETC1_RGB8_OES:                             SizedFormatInfo(sf, GL_RGB, GL_NONE, linear, ETC1, 4, 4, 8)
    @if(Extension.GL_EXT_texture_compression_s3tc)
    case GL_COMPRESSED_RGB_S3TC_DXT1_EXT:              SizedFormatInfo(sf, GL_RGB, GL_NONE, linear, S3TC, 4, 4, 8)
    @if(Extension.GL_EXT_texture_compression_s3tc)
    case GL_COMPRESSED_RGBA_S3TC_DXT1_EXT:             SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, S3TC, 4, 4, 8)
    @if(Extension.GL_EXT_texture_compression_s3tc)
    case GL_COMPRESSED_RGBA_S3TC_DXT3_EXT:             SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, S3TC, 4, 4, 16)
    @if(Extension.GL_EXT_texture_compression_s3tc)
    case GL_COMPRESSED_RGBA_S3TC_DXT5_EXT:             SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, S3TC, 4, 4, 16)
    @if(Extension.GL_AMD_compressed_ATC_texture)
    case GL_ATC_RGB_AMD:                               SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ATC, 4, 4, 8)
    @if(Extension.GL_AMD_compressed_ATC_texture)
    case GL_ATC_RGBA_EXPLICIT_ALPHA_AMD:               SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ATC, 4, 4, 16)
    @if(Extension.GL_AMD_compressed_ATC_texture)
    case GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD:           SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ATC, 4, 4, 16)
    default:
      SizedFormatInfo(GL_NONE)
  }
}

// GLES 2.0 omits sized internal format from commands and uses (format, type) tuple instead.
// We need to check that the tuple is valid and convert it to sized format for internal use.
sub GLenum GetSizedFormatFromTuple(GLenum unsizedFormat, GLenum type) {
  return switch unsizedFormat {
    @if(Extension.GL_EXT_texture_format_BGRA8888)
    case GL_BGRA_EXT: switch type {
      case GL_UNSIGNED_BYTE: GL_BGRA8_EXT
      default: GL_NONE
    }
    @if(Extension.GL_EXT_texture_rg)
    case GL_RED_EXT: switch type {
      case GL_UNSIGNED_BYTE: GL_R8
      @if(Extension.GL_OES_texture_half_float)
      case GL_HALF_FLOAT_OES: GL_R16F
      @if(Extension.GL_OES_texture_float)
      case GL_FLOAT: GL_R32F
      default: GL_NONE
    }
    @if(Extension.GL_EXT_texture_rg)
    case GL_RG_EXT: switch type {
      case GL_UNSIGNED_BYTE: GL_RG8
      @if(Extension.GL_OES_texture_half_float)
      case GL_HALF_FLOAT_OES: GL_RG16F
      @if(Extension.GL_OES_texture_float)
      case GL_FLOAT: GL_RG32F
      default: GL_NONE
    }
    case GL_RGB: switch type {
      case GL_UNSIGNED_BYTE: GL_RGB8
      case GL_UNSIGNED_SHORT_5_6_5: GL_RGB565
      @if(Extension.GL_EXT_texture_type_2_10_10_10_REV)
      case GL_UNSIGNED_INT_2_10_10_10_REV: GL_RGB10
      @if(Extension.GL_OES_texture_half_float)
      case GL_HALF_FLOAT_OES: GL_RGB16F
      @if(Extension.GL_OES_texture_float)
      case GL_FLOAT: GL_RGB32F
      default: GL_NONE
    }
    case GL_RGBA: switch type {
      case GL_UNSIGNED_BYTE: GL_RGBA8
      case GL_UNSIGNED_SHORT_4_4_4_4: GL_RGBA4
      case GL_UNSIGNED_SHORT_5_5_5_1: GL_RGB5_A1
      @if(Extension.GL_EXT_texture_type_2_10_10_10_REV)
      case GL_UNSIGNED_INT_2_10_10_10_REV: GL_RGB10_A2
      @if(Extension.GL_OES_texture_half_float)
      case GL_HALF_FLOAT_OES: GL_RGBA16F
      @if(Extension.GL_OES_texture_float)
      case GL_FLOAT: GL_RGBA32F
      default: GL_NONE
    }
    @if(Extension.GL_OES_depth_texture)
    case GL_DEPTH_COMPONENT: switch type {
      case GL_UNSIGNED_SHORT: GL_DEPTH_COMPONENT16
      case GL_UNSIGNED_INT: GL_DEPTH_COMPONENT32
      default: GL_NONE
    }
    @if(Extension.GL_OES_packed_depth_stencil)
    case GL_DEPTH_STENCIL: switch type {
      case GL_UNSIGNED_INT_24_8: GL_DEPTH24_STENCIL8
      default: GL_NONE
    }
    case GL_LUMINANCE_ALPHA: switch type {
      case GL_UNSIGNED_BYTE: GL_LUMINANCE8_ALPHA8_EXT
      @if(Extension.GL_OES_texture_half_float)
      case GL_HALF_FLOAT_OES: GL_LUMINANCE_ALPHA16F_EXT
      @if(Extension.GL_OES_texture_float)
      case GL_FLOAT: GL_LUMINANCE_ALPHA32F_EXT
      default: GL_NONE
    }
    case GL_LUMINANCE: switch type {
      case GL_UNSIGNED_BYTE: GL_LUMINANCE8_EXT
      @if(Extension.GL_OES_texture_half_float)
      case GL_HALF_FLOAT_OES: GL_LUMINANCE16F_EXT
      @if(Extension.GL_OES_texture_float)
      case GL_FLOAT: GL_LUMINANCE32F_EXT
      default: GL_NONE
    }
    case GL_ALPHA: switch type {
      case GL_UNSIGNED_BYTE: GL_ALPHA8_EXT
      @if(Extension.GL_OES_texture_half_float)
      case GL_HALF_FLOAT_OES: GL_ALPHA16F_EXT
      @if(Extension.GL_OES_texture_float)
      case GL_FLOAT: GL_ALPHA32F_EXT
      default: GL_NONE
    }
    default: GL_NONE
  }
}

sub void CheckTextureDataType(GLenum type) {
  switch (type) {
    @if(Version.GLES20)
    case GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_5_6_5: { }
    @if(Extension.GL_OES_texture_half_float)
    case GL_HALF_FLOAT_OES: { }
    @if(Version.GLES30 || Extension.GL_OES_texture_float)
    case GL_FLOAT: {}
    @if(Version.GLES30 || Extension.GL_EXT_texture_type_2_10_10_10_REV)
    case GL_UNSIGNED_INT_2_10_10_10_REV: {}
    @if(Version.GLES30 || Extension.GL_OES_depth_texture)
    case GL_UNSIGNED_SHORT, GL_UNSIGNED_INT: {}
    @if(Version.GLES30 || Extension.GL_OES_packed_depth_stencil)
    case GL_UNSIGNED_INT_24_8: {}
    @if(Version.GLES30)
    case GL_BYTE, GL_FLOAT_32_UNSIGNED_INT_24_8_REV, GL_HALF_FLOAT, GL_INT, GL_SHORT,
         GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV: { }
    default: { glErrorInvalidEnum(type) }
  }
}
