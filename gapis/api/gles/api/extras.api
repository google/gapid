// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// StaticContextState is an command extra used to describe a context's non-changing state.
@internal
class StaticContextState {
  Constants Constants
  string    ThreadName
}

@post_fence
extern ref!StaticContextState GetEGLStaticContextState(EGLDisplay display, EGLContext context)

// DynamicContextState is an command extra used to describe a context's potentially changing state.
@internal
class DynamicContextState {
  GLsizei BackbufferWidth
  GLsizei BackbufferHeight
  GLenum  BackbufferColorFmt
  GLenum  BackbufferDepthFmt
  GLenum  BackbufferStencilFmt
  bool    PreserveBuffersOnSwap
  // TODO: Currently unused
  @unused GLuint RedSize
  @unused GLuint GreenSize
  @unused GLuint BlueSize
  @unused GLuint AlphaSize
  @unused GLuint DepthSize
  @unused GLuint StencilSize
}

@post_fence
extern ref!DynamicContextState GetEGLDynamicContextState(EGLDisplay display, EGLSurface surface, EGLContext context)


@internal
class UniformTypeInfo {
  // The total size is: primitiveSize * vectorSize * vectorCount
  u32 primitiveSize // Size of primitive type in bytes.
  u32 vectorSize    // Number of primitives in a vector. Numbers of columns for matrix.
  u32 vectorCount   // Always 1 for all non-matrix types. Numbers of rows for matrix.
}

// GetUniformTypeInfo returns information about given unifrom type.
sub UniformTypeInfo GetUniformTypeInfo(GLenum ty) {
  return switch ty {
    case GL_FLOAT:                 UniformTypeInfo(4, 1, 1)
    case GL_FLOAT_VEC2:            UniformTypeInfo(4, 2, 1)
    case GL_FLOAT_VEC3:            UniformTypeInfo(4, 3, 1)
    case GL_FLOAT_VEC4:            UniformTypeInfo(4, 4, 1)
    case GL_DOUBLE:                UniformTypeInfo(8, 1, 1)
    case GL_DOUBLE_VEC2:           UniformTypeInfo(8, 2, 1)
    case GL_DOUBLE_VEC3:           UniformTypeInfo(8, 3, 1)
    case GL_DOUBLE_VEC4:           UniformTypeInfo(8, 4, 1)
    case GL_INT:                   UniformTypeInfo(4, 1, 1)
    case GL_INT_VEC2:              UniformTypeInfo(4, 2, 1)
    case GL_INT_VEC3:              UniformTypeInfo(4, 3, 1)
    case GL_INT_VEC4:              UniformTypeInfo(4, 4, 1)
    case GL_UNSIGNED_INT:          UniformTypeInfo(4, 1, 1)
    case GL_UNSIGNED_INT_VEC2:     UniformTypeInfo(4, 2, 1)
    case GL_UNSIGNED_INT_VEC3:     UniformTypeInfo(4, 3, 1)
    case GL_UNSIGNED_INT_VEC4:     UniformTypeInfo(4, 4, 1)
    case GL_BOOL:                  UniformTypeInfo(4, 1, 1)
    case GL_BOOL_VEC2:             UniformTypeInfo(4, 2, 1)
    case GL_BOOL_VEC3:             UniformTypeInfo(4, 3, 1)
    case GL_BOOL_VEC4:             UniformTypeInfo(4, 4, 1)
    case GL_FLOAT_MAT2:            UniformTypeInfo(4, 2, 2)
    case GL_FLOAT_MAT3:            UniformTypeInfo(4, 3, 3)
    case GL_FLOAT_MAT4:            UniformTypeInfo(4, 4, 4)
    case GL_FLOAT_MAT2x3:          UniformTypeInfo(4, 2, 3)
    case GL_FLOAT_MAT2x4:          UniformTypeInfo(4, 2, 4)
    case GL_FLOAT_MAT3x2:          UniformTypeInfo(4, 3, 2)
    case GL_FLOAT_MAT3x4:          UniformTypeInfo(4, 3, 4)
    case GL_FLOAT_MAT4x2:          UniformTypeInfo(4, 4, 2)
    case GL_FLOAT_MAT4x3:          UniformTypeInfo(4, 4, 3)
    case GL_DOUBLE_MAT2:           UniformTypeInfo(8, 2, 2)
    case GL_DOUBLE_MAT3:           UniformTypeInfo(8, 3, 3)
    case GL_DOUBLE_MAT4:           UniformTypeInfo(8, 4, 4)
    case GL_DOUBLE_MAT2x3:         UniformTypeInfo(8, 2, 3)
    case GL_DOUBLE_MAT2x4:         UniformTypeInfo(8, 2, 4)
    case GL_DOUBLE_MAT3x2:         UniformTypeInfo(8, 3, 2)
    case GL_DOUBLE_MAT3x4:         UniformTypeInfo(8, 3, 4)
    case GL_DOUBLE_MAT4x2:         UniformTypeInfo(8, 4, 2)
    case GL_DOUBLE_MAT4x3:         UniformTypeInfo(8, 4, 3)

    case GL_SAMPLER_1D,
        GL_SAMPLER_2D,
        GL_SAMPLER_3D,
        GL_SAMPLER_CUBE,
        GL_SAMPLER_1D_SHADOW,
        GL_SAMPLER_2D_SHADOW,
        GL_SAMPLER_1D_ARRAY,
        GL_SAMPLER_2D_ARRAY,
        GL_SAMPLER_1D_ARRAY_SHADOW,
        GL_SAMPLER_2D_ARRAY_SHADOW,
        GL_SAMPLER_2D_MULTISAMPLE,
        GL_SAMPLER_2D_MULTISAMPLE_ARRAY,
        GL_SAMPLER_CUBE_SHADOW,
        GL_SAMPLER_BUFFER,
        GL_SAMPLER_2D_RECT,
        GL_SAMPLER_2D_RECT_SHADOW,
        GL_INT_SAMPLER_1D,
        GL_INT_SAMPLER_2D,
        GL_INT_SAMPLER_3D,
        GL_INT_SAMPLER_CUBE,
        GL_INT_SAMPLER_1D_ARRAY,
        GL_INT_SAMPLER_2D_ARRAY,
        GL_INT_SAMPLER_2D_MULTISAMPLE,
        GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY,
        GL_INT_SAMPLER_BUFFER,
        GL_INT_SAMPLER_2D_RECT,
        GL_UNSIGNED_INT_SAMPLER_1D,
        GL_UNSIGNED_INT_SAMPLER_2D,
        GL_UNSIGNED_INT_SAMPLER_3D,
        GL_UNSIGNED_INT_SAMPLER_CUBE,
        GL_UNSIGNED_INT_SAMPLER_1D_ARRAY,
        GL_UNSIGNED_INT_SAMPLER_2D_ARRAY,
        GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE,
        GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY,
        GL_UNSIGNED_INT_SAMPLER_BUFFER,
        GL_UNSIGNED_INT_SAMPLER_2D_RECT,
        GL_IMAGE_1D,
        GL_IMAGE_2D,
        GL_IMAGE_3D,
        GL_IMAGE_2D_RECT,
        GL_IMAGE_CUBE,
        GL_IMAGE_BUFFER,
        GL_IMAGE_1D_ARRAY,
        GL_IMAGE_2D_ARRAY,
        GL_IMAGE_2D_MULTISAMPLE,
        GL_IMAGE_2D_MULTISAMPLE_ARRAY,
        GL_INT_IMAGE_1D,
        GL_INT_IMAGE_2D,
        GL_INT_IMAGE_3D,
        GL_INT_IMAGE_2D_RECT,
        GL_INT_IMAGE_CUBE,
        GL_INT_IMAGE_BUFFER,
        GL_INT_IMAGE_1D_ARRAY,
        GL_INT_IMAGE_2D_ARRAY,
        GL_INT_IMAGE_2D_MULTISAMPLE,
        GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY,
        GL_UNSIGNED_INT_IMAGE_1D,
        GL_UNSIGNED_INT_IMAGE_2D,
        GL_UNSIGNED_INT_IMAGE_3D,
        GL_UNSIGNED_INT_IMAGE_2D_RECT,
        GL_UNSIGNED_INT_IMAGE_CUBE,
        GL_UNSIGNED_INT_IMAGE_BUFFER,
        GL_UNSIGNED_INT_IMAGE_1D_ARRAY,
        GL_UNSIGNED_INT_IMAGE_2D_ARRAY,
        GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE,
        GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY,
        GL_UNSIGNED_INT_ATOMIC_COUNTER,
        GL_SAMPLER_EXTERNAL_OES:
      UniformTypeInfo(4, 1, 1)
    default:
      UniformTypeInfo()
  }
}

// hintAtAttributeType simply return the single argument unaltered.
// It is used to add enum name hint information for static analysis.
sub GLenum hintAtAttributeType(GLenum ty) {
    return switch ty {
    case GL_FLOAT,
        GL_FLOAT_VEC2,
        GL_FLOAT_VEC3,
        GL_FLOAT_VEC4,
        GL_FLOAT_MAT2,
        GL_FLOAT_MAT3,
        GL_FLOAT_MAT4,
        GL_FLOAT_MAT2x3,
        GL_FLOAT_MAT2x4,
        GL_FLOAT_MAT3x2,
        GL_FLOAT_MAT3x4,
        GL_FLOAT_MAT4x2,
        GL_FLOAT_MAT4x3,
        GL_INT,
        GL_INT_VEC2,
        GL_INT_VEC3,
        GL_INT_VEC4,
        GL_UNSIGNED_INT,
        GL_UNSIGNED_INT_VEC2,
        GL_UNSIGNED_INT_VEC3,
        GL_UNSIGNED_INT_VEC4,
        GL_DOUBLE,
        GL_DOUBLE_VEC2,
        GL_DOUBLE_VEC3,
        GL_DOUBLE_VEC4,
        GL_DOUBLE_MAT2,
        GL_DOUBLE_MAT3,
        GL_DOUBLE_MAT4,
        GL_DOUBLE_MAT2x3,
        GL_DOUBLE_MAT2x4,
        GL_DOUBLE_MAT3x2,
        GL_DOUBLE_MAT3x4,
        GL_DOUBLE_MAT4x2,
        GL_DOUBLE_MAT4x3:
      ty
    default:
      ty
  }
}
