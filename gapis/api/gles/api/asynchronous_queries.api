// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@internal
class Query {
  QueryId ID

  // Table 21.31: Query Object State
  // GLuint QueryResult = 0 // TODO: or GL_FALSE?
  // GLboolean QueryResultAvailable = GL_FALSE
  @unused string Label
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glBeginQuery.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glBeginQuery.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glBeginQuery.xhtml", Version.GLES32)
cmd void glBeginQuery(GLenum target, QueryId query) {
  switch (target) {
    case GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE,
        GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: {
      // version 3.0
    }
    @if(Version.GLES32)
    case GL_PRIMITIVES_GENERATED: {
    }
    default: {
      glErrorInvalidEnum(target)
    }
  }
  ctx := GetContext()
  ctx.Other.ActiveQueries[target] = GetOrCreateQuery(query)
}

sub ref!Query GetOrCreateQuery(QueryId id) {
  ctx := GetContext()
  if (id != 0) && (ctx.Objects.Queries[id] == null) {
    ctx.Objects.Queries[id] = new!Query(ID: id)
    ctx.Objects.GeneratedNames.Queries[id] = true
  }
  return ctx.Objects.Queries[id]
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glDeleteQueries.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glDeleteQueries.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDeleteQueries.xhtml", Version.GLES32)
cmd void glDeleteQueries(GLsizei count, const QueryId* queries) {
  DeleteQueries(count, queries)
}

sub void DeleteQueries(GLsizei count, const QueryId* queries) {
  CheckCountGE!GLsizei(count, 0)
  q := queries[0:count]
  ctx := GetContext()
  for i in (0 .. count) {
    id := q[i]
    if id != 0 {
      delete(ctx.Objects.Queries, id)
      delete(ctx.Objects.GeneratedNames.Queries, id)
    }
  }
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glBeginQuery.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glBeginQuery.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glBeginQuery.xhtml", Version.GLES32)
cmd void glEndQuery(GLenum target) {
  switch (target) {
    case GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE,
        GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: {
      // version 3.0
    }
    @if(Version.GLES32)
    case GL_PRIMITIVES_GENERATED: {
    }
    default: {
      glErrorInvalidEnum(target)
    }
  }
  ctx := GetContext()
  delete(ctx.Other.ActiveQueries, target)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGenQueries.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGenQueries.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGenQueries.xhtml", Version.GLES32)
cmd void glGenQueries(GLsizei count, QueryId* queries) {
  GenQueries(count, queries)
}

sub void GenQueries(GLsizei count, QueryId* queries) {
  CheckCountGE!GLsizei(count, 0)
  q := queries[0:count]
  ctx := GetContext()
  for i in (0 .. count) {
    id := as!QueryId(?)
    assert(id != 0)
    ctx.Objects.GeneratedNames.Queries[id] = true
    q[i] = id
  }
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetQueryObjectuiv.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetQueryObjectuiv.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetQueryObjectuiv.xhtml", Version.GLES32)
cmd void glGetQueryObjectuiv(QueryId query, GLenum parameter, GLuint* value) {
  switch (parameter) {
    case GL_QUERY_RESULT, GL_QUERY_RESULT_AVAILABLE: {
      // version 3.0
    }
    default: {
      glErrorInvalidEnum(parameter)
    }
  }

  value[0] = ?
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetQueryiv.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetQueryiv.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetQueryiv.xhtml", Version.GLES32)
cmd void glGetQueryiv(GLenum target, GLenum parameter, GLint* value) {
  switch (target) {
    case GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE,
        GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: {
      // version 3.0
    }
    @if(Version.GLES32)
    case GL_PRIMITIVES_GENERATED: {
    }
    @if(Extension.GL_EXT_disjoint_timer_query)
    case GL_TIMESTAMP_EXT: {
    }
    default: {
      glErrorInvalidEnum(target)
    }
  }
  switch (parameter) {
    case GL_CURRENT_QUERY: {
      // version 3.0
      ctx := GetContext()
      if (target in ctx.Other.ActiveQueries) {
        value[0] = as!GLint(ctx.Other.ActiveQueries[target].ID)
      } else {
        value[0] = 0
      }
    }
    @if(Extension.GL_EXT_disjoint_timer_query)
    case GL_QUERY_COUNTER_BITS_EXT: {
      value[0] = ?
    }
    default: {
      glErrorInvalidEnum(parameter)
    }
  }
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glIsQuery.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glIsQuery.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glIsQuery.xhtml", Version.GLES32)
cmd GLboolean glIsQuery(QueryId query) {

  ctx := GetContext()
  return as!GLboolean(query in ctx.Objects.Queries)
}
