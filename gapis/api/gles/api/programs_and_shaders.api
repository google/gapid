// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@internal
@resource
class Shader {
  @unused ShaderId ID
  @unused GLenum   ShaderType // TODO: Duplicate field?
  @unused u8[]     Binary
  @unused bool     Compiled     = false
  bool             DeleteStatus
  @unused GLchar[] InfoLog
  string           Source
  GLenum           Type
  @unused string   Label
  s32              AttachCount
}

@internal
@resource
class Program {
  @unused ProgramId                           ID
  map!(GLenum, ref!Shader)                    Shaders
  @unused GLboolean                           LinkStatus
  @unused string                              InfoLog
  @unused bool                                Precompiled
  bool                                        DeleteStatus
  @unused u8[]                                Binary
  @unused map!(string, AttributeLocation)     AttributeBindings
  map!(AttributeIndex, ActiveAttribute)       ActiveAttributes    // Program introspection.
  map!(UniformIndex, ActiveUniform)           ActiveUniforms      // Program introspection.
  ActiveUniformBlock                          DefaultUniformBlock // Program introspection.
  map!(UniformBlockIndex, ActiveUniformBlock) ActiveUniformBlocks // Program introspection.
  map!(UniformLocation, Uniform)              Uniforms            // Values are stored separately.
  @unused string                              Label
  s32                                         UseCount
}

@internal
@serialize
class ActiveAttribute {
  @unused string            Name
  @unused GLenum            Type
  @unused GLint             ArraySize
  @unused AttributeLocation Location  // This is different to the index. -1 if not used.
}

@internal
@serialize
class ActiveUniformBlock {
  @unused string                    Name
  GLint                             Binding
  GLint                             DataSize
  bool                              ReferencedByVertexShader
  bool                              ReferencedByFragmentShader
  map!(UniformIndex, ActiveUniform) ActiveUniforms
}

@internal
@serialize
class ActiveUniform {
  @unused string                    Name
  @unused GLenum                    Type
  @unused GLint                     ArraySize
  @unused UniformLocation           Location = -1 // This is different to the index. -1 if not used.
  @unused map!(u32,UniformLocation) Locations // Location of each array element (can be non-consecutive).
  @unused UniformBlockIndex         BlockIndex = 0xFFFFFFFF
  @unused GLint                     Offset = -1
  @unused GLint                     ArrayStride = -1
  @unused GLint                     MatrixStride = -1
  @unused GLint                     IsRowMajor = 0
}

@internal
class Uniform {
  @internal u8[] Value
  @unused GLenum Type
}

@internal
class Pipeline {
  @unused string Label
}

/*
@internal
class Shader {
  // Table 21.19: Shader Object State
  GLenum Type
  GLboolean DeleteStatus = GL_FALSE
  GLboolean CompileStatus = GL_FALSE
  string InfoLog
  GLuint InfoLogLength = 0
  string Source
  GLuint SourceLength = 0
  string ObjectLabel
}

@internal
class Pipeline {
  // Table 21.20: Program Pipeline Object State
  GLuint ActiveProgram = 0
  GLuint VertexShader = 0
  GLuint GeometryShader = 0
  GLuint TessControlShader = 0
  GLuint TessEvaluationShader = 0
  GLuint FragmentShader = 0
  GLuint ComputeShader = 0
  GLboolean ValidateStatus = GL_FALSE
  string ProgramPipelineInfoLog
  GLuint InfoLogLength = 0
  string ObjectLabel
}

@internal
class Program {
  // Table 21.21: Program Object State
  GLuint CurrentProgram = 0 // TODO: global state?
  GLuint ProgramPipelineBinding = 0 // TODO: global state?
  GLboolean ProgramSeparable = GL_FALSE
  GLboolean DeleteStatus = GL_FALSE
  GLboolean LinkStatus = GL_FALSE
  GLboolean ValidateStatus = GL_FALSE
  GLuint AttachedShaders = 0
  GLuint[] AttachedShaders
  string ProgramInfoLog
  GLuint InfoLogLength = 0
  GLuint ProgramBinaryLength = 0
  GLboolean ProgramBinaryRetrievableHint = GL_FALSE
  u8[] ProgramBinary
  GLuint[3] ComputeWorkGroupSize // TODO: init
  string ObjectLabel

  // Table 21.22: Program Object State (cont.)
  GLuint ActiveUniforms = 0
  GLint[] Location
  GLuint[] Size // TODO: Redundant?
  GLuint[] Type // TODO: Redundant?
  string[] Name // TODO: Redundant? // SPEC: missing ×
  GLuint ActiveUniformMaxLength = 0
  u8[] Value
  GLuint ActiveAttributes = 0

  // Table 21.23: Program Object State (cont.)
  GLint[] Location
  GLuint[] Size
  GLuint[] Type
  string[] Name
  GLuint ActiveAttributeMaxLength = 0
  GLuint GeometryVerticesOut = 0
  GLenum GeometryInputType = GL_TRIANGLES
  GLenum GeometryOutputType = GL_TRIANGLE_STRIP
  GLuint GeometryShaderInvocations = 1
  GLenum TransformFeedbackBufferMode = GL_INTERLEAVED_ATTRIBS
  GLuint TransformFeedbackVaryings = 0
  GLuint TransformFeedbackVaryingMaxLength = 0
  GLuint[] Size // SPEC: Missing ×
  GLuint[] Type // SPEC: Missing ×
  string[] Name // SPEC: Missing ×

  // Table 21.24: Program Object State (cont.)
  GLuint ActiveUniformBlocks = 0
  GLuint ActiveUniformBlockMaxNameLength = 0
  GLenum[] UniformType
  GLuint[] UniformSize
  GLuint[] UniformNameLength
  GLint[] UniformBlockIndex
  GLint[] UniformOffset

  // Table 21.25: Program Object State (cont.)
  GLint[] UniformArrayStride
  GLint[] UniformMatrixStride
  GLboolean[] UniformIsRowMajor
  GLuint[] UniformBlockBinding // SPEC: Missing ×
  GLuint[] UniformBlockDataSize // SPEC: Missing ×
  GLuint[] UniformBlockNameLength // SPEC: Missing ×
  GLuint[] UniformBlockActiveUniforms // SPEC: Missing ×
  GLuint[][] UniformBlockActiveUniformIndices // SPEC: Missing ×
  GLboolean[] UniformBlockReferencedByVertexShader // SPEC: Missing ×
  GLboolean[] UniformBlockReferencedByFragmentShader // SPEC: Missing ×

  // Table 21.26: Program Object State (cont.)
  GLuint TessControlOutputVertices = 0
  GLenum TessGenMode = GL_QUADS
  GLenum TessGenSpacing = GL_EQUAL
  GLenum TessGenVertexOrder = GL_CCW
  GLboolean TessGenPointMode = GL_FALSE
  GLuint ActiveAtomicCounterBuffers = 0
}

@internal
class ProgramInterface {
  // Table 21.27: Program Interface State
  GLuint[] ActiveResources
  GLuint[] MaxNameLength
  GLuint[] MaxNumActiveVariables
}

@internal
class ProgramResource {
  // Table 21.28: Program Object Resource State
  GLuint[] ActiveVariables // SPEC: Missing ×
  GLuint ArraySize
  GLuint ArrayStride
  GLuint AtomicCounterBufferIndex
  GLuint BlockIndex
  GLuint BufferBinding
  GLuint BufferDataSize
  GLuint IsRowMajor
  GLuint Location
  GLuint MatrixStride

  // Table 21.29: Program Object Resource State (cont.)
  GLuint NameLength
  GLuint NumActiveVariables
  GLuint Offset
  GLuint ReferencedByVertexShader
  GLuint ReferencedByTessControlShader
  GLuint ReferencedByTessEvaluationShader
  GLuint ReferencedByGeometryShader
  GLuint ReferencedByFragmentShader
  GLuint ReferencedByComputeShader
  GLuint TopLevelArraySize
  GLuint TopLevelArrayStride
  GLuint Type
}
*/

sub string readString(GLsizei length, const GLchar* buffer, bool consider_zero_length_nt) {
  chars := as!(const char*)(buffer)
  return switch buffer != null {
    case true: {
      // Negative length implies null-terminated string
      switch (length < 0) || (consider_zero_length_nt && length == 0) {
        case true:  as!string(chars)
        case false: as!string(chars[0:length])
      }
    }
    case false: as!string(null)
  }
}

sub void writeString(GLsizei  buffer_size,
                     GLsizei* buffer_bytes_written,
                     GLchar*  buffer) {
  if (buffer != null) && (buffer_size > 0) {
    if buffer_bytes_written != null {
      length := as!GLsizei(?)
      buffer_bytes_written[0] = length // Excluding null-terminator
      write(buffer[0:length + 1]) // Including null-terminator
    } else {
      write(buffer[0:buffer_size])
    }
  }
}

sub ref!Shader GetShaderOrError(ShaderId shader) {
  ctx := GetContext()
  s := ctx.Objects.Shaders[shader]
  if s == null {
    if !(as!ProgramId(shader) in ctx.Objects.Programs) { glErrorInvalidObjectName!ShaderId(shader) }
    glErrorInvalidOperation()
  }
  return s
}

sub ref!Program GetProgramOrError(ProgramId program) {
  ctx := GetContext()
  p := ctx.Objects.Programs[program]
  if p == null {
    if !(as!ShaderId(program) in ctx.Objects.Shaders) { glErrorInvalidValue!ProgramId(program) }
    glErrorInvalidOperation()
  }
  return p
}

sub void AdjustShaderAttachCount(ref!Shader s, s32 delta) {
  ctx := GetContext()
  if s != null {
    s.AttachCount += delta
    assert(s.AttachCount >= 0)
    // Delete if it was marked for deletion and it is no longer attached anywhere
    if s.DeleteStatus && (s.AttachCount == 0) {
      delete(ctx.Objects.Shaders, s.ID)
    }
  }
}

sub void AdjustProgramUseCount(ref!Program p, s32 delta) {
  ctx := GetContext()
  if p != null {
    p.UseCount += delta
    assert(p.UseCount >= 0)
    // Delete if it was marked for deletion and it is no longer used anywhere
    if p.DeleteStatus && (p.UseCount == 0) {
      for _ , _ , s in p.Shaders {
        AdjustShaderAttachCount(s, -1)
      }
      delete(ctx.Objects.Programs, p.ID)
    }
  }
}

sub void SetProgramUniform(ref!Program p, UniformLocation location, u8[] value, GLenum type) {
  if p == null { glErrorInvalidOperation() }
  if location != -1 { // -1 is silently ignored.
    if !(location in p.Uniforms) { glErrorInvalidOperation() }
    // TODO: Remove the temporary.
    u := p.Uniforms[location]
    if len(u.Value) == len(value) {
      copy(u.Value, value)
    } else {
      u.Value = clone(value)
    }
    // TODO: Check that the type matches the type declared in the shader.
    u.Type = type
    // TODO: We need to split arrays to multiple (possibly non-consecutive) locations.
    p.Uniforms[location] = u
  }
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glActiveShaderProgram.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glActiveShaderProgram.xhtml", Version.GLES32)
cmd void glActiveShaderProgram(PipelineId pipeline, ProgramId program) {
  // TODO
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glAttachShader.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glAttachShader.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glAttachShader.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glAttachShader.xhtml", Version.GLES32)
cmd void glAttachShader(ProgramId program, ShaderId shader) {

  ctx := GetContext()
  _ = GetShaderOrError(shader)
  _ = GetProgramOrError(program)

  p := ctx.Objects.Programs[program]
  s := ctx.Objects.Shaders[shader]
  if s.Type in p.Shaders { glErrorInvalidOperation() } // shader already attached
  p.Shaders[s.Type] = s
  AdjustShaderAttachCount(s, +1)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindAttribLocation.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glBindAttribLocation.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glBindAttribLocation.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glBindAttribLocation.xhtml", Version.GLES32)
cmd void glBindAttribLocation(ProgramId program, AttributeLocation location, string name) {
  n := as!char[](name)
  if (len(n) > 2) && (as!string(n[0:3]) == "gl_") { glErrorInvalidOperation() }
  ctx := GetContext()
  _ = GetProgramOrError(program)
  CheckAttributeLocation(location)
  p := ctx.Objects.Programs[program]
  p.AttributeBindings[name] = location
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glBindProgramPipeline.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glBindProgramPipeline.xhtml", Version.GLES32)
cmd void glBindProgramPipeline(PipelineId pipeline) {
  // TODO
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCompileShader.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glCompileShader.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glCompileShader.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glCompileShader.xhtml", Version.GLES32)
cmd void glCompileShader(ShaderId shader) {

  _ = GetShaderOrError(shader)

  // TODO: shader.Binary < ?
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCreateProgram.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glCreateProgram.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glCreateProgram.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glCreateProgram.xhtml", Version.GLES32)
cmd ProgramId glCreateProgram() {
  ctx := GetContext()
  id := ?
  ctx.Objects.Programs[id] = new!Program(ID: id)
  return id
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glCreateShader.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glCreateShader.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glCreateShader.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glCreateShader.xhtml", Version.GLES32)
cmd ShaderId glCreateShader(GLenum type) {
  switch (type) {
    case GL_FRAGMENT_SHADER, GL_VERTEX_SHADER: {
      // version 2.0
    }
    @if(Version.GLES31)
    case GL_COMPUTE_SHADER: {
    }
    @if(Version.GLES32)
    case GL_GEOMETRY_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER: {
    }
    default: {
      glErrorInvalidEnum(type)
    }
  }

  ctx := GetContext()
  id := ?
  ctx.Objects.Shaders[id] = new!Shader(ID: id, ShaderType: type, Type: type)
  return id
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glCreateShaderProgram.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glCreateShaderProgram.xhtml", Version.GLES32)
cmd ProgramId glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar* const* strings) {
  switch (type) {
    case GL_COMPUTE_SHADER, GL_FRAGMENT_SHADER, GL_VERTEX_SHADER: {
      // version 3.1
    }
    @if(Version.GLES32)
    case GL_GEOMETRY_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER: {
    }
    default: {
      glErrorInvalidEnum(type)
    }
  }
  sources := strings[0:count]
  for i in (0 .. count) {
    _ = as!string(as!char*(sources[i]))
  }
  // TODO
  return ?
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteProgram.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glDeleteProgram.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glDeleteProgram.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDeleteProgram.xhtml", Version.GLES32)
cmd void glDeleteProgram(ProgramId program) {
  if program != 0 {
    p := GetProgramOrError(program)
    p.DeleteStatus = true
    AdjustProgramUseCount(p, 0) // Do not change the count, just check if it can be deleted now.
  }
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glDeleteProgramPipelines.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDeleteProgramPipelines.xhtml", Version.GLES32)
cmd void glDeleteProgramPipelines(GLsizei n, const PipelineId* pipelines) {
  DeleteProgramPipelines(n, pipelines)
}

sub void DeleteProgramPipelines(GLsizei count, const PipelineId* pipelines) {
  CheckCountGE!GLsizei(count, 0)
  ids := pipelines[0:count]
  ctx := GetContext()
  for i in (0 .. count) {
    id := ids[i]
    if id != 0 {
      delete(ctx.Objects.Pipelines, id)
      delete(ctx.Objects.GeneratedNames.Pipelines, id)
    }
  }
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteShader.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glDeleteShader.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glDeleteShader.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDeleteShader.xhtml", Version.GLES32)
cmd void glDeleteShader(ShaderId shader) {
  if shader != 0 {
    s := GetShaderOrError(shader)
    s.DeleteStatus = true
    AdjustShaderAttachCount(s, 0) // Do not change the count, just check if it can be deleted now.
  }
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDetachShader.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glDetachShader.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glDetachShader.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDetachShader.xhtml", Version.GLES32)
cmd void glDetachShader(ProgramId program, ShaderId shader) {

  s := GetShaderOrError(shader)
  p := GetProgramOrError(program)

  if (!(s.Type in p.Shaders)) || (p.Shaders[s.Type] != s) { glErrorInvalidOperation() }
  delete(p.Shaders, s.Type)
  AdjustShaderAttachCount(s, -1)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glDispatchCompute.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDispatchCompute.xhtml", Version.GLES32)
cmd void glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) {
  // TODO
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glDispatchComputeIndirect.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDispatchComputeIndirect.xhtml", Version.GLES32)
cmd void glDispatchComputeIndirect(GLintptr indirect) {
  // TODO
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGenProgramPipelines.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGenProgramPipelines.xhtml", Version.GLES32)
cmd void glGenProgramPipelines(GLsizei count, PipelineId* pipelines) {
  GenProgramPipelines(count, pipelines)
}

sub void GenProgramPipelines(GLsizei count, PipelineId* pipelines) {
  CheckCountGE!GLsizei(count, 0)
  t := pipelines[0:count]
  ctx := GetContext()
  for i in (0 .. count) {
    id := as!PipelineId(?)
    assert(id != 0)
    ctx.Objects.GeneratedNames.Pipelines[id] = true
    t[i] = id
  }
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetActiveAttrib.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetActiveAttrib.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetActiveAttrib.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetActiveAttrib.xhtml", Version.GLES32)
cmd void glGetActiveAttrib(ProgramId      program,
                           AttributeIndex index,
                           GLsizei        buffer_size,
                           GLsizei*       buffer_bytes_written,
                           GLint*         vector_count,
                           GLenum*        type,
                           GLchar*        name) {

  CheckSizeGE!GLsizei(buffer_size, 0)

  ctx := GetContext()
  _ = GetProgramOrError(program)
  p := ctx.Objects.Programs[program]
  if !(index in p.ActiveAttributes) { glErrorInvalidValue!AttributeIndex(index) }

  writeString(buffer_size, buffer_bytes_written, name)

  vector_count[0] = as!GLint(?)
  type[0] = as!GLenum(?)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetActiveUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetActiveUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetActiveUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetActiveUniform.xhtml", Version.GLES32)
cmd void glGetActiveUniform(ProgramId    program,
                            UniformIndex index,
                            GLsizei      buffer_size,
                            GLsizei*     buffer_bytes_written,
                            GLint*       vector_count,
                            GLenum*      type,
                            GLchar*      name) {

  ctx := GetContext()
  _ = GetProgramOrError(program)
  CheckSizeGE!GLsizei(buffer_size, 0)
  p := ctx.Objects.Programs[program]
  if !(index in p.ActiveUniforms) { glErrorInvalidValue!UniformIndex(index) }

  writeString(buffer_size, buffer_bytes_written, name)

  vector_count[0] = as!GLint(?)
  type[0] = as!GLenum(?)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetActiveUniformBlockName.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetActiveUniformBlockName.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetActiveUniformBlockName.xhtml", Version.GLES32)
cmd void glGetActiveUniformBlockName(ProgramId         program,
                                     UniformBlockIndex uniform_block_index,
                                     GLsizei           buffer_size,
                                     GLsizei*          buffer_bytes_written,
                                     GLchar*           name) {

  writeString(buffer_size, buffer_bytes_written, name)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetActiveUniformBlockiv.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetActiveUniformBlockiv.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetActiveUniformBlockiv.xhtml", Version.GLES32)
cmd void glGetActiveUniformBlockiv(ProgramId         program,
                                   UniformBlockIndex uniform_block_index,
                                   GLenum            parameter_name,
                                   GLint*            parameters) {
  switch (parameter_name) {
    case GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS, GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES,
        GL_UNIFORM_BLOCK_BINDING, GL_UNIFORM_BLOCK_DATA_SIZE, GL_UNIFORM_BLOCK_NAME_LENGTH,
        GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER,
        GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: {
      // version 3.0
    }
    default: {
      glErrorInvalidEnum(parameter_name)
    }
  }

  parameters[0] = ?
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetActiveUniformsiv.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetActiveUniformsiv.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetActiveUniformsiv.xhtml", Version.GLES32)
cmd void glGetActiveUniformsiv(ProgramId           program,
                               GLsizei             uniform_count,
                               const UniformIndex* uniform_indices,
                               GLenum              parameter_name,
                               GLint*              parameters) {
  switch (parameter_name) {
    case GL_UNIFORM_ARRAY_STRIDE, GL_UNIFORM_BLOCK_INDEX, GL_UNIFORM_IS_ROW_MAJOR,
        GL_UNIFORM_MATRIX_STRIDE, GL_UNIFORM_NAME_LENGTH, GL_UNIFORM_OFFSET, GL_UNIFORM_SIZE,
        GL_UNIFORM_TYPE: {
      // version 3.0
    }
    default: {
      glErrorInvalidEnum(parameter_name)
    }
  }

  read(uniform_indices[0:uniform_count])
  write(parameters[0:uniform_count])
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetAttachedShaders.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetAttachedShaders.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetAttachedShaders.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetAttachedShaders.xhtml", Version.GLES32)
cmd void glGetAttachedShaders(ProgramId program,
                              GLsizei   buffer_length,
                              GLsizei*  shaders_length_written,
                              ShaderId* shaders) {

  ctx := GetContext()
  _ = GetProgramOrError(program)
  CheckGE!GLsizei(buffer_length, 0)
  p := ctx.Objects.Programs[program]
  l := min!s32(as!s32(buffer_length), len(p.Shaders))
  if shaders_length_written != null {
    shaders_length_written[0] = as!GLsizei(l)
  }

  s := shaders[0:l]
  for i , _ , v in p.Shaders {
    if i < l {
      s[i] = v.ID
    }
  }
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetAttribLocation.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetAttribLocation.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetAttribLocation.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetAttribLocation.xhtml", Version.GLES32)
cmd GLint glGetAttribLocation(ProgramId program, string name) {
  // The HTML and PDF give different error codes. This matches the PDF.
  _ = GetProgramOrError(program)
  return ?
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetFragDataLocation.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetFragDataLocation.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetFragDataLocation.xhtml", Version.GLES32)
cmd GLint glGetFragDataLocation(ProgramId program, string name) {
  _ = GetProgramOrError(program)
  return ?
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetProgramBinary.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetProgramBinary.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetProgramBinary.xhtml", Version.GLES32)
cmd void glGetProgramBinary(ProgramId program,
                            GLsizei   bufSize,
                            GLsizei*  length,
                            GLenum*   binaryFormat,
                            void*     binary) {
  GetProgramBinary(program, bufSize, length, binaryFormat, binary)
}

sub void GetProgramBinary(ProgramId program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void* binary) {
  _ = program // TODO: Not needed? Remove from signature.
  if length != null {
    l := as!GLsizei(?)
    length[0] = l
    write(binary[0:l])
  } else {
    write(binary[0:bufSize])
  }
  binaryFormat[0] = ?
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetProgramInfoLog.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetProgramInfoLog.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetProgramInfoLog.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetProgramInfoLog.xhtml", Version.GLES32)
cmd void glGetProgramInfoLog(ProgramId program,
                             GLsizei   buffer_length,
                             GLsizei*  string_length_written,
                             GLchar*   info) {
  _ = GetProgramOrError(program)
  CheckGE!GLsizei(buffer_length, 0)
  writeString(buffer_length, string_length_written, info)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetProgramInterface.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetProgramInterface.xhtml", Version.GLES32)
cmd void glGetProgramInterfaceiv(ProgramId program,
                                 GLenum    programInterface,
                                 GLenum    pname,
                                 GLint*    params) {
  switch (programInterface) {
    case GL_ATOMIC_COUNTER_BUFFER, GL_BUFFER_VARIABLE, GL_PROGRAM_INPUT, GL_PROGRAM_OUTPUT,
        GL_SHADER_STORAGE_BLOCK, GL_TRANSFORM_FEEDBACK_BUFFER, GL_TRANSFORM_FEEDBACK_VARYING,
        GL_UNIFORM, GL_UNIFORM_BLOCK: {
      // version 3.1
    }
    default: {
      glErrorInvalidEnum(programInterface)
    }
  }
  switch (pname) {
    case GL_ACTIVE_RESOURCES, GL_MAX_NAME_LENGTH, GL_MAX_NUM_ACTIVE_VARIABLES: {
      // version 3.1
    }
    default: {
      glErrorInvalidEnum(pname)
    }
  }
  // TODO
  params[0] = ?
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetProgramPipelineInfoLog.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetProgramPipelineInfoLog.xhtml", Version.GLES32)
cmd void glGetProgramPipelineInfoLog(PipelineId pipeline,
                                     GLsizei    bufSize,
                                     GLsizei*   length,
                                     GLchar*    infoLog) {
  writeString(bufSize, length, infoLog)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetProgramPipeline.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetProgramPipeline.xhtml", Version.GLES32)
cmd void glGetProgramPipelineiv(PipelineId pipeline, GLenum pname, GLint* params) {
  switch (pname) {
    case GL_ACTIVE_PROGRAM, GL_COMPUTE_SHADER, GL_FRAGMENT_SHADER, GL_INFO_LOG_LENGTH,
        GL_VALIDATE_STATUS, GL_VERTEX_SHADER: {
      // version 3.1
    }
    @if(Version.GLES32)
    case GL_GEOMETRY_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER: {
    }
    default: {
      glErrorInvalidEnum(pname)
    }
  }
  // TODO
  params[0] = ?
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetProgramResourceIndex.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetProgramResourceIndex.xhtml", Version.GLES32)
cmd GLuint glGetProgramResourceIndex(ProgramId program,
                                     GLenum    programInterface,
                                     string    name) {
  switch (programInterface) {
    case GL_BUFFER_VARIABLE, GL_PROGRAM_INPUT, GL_PROGRAM_OUTPUT, GL_SHADER_STORAGE_BLOCK,
        GL_TRANSFORM_FEEDBACK_VARYING, GL_UNIFORM, GL_UNIFORM_BLOCK: {
      // version 3.1
    }
    default: {
      glErrorInvalidEnum(programInterface)
    }
  }
  // TODO
  return ?
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetProgramResourceLocation.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetProgramResourceLocation.xhtml", Version.GLES32)
cmd GLint glGetProgramResourceLocation(ProgramId program,
                                       GLenum    programInterface,
                                       string    name) {
  switch (programInterface) {
    case GL_PROGRAM_INPUT, GL_PROGRAM_OUTPUT, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM: {
      // version 3.1
    }
    default: {
      glErrorInvalidEnum(programInterface)
    }
  }
  // TODO
  return ?
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetProgramResourceName.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetProgramResourceName.xhtml", Version.GLES32)
cmd void glGetProgramResourceName(ProgramId program,
                                  GLenum    programInterface,
                                  GLuint    index,
                                  GLsizei   bufSize,
                                  GLsizei*  length,
                                  GLchar*   name) {
  switch (programInterface) {
    case GL_BUFFER_VARIABLE, GL_PROGRAM_INPUT, GL_PROGRAM_OUTPUT, GL_SHADER_STORAGE_BLOCK,
        GL_TRANSFORM_FEEDBACK_VARYING, GL_UNIFORM, GL_UNIFORM_BLOCK: {
      // version 3.1
    }
    default: {
      glErrorInvalidEnum(programInterface)
    }
  }
  writeString(bufSize, length, name)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetProgramResource.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetProgramResource.xhtml", Version.GLES32)
cmd void glGetProgramResourceiv(ProgramId     program,
                                GLenum        programInterface,
                                GLuint        index,
                                GLsizei       propCount,
                                const GLenum* props,
                                GLsizei       bufSize,
                                GLsizei*      length,
                                GLint*        params) {
  switch (programInterface) {
    case GL_ATOMIC_COUNTER_BUFFER, GL_BUFFER_VARIABLE, GL_PROGRAM_INPUT, GL_PROGRAM_OUTPUT,
        GL_SHADER_STORAGE_BLOCK, GL_TRANSFORM_FEEDBACK_BUFFER, GL_TRANSFORM_FEEDBACK_VARYING,
        GL_UNIFORM, GL_UNIFORM_BLOCK: {
      // version 3.1
    }
    default: {
      glErrorInvalidEnum(programInterface)
    }
  }
  // TODO
  read(props[0:propCount])
  if length != null {
    l := as!GLsizei(?)
    length[0] = l
    write(params[0:l])
  } else {
    write(params[0:bufSize])
  }
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetProgramiv.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetProgramiv.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetProgramiv.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetProgramiv.xhtml", Version.GLES32)
cmd void glGetProgramiv(ProgramId program, GLenum parameter, GLint* value) {
  switch (parameter) {
    case GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS,
        GL_ACTIVE_UNIFORM_MAX_LENGTH, GL_ATTACHED_SHADERS, GL_DELETE_STATUS, GL_INFO_LOG_LENGTH,
        GL_LINK_STATUS, GL_VALIDATE_STATUS: {
      // version 2.0
    }
    @if(Version.GLES30)
    case GL_ACTIVE_UNIFORM_BLOCKS, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH,
        GL_PROGRAM_BINARY_RETRIEVABLE_HINT, GL_TRANSFORM_FEEDBACK_BUFFER_MODE,
        GL_TRANSFORM_FEEDBACK_VARYINGS, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: {
    }
    @if(Version.GLES30)
    case GL_PROGRAM_BINARY_LENGTH: {
      // TODO: Missing from online man pages.
    }
    @if(Version.GLES31)
    case GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, GL_COMPUTE_WORK_GROUP_SIZE, GL_PROGRAM_SEPARABLE: {
    }
    @if(Version.GLES32)
    case GL_GEOMETRY_INPUT_TYPE, GL_GEOMETRY_OUTPUT_TYPE,
        GL_GEOMETRY_VERTICES_OUT, GL_GEOMETRY_SHADER_INVOCATIONS,
        GL_TESS_CONTROL_OUTPUT_VERTICES, GL_TESS_GEN_MODE, GL_TESS_GEN_POINT_MODE,
        GL_TESS_GEN_SPACING, GL_TESS_GEN_VERTEX_ORDER: {
    }
    default: {
      glErrorInvalidEnum(parameter)
    }
  }
  _ = GetProgramOrError(program)

  value[0] = ?
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetShaderInfoLog.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetShaderInfoLog.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetShaderInfoLog.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetShaderInfoLog.xhtml", Version.GLES32)
cmd void glGetShaderInfoLog(ShaderId shader,
                            GLsizei  buffer_length,
                            GLsizei* string_length_written,
                            GLchar*  info) {
  _ = GetShaderOrError(shader)
  CheckGE!GLsizei(buffer_length, 0)
  writeString(buffer_length, string_length_written, info)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetShaderPrecisionFormat.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetShaderPrecisionFormat.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetShaderPrecisionFormat.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetShaderPrecisionFormat.xhtml", Version.GLES32)
cmd void glGetShaderPrecisionFormat(GLenum shader_type,
                                    GLenum precision_type,
                                    GLint* range,
                                    GLint* precision) {
  switch (shader_type) {
    case GL_FRAGMENT_SHADER, GL_VERTEX_SHADER: {
      // version 2.0
    }
    default: {
      glErrorInvalidEnum(shader_type)
    }
  }
  switch (precision_type) {
    case GL_HIGH_FLOAT, GL_HIGH_INT, GL_LOW_FLOAT, GL_LOW_INT, GL_MEDIUM_FLOAT, GL_MEDIUM_INT: {
      // version 2.0
    }
    default: {
      glErrorInvalidEnum(precision_type)
    }
  }

  write(range[0:2])
  precision[0] = ?
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetShaderSource.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetShaderSource.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetShaderSource.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetShaderSource.xhtml", Version.GLES32)
cmd void glGetShaderSource(ShaderId shader,
                           GLsizei  buffer_length,
                           GLsizei* string_length_written,
                           GLchar*  source) {
  _ = GetShaderOrError(shader)
  CheckGE!GLsizei(buffer_length, 0)
  // TODO: Handle properly. Mind the null-terminator.
  writeString(buffer_length, string_length_written, source)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetShaderiv.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetShaderiv.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetShaderiv.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetShaderiv.xhtml", Version.GLES32)
cmd void glGetShaderiv(ShaderId shader, GLenum parameter, GLint* value) {
  switch (parameter) {
    case GL_COMPILE_STATUS, GL_DELETE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH,
        GL_SHADER_TYPE: {
      // version 2.0
    }
    default: {
      glErrorInvalidEnum(parameter)
    }
  }

  ctx := GetContext()
  _ = GetShaderOrError(shader)
  s := ctx.Objects.Shaders[shader]
  value[0] = switch (parameter) {
    case GL_SHADER_TYPE:          as!GLint(s.Type)
    case GL_DELETE_STATUS:        switch (s.DeleteStatus) { case true: 1 case false: 0 }
    case GL_COMPILE_STATUS:       switch (s.Compiled) { case true: 1 case false: 0 }
    case GL_INFO_LOG_LENGTH:      as!GLint(len(s.InfoLog))
    case GL_SHADER_SOURCE_LENGTH: as!GLint(len(s.Source))
  }
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetUniformBlockIndex.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetUniformBlockIndex.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetUniformBlockIndex.xhtml", Version.GLES32)
cmd UniformBlockIndex glGetUniformBlockIndex(ProgramId program, string uniformBlockName) {
  // TODO
  return ?
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetUniformIndices.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetUniformIndices.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetUniformIndices.xhtml", Version.GLES32)
cmd void glGetUniformIndices(ProgramId            program,
                             GLsizei              uniformCount,
                             const GLchar* const* uniformNames,
                             UniformIndex*        uniformIndices) {
  names := uniformNames[0:uniformCount]
  for i in (0 .. uniformCount) {
    _ = as!string(as!char*(names[i]))
  }
  write(uniformIndices[0:uniformCount])
  // TODO
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetUniformLocation.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetUniformLocation.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetUniformLocation.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetUniformLocation.xhtml", Version.GLES32)
cmd UniformLocation glGetUniformLocation(ProgramId program, string name) {
  _ = GetProgramOrError(program)
  return ?
}

sub void GetUniformv!T(ProgramId program, UniformLocation location, T values) {
  _ = GetProgramOrError(program)
  // TODO: Determine size based on uniform type.
  _ = program // TODO
  _ = location // TODO
  write(values[0:16])
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetUniform.xhtml", Version.GLES32)
cmd void glGetUniformfv(ProgramId program, UniformLocation location, GLfloat* values) {
  GetUniformv!GLfloat*(program, location, values)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetUniform.xhtml", Version.GLES32)
cmd void glGetUniformiv(ProgramId program, UniformLocation location, GLint* values) {
  GetUniformv!GLint*(program, location, values)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetUniform.xhtml", Version.GLES32)
cmd void glGetUniformuiv(ProgramId program, UniformLocation location, GLuint* values) {
  GetUniformv!GLuint*(program, location, values)
}

sub void GetnUniformfv!T(ProgramId       program,
                         UniformLocation location,
                         GLsizei         bufSize, // bytes
                         T               values) {
  _ = program // TODO: Use or lose.
  _ = location // TODO: Use or lose.
  write(as!char*(values)[0:bufSize])
}

@if(Version.GLES32)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetUniform.xhtml", Version.GLES32)
cmd void glGetnUniformfv(ProgramId       program,
                         UniformLocation location,
                         GLsizei         bufSize,
                         GLfloat*        values) {
  GetnUniformfv!GLfloat*(program, location, bufSize, values)
}

@if(Version.GLES32)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetUniform.xhtml", Version.GLES32)
cmd void glGetnUniformiv(ProgramId       program,
                         UniformLocation location,
                         GLsizei         bufSize,
                         GLint*          values) {
  GetnUniformiv(program, location, bufSize, values)
}

sub void GetnUniformiv(ProgramId program, UniformLocation location, GLsizei bufSize, GLint* values) {
  GetnUniformfv!GLint*(program, location, bufSize, values)
}

@if(Version.GLES32)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetUniform.xhtml", Version.GLES32)
cmd void glGetnUniformuiv(ProgramId       program,
                          UniformLocation location,
                          GLsizei         bufSize,
                          GLuint*         values) {
  GetnUniformuiv(program, location, bufSize, values)
}

sub void GetnUniformuiv(ProgramId program, UniformLocation location, GLsizei bufSize, GLuint* values) {
  GetnUniformfv!GLuint*(program, location, bufSize, values)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsProgram.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glIsProgram.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glIsProgram.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glIsProgram.xhtml", Version.GLES32)
cmd GLboolean glIsProgram(ProgramId program) {

  ctx := GetContext()
  return as!GLboolean(program in ctx.Objects.Programs)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glIsProgramPipeline.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glIsProgramPipeline.xhtml", Version.GLES32)
cmd GLboolean glIsProgramPipeline(PipelineId pipeline) {
  // TODO
  return ?
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsShader.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glIsShader.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glIsShader.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glIsShader.xhtml", Version.GLES32)
cmd GLboolean glIsShader(ShaderId shader) {

  ctx := GetContext()
  return as!GLboolean(shader in ctx.Objects.Shaders)
}

@if(Version.GLES20)
@custom
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glLinkProgram.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glLinkProgram.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glLinkProgram.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glLinkProgram.xhtml", Version.GLES32)
cmd void glLinkProgram(ProgramId program) {
  _ = GetProgramOrError(program)

  ctx := GetContext()
  ApplyProgramInfoExtra(program, GetProgramInfoExtra(ctx, program))
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glMemoryBarrier.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glMemoryBarrier.xhtml", Version.GLES32)
cmd void glMemoryBarrier(GLbitfield barriers) {
  supportsBits(barriers, GL_ALL_BARRIER_BITS | GL_ATOMIC_COUNTER_BARRIER_BIT | GL_BUFFER_UPDATE_BARRIER_BIT | GL_COMMAND_BARRIER_BIT | GL_ELEMENT_ARRAY_BARRIER_BIT | GL_FRAMEBUFFER_BARRIER_BIT | GL_PIXEL_BUFFER_BARRIER_BIT | GL_SHADER_IMAGE_ACCESS_BARRIER_BIT | GL_SHADER_STORAGE_BARRIER_BIT | GL_TEXTURE_FETCH_BARRIER_BIT | GL_TEXTURE_UPDATE_BARRIER_BIT | GL_TRANSFORM_FEEDBACK_BARRIER_BIT | GL_UNIFORM_BARRIER_BIT | GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT)
  if (GL_ALL_BARRIER_BITS in barriers) {
  }
  if (GL_ATOMIC_COUNTER_BARRIER_BIT in barriers) {
  }
  if (GL_BUFFER_UPDATE_BARRIER_BIT in barriers) {
  }
  if (GL_COMMAND_BARRIER_BIT in barriers) {
  }
  if (GL_ELEMENT_ARRAY_BARRIER_BIT in barriers) {
  }
  if (GL_FRAMEBUFFER_BARRIER_BIT in barriers) {
  }
  if (GL_PIXEL_BUFFER_BARRIER_BIT in barriers) {
  }
  if (GL_SHADER_IMAGE_ACCESS_BARRIER_BIT in barriers) {
  }
  if (GL_SHADER_STORAGE_BARRIER_BIT in barriers) {
  }
  if (GL_TEXTURE_FETCH_BARRIER_BIT in barriers) {
  }
  if (GL_TEXTURE_UPDATE_BARRIER_BIT in barriers) {
  }
  if (GL_TRANSFORM_FEEDBACK_BARRIER_BIT in barriers) {
  }
  if (GL_UNIFORM_BARRIER_BIT in barriers) {
  }
  if (GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT in barriers) {
  }
  // TODO
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glMemoryBarrier.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glMemoryBarrier.xhtml", Version.GLES32)
cmd void glMemoryBarrierByRegion(GLbitfield barriers) {
  supportsBits(barriers, GL_ALL_BARRIER_BITS | GL_ATOMIC_COUNTER_BARRIER_BIT | GL_BUFFER_UPDATE_BARRIER_BIT | GL_COMMAND_BARRIER_BIT | GL_ELEMENT_ARRAY_BARRIER_BIT | GL_FRAMEBUFFER_BARRIER_BIT | GL_PIXEL_BUFFER_BARRIER_BIT | GL_SHADER_IMAGE_ACCESS_BARRIER_BIT | GL_SHADER_STORAGE_BARRIER_BIT | GL_TEXTURE_FETCH_BARRIER_BIT | GL_TEXTURE_UPDATE_BARRIER_BIT | GL_TRANSFORM_FEEDBACK_BARRIER_BIT | GL_UNIFORM_BARRIER_BIT | GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT)
  if (GL_ALL_BARRIER_BITS in barriers) {
  }
  if (GL_ATOMIC_COUNTER_BARRIER_BIT in barriers) {
  }
  if (GL_BUFFER_UPDATE_BARRIER_BIT in barriers) {
  }
  if (GL_COMMAND_BARRIER_BIT in barriers) {
  }
  if (GL_ELEMENT_ARRAY_BARRIER_BIT in barriers) {
  }
  if (GL_FRAMEBUFFER_BARRIER_BIT in barriers) {
  }
  if (GL_PIXEL_BUFFER_BARRIER_BIT in barriers) {
  }
  if (GL_SHADER_IMAGE_ACCESS_BARRIER_BIT in barriers) {
  }
  if (GL_SHADER_STORAGE_BARRIER_BIT in barriers) {
  }
  if (GL_TEXTURE_FETCH_BARRIER_BIT in barriers) {
  }
  if (GL_TEXTURE_UPDATE_BARRIER_BIT in barriers) {
  }
  if (GL_TRANSFORM_FEEDBACK_BARRIER_BIT in barriers) {
  }
  if (GL_UNIFORM_BARRIER_BIT in barriers) {
  }
  if (GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT in barriers) {
  }
  // TODO
}

@if(Version.GLES30)
@custom
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glProgramBinary.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramBinary.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramBinary.xhtml", Version.GLES32)
cmd void glProgramBinary(ProgramId   program,
                         GLenum      binaryFormat,
                         const void* binary,
                         GLsizei     length) {
  ProgramBinary(program, binaryFormat, binary, length)
}

sub void ProgramBinary(ProgramId program, GLenum binaryFormat, const void* binary, GLsizei length) {
  ctx := GetContext()
  _ = GetProgramOrError(program)
  p := ctx.Objects.Programs[program]
  switch (binaryFormat) {
    case GL_Z400_BINARY_AMD: {
      p.Binary = clone(as!u8[](binary[0:length]))
      p.Precompiled = true
      ApplyProgramInfoExtra(program, GetProgramInfoExtra(ctx, program))
    }
    default: {
      glErrorInvalidEnum(binaryFormat)
    }
  }
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glProgramParameteri.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramParameteri.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramParameteri.xhtml", Version.GLES32)
cmd void glProgramParameteri(ProgramId program, GLenum pname, GLint value) {
  ProgramParameteri(program, pname, value)
}

sub void ProgramParameteri(ProgramId program, GLenum pname, GLint value) {
  switch (pname) {
    case GL_PROGRAM_BINARY_RETRIEVABLE_HINT: {
      // version 3.0
    }
    @if(Version.GLES31)
    case GL_PROGRAM_SEPARABLE: {
    }
    default: {
      glErrorInvalidEnum(pname)
    }
  }

  _ = program // TODO
  _ = value // TODO
}

sub void ProgramUniformv!T(ProgramId       program,
                           UniformLocation location,
                           T               values,
                           GLenum          type) {
  SetProgramUniform(GetProgramOrError(program), location, as!u8[](values), type)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform1f(ProgramId program, UniformLocation location, GLfloat value0) {
  ProgramUniform1f(program, location, value0)
}

sub void ProgramUniform1f(ProgramId program, UniformLocation location, GLfloat value0) {
  v := make!GLfloat(1)
  v[0] = value0
  ProgramUniformv!GLfloat[](program, location, v, GL_FLOAT)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform1fv(ProgramId       program,
                             UniformLocation location,
                             GLsizei         count,
                             const GLfloat*  values) {
  ProgramUniform1fv(program, location, count, values)
}

sub void ProgramUniform1fv(ProgramId program, UniformLocation location, GLsizei count, const GLfloat* values) {
  v := values[0:count]
  ProgramUniformv!GLfloat[](program, location, v, GL_FLOAT)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform1i(ProgramId program, UniformLocation location, GLint value0) {
  ProgramUniform1i(program, location, value0)
}

sub void ProgramUniform1i(ProgramId program, UniformLocation location, GLint value0) {
  v := make!GLint(1)
  v[0] = value0
  ProgramUniformv!GLint[](program, location, v, GL_INT)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform1iv(ProgramId       program,
                             UniformLocation location,
                             GLsizei         count,
                             const GLint*    values) {
  ProgramUniform1iv(program, location, count, values)
}

sub void ProgramUniform1iv(ProgramId program, UniformLocation location, GLsizei count, const GLint* values) {
  v := values[0:count]
  ProgramUniformv!GLint[](program, location, v, GL_INT)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform1ui(ProgramId program, UniformLocation location, GLuint value0) {
  ProgramUniform1ui(program, location, value0)
}

sub void ProgramUniform1ui(ProgramId program, UniformLocation location, GLuint value0) {
  v := make!GLuint(1)
  v[0] = value0
  ProgramUniformv!GLuint[](program, location, v, GL_UNSIGNED_INT)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform1uiv(ProgramId       program,
                              UniformLocation location,
                              GLsizei         count,
                              const GLuint*   values) {
  ProgramUniform1uiv(program, location, count, values)
}

sub void ProgramUniform1uiv(ProgramId program, UniformLocation location, GLsizei count, const GLuint* values) {
  v := values[0:count]
  ProgramUniformv!GLuint[](program, location, v, GL_UNSIGNED_INT)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform2f(ProgramId program, UniformLocation location, GLfloat value0, GLfloat value1) {
  ProgramUniform2f(program, location, value0, value1)
}

sub void ProgramUniform2f(ProgramId program, UniformLocation location, GLfloat value0, GLfloat value1) {
  v := make!Vec2f(1)
  v[0] = Vec2f(value0, value1)
  ProgramUniformv!Vec2f[](program, location, v, GL_FLOAT_VEC2)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform2fv(ProgramId       program,
                             UniformLocation location,
                             GLsizei         count,
                             const GLfloat*  values) {
  ProgramUniform2fv(program, location, count, values)
}

sub void ProgramUniform2fv(ProgramId program, UniformLocation location, GLsizei count, const GLfloat* values) {
  v := as!Vec2f*(values)[0:count]
  ProgramUniformv!Vec2f[](program, location, v, GL_FLOAT_VEC2)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform2i(ProgramId program, UniformLocation location, GLint value0, GLint value1) {
  ProgramUniform2i(program, location, value0, value1)
}

sub void ProgramUniform2i(ProgramId program, UniformLocation location, GLint value0, GLint value1) {
  v := make!Vec2i(1)
  v[0] = Vec2i(value0, value1)
  ProgramUniformv!Vec2i[](program, location, v, GL_INT_VEC2)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform2iv(ProgramId       program,
                             UniformLocation location,
                             GLsizei         count,
                             const GLint*    values) {
  ProgramUniform2iv(program, location, count, values)
}

sub void ProgramUniform2iv(ProgramId program, UniformLocation location, GLsizei count, const GLint* values) {
  v := as!Vec2i*(values)[0:count]
  ProgramUniformv!Vec2i[](program, location, v, GL_INT_VEC2)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform2ui(ProgramId program, UniformLocation location, GLuint value0, GLuint value1) {
  ProgramUniform2ui(program, location, value0, value1)
}

sub void ProgramUniform2ui(ProgramId program, UniformLocation location, GLuint value0, GLuint value1) {
  v := make!Vec2u(1)
  v[0] = Vec2u(value0, value1)
  ProgramUniformv!Vec2u[](program, location, v, GL_UNSIGNED_INT_VEC2)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform2uiv(ProgramId       program,
                              UniformLocation location,
                              GLsizei         count,
                              const GLuint*   values) {
  ProgramUniform2uiv(program, location, count, values)
}

sub void ProgramUniform2uiv(ProgramId program, UniformLocation location, GLsizei count, const GLuint* values) {
  v := as!Vec2u*(values)[0:count]
  ProgramUniformv!Vec2u[](program, location, v, GL_UNSIGNED_INT_VEC2)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform3f(ProgramId       program,
                            UniformLocation location,
                            GLfloat         value0,
                            GLfloat         value1,
                            GLfloat         value2) {
  ProgramUniform3f(program, location, value0, value1, value2)
}

sub void ProgramUniform3f(ProgramId program, UniformLocation location, GLfloat value0, GLfloat value1, GLfloat value2) {
  v := make!Vec3f(1)
  v[0] = Vec3f(value0, value1, value2)
  ProgramUniformv!Vec3f[](program, location, v, GL_FLOAT_VEC3)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform3fv(ProgramId       program,
                             UniformLocation location,
                             GLsizei         count,
                             const GLfloat*  values) {
  ProgramUniform3fv(program, location, count, values)
}

sub void ProgramUniform3fv(ProgramId program, UniformLocation location, GLsizei count, const GLfloat* values) {
  v := as!Vec3f*(values)[0:count]
  ProgramUniformv!Vec3f[](program, location, v, GL_FLOAT_VEC3)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform3i(ProgramId       program,
                            UniformLocation location,
                            GLint           value0,
                            GLint           value1,
                            GLint           value2) {
  ProgramUniform3i(program, location, value0, value1, value2)
}

sub void ProgramUniform3i(ProgramId program, UniformLocation location, GLint value0, GLint value1, GLint value2) {
  v := make!Vec3i(1)
  v[0] = Vec3i(value0, value1, value2)
  ProgramUniformv!Vec3i[](program, location, v, GL_INT_VEC3)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform3iv(ProgramId       program,
                             UniformLocation location,
                             GLsizei         count,
                             const GLint*    values) {
  ProgramUniform3iv(program, location, count, values)
}

sub void ProgramUniform3iv(ProgramId program, UniformLocation location, GLsizei count, const GLint* values) {
  v := as!Vec3i*(values)[0:count]
  ProgramUniformv!Vec3i[](program, location, v, GL_INT_VEC3)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform3ui(ProgramId       program,
                             UniformLocation location,
                             GLuint          value0,
                             GLuint          value1,
                             GLuint          value2) {
  ProgramUniform3ui(program, location, value0, value1, value2)
}

sub void ProgramUniform3ui(ProgramId program, UniformLocation location, GLuint value0, GLuint value1, GLuint value2) {
  v := make!Vec3u(1)
  v[0] = Vec3u(value0, value1, value2)
  ProgramUniformv!Vec3u[](program, location, v, GL_UNSIGNED_INT_VEC3)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform3uiv(ProgramId       program,
                              UniformLocation location,
                              GLsizei         count,
                              const GLuint*   values) {
  ProgramUniform3uiv(program, location, count, values)
}

sub void ProgramUniform3uiv(ProgramId program, UniformLocation location, GLsizei count, const GLuint* values) {
  v := as!Vec3u*(values)[0:count]
  ProgramUniformv!Vec3u[](program, location, v, GL_UNSIGNED_INT_VEC3)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform4f(ProgramId       program,
                            UniformLocation location,
                            GLfloat         value0,
                            GLfloat         value1,
                            GLfloat         value2,
                            GLfloat         value3) {
  ProgramUniform4f(program, location, value0, value1, value2, value3)
}

sub void ProgramUniform4f(ProgramId program, UniformLocation location, GLfloat value0, GLfloat value1, GLfloat value2, GLfloat value3) {
  v := make!Vec4f(1)
  v[0] = Vec4f(value0, value1, value2, value3)
  ProgramUniformv!Vec4f[](program, location, v, GL_FLOAT_VEC4)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform4fv(ProgramId       program,
                             UniformLocation location,
                             GLsizei         count,
                             const GLfloat*  values) {
  ProgramUniform4fv(program, location, count, values)
}

sub void ProgramUniform4fv(ProgramId program, UniformLocation location, GLsizei count, const GLfloat* values) {
  v := as!Vec4f*(values)[0:count]
  ProgramUniformv!Vec4f[](program, location, v, GL_FLOAT_VEC4)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform4i(ProgramId       program,
                            UniformLocation location,
                            GLint           value0,
                            GLint           value1,
                            GLint           value2,
                            GLint           value3) {
  ProgramUniform4i(program, location, value0, value1, value2, value3)
}

sub void ProgramUniform4i(ProgramId program, UniformLocation location, GLint value0, GLint value1, GLint value2, GLint value3) {
  v := make!Vec4i(1)
  v[0] = Vec4i(value0, value1, value2, value3)
  ProgramUniformv!Vec4i[](program, location, v, GL_INT_VEC4)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform4iv(ProgramId       program,
                             UniformLocation location,
                             GLsizei         count,
                             const GLint*    values) {
  ProgramUniform4iv(program, location, count, values)
}

sub void ProgramUniform4iv(ProgramId program, UniformLocation location, GLsizei count, const GLint* values) {
  v := as!Vec4i*(values)[0:count]
  ProgramUniformv!Vec4i[](program, location, v, GL_INT_VEC4)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform4ui(ProgramId       program,
                             UniformLocation location,
                             GLuint          value0,
                             GLuint          value1,
                             GLuint          value2,
                             GLuint          value3) {
  ProgramUniform4ui(program, location, value0, value1, value2, value3)
}

sub void ProgramUniform4ui(ProgramId program, UniformLocation location, GLuint value0, GLuint value1, GLuint value2, GLuint value3) {
  v := make!Vec4u(1)
  v[0] = Vec4u(value0, value1, value2, value3)
  ProgramUniformv!Vec4u[](program, location, v, GL_UNSIGNED_INT_VEC4)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniform4uiv(ProgramId       program,
                              UniformLocation location,
                              GLsizei         count,
                              const GLuint*   values) {
  ProgramUniform4uiv(program, location, count, values)
}

sub void ProgramUniform4uiv(ProgramId program, UniformLocation location, GLsizei count, const GLuint* values) {
  v := as!Vec4u*(values)[0:count]
  ProgramUniformv!Vec4u[](program, location, v, GL_UNSIGNED_INT_VEC4)
}

sub void ProgramUniformMatrixv!T(ProgramId       program,
                                 UniformLocation location,
                                 GLboolean       transpose,
                                 T               values,
                                 GLenum          type) {
  _ = transpose // TODO: transpose values if the flag is set
  SetProgramUniform(GetProgramOrError(program), location, as!u8[](values), type)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniformMatrix2fv(ProgramId       program,
                                   UniformLocation location,
                                   GLsizei         count,
                                   GLboolean       transpose,
                                   const GLfloat*  values) {
  ProgramUniformMatrix2fv(program, location, count, transpose, values)
}

sub void ProgramUniformMatrix2fv(ProgramId program, UniformLocation location, GLsizei count, GLboolean transpose, const GLfloat* values) {
  v := as!Mat2f*(values)[0:count]
  ProgramUniformMatrixv!Mat2f[](program, location, transpose, v, GL_FLOAT_MAT2)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniformMatrix2x3fv(ProgramId       program,
                                     UniformLocation location,
                                     GLsizei         count,
                                     GLboolean       transpose,
                                     const GLfloat*  values) {
  ProgramUniformMatrix2x3fv(program, location, count, transpose, values)
}

sub void ProgramUniformMatrix2x3fv(ProgramId program, UniformLocation location, GLsizei count, GLboolean transpose, const GLfloat* values) {
  v := as!Mat2x3f*(values)[0:count]
  ProgramUniformMatrixv!Mat2x3f[](program, location, transpose, v, GL_FLOAT_MAT2x3)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniformMatrix2x4fv(ProgramId       program,
                                     UniformLocation location,
                                     GLsizei         count,
                                     GLboolean       transpose,
                                     const GLfloat*  values) {
  ProgramUniformMatrix2x4fv(program, location, count, transpose, values)
}

sub void ProgramUniformMatrix2x4fv(ProgramId program, UniformLocation location, GLsizei count, GLboolean transpose, const GLfloat* values) {
  v := as!Mat2x4f*(values)[0:count]
  ProgramUniformMatrixv!Mat2x4f[](program, location, transpose, v, GL_FLOAT_MAT2x4)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniformMatrix3fv(ProgramId       program,
                                   UniformLocation location,
                                   GLsizei         count,
                                   GLboolean       transpose,
                                   const GLfloat*  values) {
  ProgramUniformMatrix3fv(program, location, count, transpose, values)
}

sub void ProgramUniformMatrix3fv(ProgramId program, UniformLocation location, GLsizei count, GLboolean transpose, const GLfloat* values) {
  v := as!Mat3f*(values)[0:count]
  ProgramUniformMatrixv!Mat3f[](program, location, transpose, v, GL_FLOAT_MAT3)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniformMatrix3x2fv(ProgramId       program,
                                     UniformLocation location,
                                     GLsizei         count,
                                     GLboolean       transpose,
                                     const GLfloat*  values) {
  ProgramUniformMatrix3x2fv(program, location, count, transpose, values)
}

sub void ProgramUniformMatrix3x2fv(ProgramId program, UniformLocation location, GLsizei count, GLboolean transpose, const GLfloat* values) {
  v := as!Mat3x2f*(values)[0:count]
  ProgramUniformMatrixv!Mat3x2f[](program, location, transpose, v, GL_FLOAT_MAT3x2)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniformMatrix3x4fv(ProgramId       program,
                                     UniformLocation location,
                                     GLsizei         count,
                                     GLboolean       transpose,
                                     const GLfloat*  values) {
  ProgramUniformMatrix3x4fv(program, location, count, transpose, values)
}

sub void ProgramUniformMatrix3x4fv(ProgramId program, UniformLocation location, GLsizei count, GLboolean transpose, const GLfloat* values) {
  v := as!Mat3x4f*(values)[0:count]
  ProgramUniformMatrixv!Mat3x4f[](program, location, transpose, v, GL_FLOAT_MAT3x4)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniformMatrix4fv(ProgramId       program,
                                   UniformLocation location,
                                   GLsizei         count,
                                   GLboolean       transpose,
                                   const GLfloat*  values) {
  ProgramUniformMatrix4fv(program, location, count, transpose, values)
}

sub void ProgramUniformMatrix4fv(ProgramId program, UniformLocation location, GLsizei count, GLboolean transpose, const GLfloat* values) {
  v := as!Mat4f*(values)[0:count]
  ProgramUniformMatrixv!Mat4f[](program, location, transpose, v, GL_FLOAT_MAT4)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniformMatrix4x2fv(ProgramId       program,
                                     UniformLocation location,
                                     GLsizei         count,
                                     GLboolean       transpose,
                                     const GLfloat*  values) {
  ProgramUniformMatrix4x2fv(program, location, count, transpose, values)
}

sub void ProgramUniformMatrix4x2fv(ProgramId program, UniformLocation location, GLsizei count, GLboolean transpose, const GLfloat* values) {
  v := as!Mat4x2f*(values)[0:count]
  ProgramUniformMatrixv!Mat4x2f[](program, location, transpose, v, GL_FLOAT_MAT4x2)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glProgramUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glProgramUniform.xhtml", Version.GLES32)
cmd void glProgramUniformMatrix4x3fv(ProgramId       program,
                                     UniformLocation location,
                                     GLsizei         count,
                                     GLboolean       transpose,
                                     const GLfloat*  values) {
  ProgramUniformMatrix4x3fv(program, location, count, transpose, values)
}

sub void ProgramUniformMatrix4x3fv(ProgramId program, UniformLocation location, GLsizei count, GLboolean transpose, const GLfloat* values) {
  v := as!Mat4x3f*(values)[0:count]
  ProgramUniformMatrixv!Mat4x3f[](program, location, transpose, v, GL_FLOAT_MAT4x3)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glReleaseShaderCompiler.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glReleaseShaderCompiler.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glReleaseShaderCompiler.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glReleaseShaderCompiler.xhtml", Version.GLES32)
cmd void glReleaseShaderCompiler() {

}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glShaderBinary.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glShaderBinary.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glShaderBinary.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glShaderBinary.xhtml", Version.GLES32)
cmd void glShaderBinary(GLsizei         count,
                        const ShaderId* shaders,
                        GLenum          binary_format,
                        const void*     binary,
                        GLsizei         binary_size) {
  switch (binary_format) {
    default: {
      glErrorInvalidEnum(binary_format)
    }
  }

  read(shaders[0:count])
  read(binary[0:binary_size])
  for i in (0 .. count) {
    // TODO: shaders[i].Binary = ?
  }
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glShaderSource.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glShaderSource.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glShaderSource.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glShaderSource.xhtml", Version.GLES32)
cmd void glShaderSource(ShaderId             shader,
                        GLsizei              count,
                        const GLchar* const* source,
                        const GLint*         length) {
  CheckCountGE!GLsizei(count, 0)

  sources := source[0:count]
  ctx := GetContext()
  _ = GetShaderOrError(shader)

  s := ctx.Objects.Shaders[shader]
  s.Source = as!string(null)
  if length == null {
    for i in (0 .. count) {
      s.Source += as!string(as!char*(sources[i]))
    }
  } else {
    lengths := length[0:count]
    for i in (0 .. count) {
      str := switch lengths[i] < 0 {
        case true:  as!string(as!char*(sources[i]))
        case false: as!string(as!char*(sources[i])[0:lengths[i]])
      }
      s.Source += str
    }
  }
}

sub void Uniformv!T(UniformLocation location, T values, GLenum type) {
  ctx := GetContext()
  SetProgramUniform(ctx.Bound.Program, location, as!u8[](values), type)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform1f(UniformLocation location, GLfloat value) {
  v := make!GLfloat(1)
  v[0] = value
  Uniformv!GLfloat[](location, v, GL_FLOAT)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform1fv(UniformLocation location, GLsizei count, const GLfloat* values) {
  v := values[0:count]
  Uniformv!GLfloat[](location, v, GL_FLOAT)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform1i(UniformLocation location, GLint value) {
  v := make!GLint(1)
  v[0] = value
  Uniformv!GLint[](location, v, GL_INT)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform1iv(UniformLocation location, GLsizei count, const GLint* values) {
  v := values[0:count]
  Uniformv!GLint[](location, v, GL_INT)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform1ui(UniformLocation location, GLuint value0) {
  v := make!GLuint(1)
  v[0] = value0
  Uniformv!GLuint[](location, v, GL_UNSIGNED_INT)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform1uiv(UniformLocation location, GLsizei count, const GLuint* values) {
  v := values[0:count]
  Uniformv!GLuint[](location, v, GL_UNSIGNED_INT)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform2f(UniformLocation location, GLfloat value0, GLfloat value1) {
  v := make!Vec2f(1)
  v[0] = Vec2f(value0, value1)
  Uniformv!Vec2f[](location, v, GL_FLOAT_VEC2)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform2fv(UniformLocation location, GLsizei count, const GLfloat* values) {
  v := as!Vec2f*(values)[0:count]
  Uniformv!Vec2f[](location, v, GL_FLOAT_VEC2)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform2i(UniformLocation location, GLint value0, GLint value1) {
  v := make!Vec2i(1)
  v[0] = Vec2i(value0, value1)
  Uniformv!Vec2i[](location, v, GL_INT_VEC2)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform2iv(UniformLocation location, GLsizei count, const GLint* values) {
  v := as!Vec2i*(values)[0:count]
  Uniformv!Vec2i[](location, v, GL_INT_VEC2)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform2ui(UniformLocation location, GLuint value0, GLuint value1) {
  v := make!Vec2u(1)
  v[0] = Vec2u(value0, value1)
  Uniformv!Vec2u[](location, v, GL_UNSIGNED_INT_VEC2)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform2uiv(UniformLocation location, GLsizei count, const GLuint* values) {
  v := as!Vec2u*(values)[0:count]
  Uniformv!Vec2u[](location, v, GL_UNSIGNED_INT_VEC2)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform3f(UniformLocation location, GLfloat value0, GLfloat value1, GLfloat value2) {
  v := make!Vec3f(1)
  v[0] = Vec3f(value0, value1, value2)
  Uniformv!Vec3f[](location, v, GL_FLOAT_VEC3)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform3fv(UniformLocation location, GLsizei count, const GLfloat* values) {
  v := as!Vec3f*(values)[0:count]
  Uniformv!Vec3f[](location, v, GL_FLOAT_VEC3)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform3i(UniformLocation location, GLint value0, GLint value1, GLint value2) {
  v := make!Vec3i(1)
  v[0] = Vec3i(value0, value1, value2)
  Uniformv!Vec3i[](location, v, GL_INT_VEC3)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform3iv(UniformLocation location, GLsizei count, const GLint* values) {
  v := as!Vec3i*(values)[0:count]
  Uniformv!Vec3i[](location, v, GL_INT_VEC3)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform3ui(UniformLocation location, GLuint value0, GLuint value1, GLuint value2) {
  v := make!Vec3u(1)
  v[0] = Vec3u(value0, value1, value2)
  Uniformv!Vec3u[](location, v, GL_UNSIGNED_INT_VEC3)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform3uiv(UniformLocation location, GLsizei count, const GLuint* values) {
  v := as!Vec3u*(values)[0:count]
  Uniformv!Vec3u[](location, v, GL_UNSIGNED_INT_VEC3)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform4f(UniformLocation location,
                     GLfloat         value0,
                     GLfloat         value1,
                     GLfloat         value2,
                     GLfloat         value3) {
  v := make!Vec4f(1)
  v[0] = Vec4f(value0, value1, value2, value3)
  Uniformv!Vec4f[](location, v, GL_FLOAT_VEC4)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform4fv(UniformLocation location, GLsizei count, const GLfloat* values) {
  v := as!Vec4f*(values)[0:count]
  Uniformv!Vec4f[](location, v, GL_FLOAT_VEC4)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform4i(UniformLocation location,
                     GLint           value0,
                     GLint           value1,
                     GLint           value2,
                     GLint           value3) {
  v := make!Vec4i(1)
  v[0] = Vec4i(value0, value1, value2, value3)
  Uniformv!Vec4i[](location, v, GL_INT_VEC4)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform4iv(UniformLocation location, GLsizei count, const GLint* values) {
  v := as!Vec4i*(values)[0:count]
  Uniformv!Vec4i[](location, v, GL_INT_VEC4)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform4ui(UniformLocation location, GLuint value0, GLuint value1, GLuint value2, GLuint value3) {
  v := make!Vec4u(1)
  v[0] = Vec4u(value0, value1, value2, value3)
  Uniformv!Vec4u[](location, v, GL_UNSIGNED_INT_VEC4)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniform4uiv(UniformLocation location, GLsizei count, const GLuint* values) {
  v := as!Vec4u*(values)[0:count]
  Uniformv!Vec4u[](location, v, GL_UNSIGNED_INT_VEC4)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniformBlockBinding.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniformBlockBinding.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniformBlockBinding.xhtml", Version.GLES32)
cmd void glUniformBlockBinding(ProgramId         program,
                               UniformBlockIndex uniform_block_index,
                               GLuint            uniform_block_binding) {

  // TODO
}

sub void UniformMatrixv!T(UniformLocation location,
                          GLboolean       transpose,
                          T               values,
                          GLenum          type) {
  _ = transpose // TODO: Transpose if the flag is set.
  ctx := GetContext()
  SetProgramUniform(ctx.Bound.Program, location, as!u8[](values), type)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniformMatrix2fv(UniformLocation location,
                            GLsizei         count,
                            GLboolean       transpose,
                            const GLfloat*  values) {
  v := as!Mat2f*(values)[0:count]
  UniformMatrixv!Mat2f[](location, transpose, v, GL_FLOAT_MAT2)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniformMatrix2x3fv(UniformLocation location,
                              GLsizei         count,
                              GLboolean       transpose,
                              const GLfloat*  values) {
  UniformMatrix2x3fv(location, count, transpose, values)
}

sub void UniformMatrix2x3fv(UniformLocation location, GLsizei count, GLboolean transpose, const GLfloat* values) {
  v := as!Mat2x3f*(values)[0:count]
  UniformMatrixv!Mat2x3f[](location, transpose, v, GL_FLOAT_MAT2x3)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniformMatrix2x4fv(UniformLocation location,
                              GLsizei         count,
                              GLboolean       transpose,
                              const GLfloat*  values) {
  UniformMatrix2x4fv(location, count, transpose, values)
}

sub void UniformMatrix2x4fv(UniformLocation location, GLsizei count, GLboolean transpose, const GLfloat* values) {
  v := as!Mat2x4f*(values)[0:count]
  UniformMatrixv!Mat2x4f[](location, transpose, v, GL_FLOAT_MAT2x4)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniformMatrix3fv(UniformLocation location,
                            GLsizei         count,
                            GLboolean       transpose,
                            const GLfloat*  values) {
  v := as!Mat3f*(values)[0:count]
  UniformMatrixv!Mat3f[](location, transpose, v, GL_FLOAT_MAT3)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniformMatrix3x2fv(UniformLocation location,
                              GLsizei         count,
                              GLboolean       transpose,
                              const GLfloat*  values) {
  UniformMatrix3x2fv(location, count, transpose, values)
}

sub void UniformMatrix3x2fv(UniformLocation location, GLsizei count, GLboolean transpose, const GLfloat* values) {
  v := as!Mat3x2f*(values)[0:count]
  UniformMatrixv!Mat3x2f[](location, transpose, v, GL_FLOAT_MAT3x2)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniformMatrix3x4fv(UniformLocation location,
                              GLsizei         count,
                              GLboolean       transpose,
                              const GLfloat*  values) {
  UniformMatrix3x4fv(location, count, transpose, values)
}

sub void UniformMatrix3x4fv(UniformLocation location, GLsizei count, GLboolean transpose, const GLfloat* values) {
  v := as!Mat3x4f*(values)[0:count]
  UniformMatrixv!Mat3x4f[](location, transpose, v, GL_FLOAT_MAT3x4)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUniform.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniformMatrix4fv(UniformLocation location,
                            GLsizei         count,
                            GLboolean       transpose,
                            const GLfloat*  values) {
  v := as!Mat4f*(values)[0:count]
  UniformMatrixv!Mat4f[](location, transpose, v, GL_FLOAT_MAT4)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniformMatrix4x2fv(UniformLocation location,
                              GLsizei         count,
                              GLboolean       transpose,
                              const GLfloat*  values) {
  UniformMatrix4x2fv(location, count, transpose, values)
}

sub void UniformMatrix4x2fv(UniformLocation location, GLsizei count, GLboolean transpose, const GLfloat* values) {
  v := as!Mat4x2f*(values)[0:count]
  UniformMatrixv!Mat4x2f[](location, transpose, v, GL_FLOAT_MAT4x2)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUniform.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUniform.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUniform.xhtml", Version.GLES32)
cmd void glUniformMatrix4x3fv(UniformLocation location,
                              GLsizei         count,
                              GLboolean       transpose,
                              const GLfloat*  values) {
  UniformMatrix4x3fv(location, count, transpose, values)
}

sub void UniformMatrix4x3fv(UniformLocation location, GLsizei count, GLboolean transpose, const GLfloat* values) {
  v := as!Mat4x3f*(values)[0:count]
  UniformMatrixv!Mat4x3f[](location, transpose, v, GL_FLOAT_MAT4x3)
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glUseProgram.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glUseProgram.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUseProgram.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUseProgram.xhtml", Version.GLES32)
cmd void glUseProgram(ProgramId program) {
  ctx := GetContext()
  oldProgram := ctx.Bound.Program
  if program == 0 {
    ctx.Bound.Program = null
  } else {
    ctx.Bound.Program = GetProgramOrError(program)
    AdjustProgramUseCount(ctx.Bound.Program, 1)
  }
  AdjustProgramUseCount(oldProgram, -1)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glUseProgramStages.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glUseProgramStages.xhtml", Version.GLES32)
cmd void glUseProgramStages(PipelineId pipeline, GLbitfield stages, ProgramId program) {
  supportsBits(stages, GL_ALL_SHADER_BITS | GL_COMPUTE_SHADER_BIT | GL_FRAGMENT_SHADER_BIT | GL_VERTEX_SHADER_BIT)
  if (GL_ALL_SHADER_BITS in stages) {
  }
  if (GL_COMPUTE_SHADER_BIT in stages) {
  }
  if (GL_FRAGMENT_SHADER_BIT in stages) {
  }
  if (GL_VERTEX_SHADER_BIT in stages) {
  }
  // TODO
}

@if(Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glValidateProgram.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glValidateProgram.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glValidateProgram.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glValidateProgram.xhtml", Version.GLES32)
cmd void glValidateProgram(ProgramId program) {
  _ = GetProgramOrError(program)
}

@if(Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glValidateProgramPipeline.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glValidateProgramPipeline.xhtml", Version.GLES32)
cmd void glValidateProgramPipeline(PipelineId pipeline) {
  // TODO
}

