// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@internal
class Buffer {
  BufferId ID

  @internal u8[] Data

  // Table 21.5: Buffer Object State
  GLsizeiptr     Size        = 0
  GLenum         Usage       = GL_STATIC_DRAW
  GLbitfield     AccessFlags
  GLboolean      Mapped      = GL_FALSE
  u8*            MapPointer  = null
  GLintptr       MapOffset   = 0
  GLsizeiptr     MapLength   = 0
  @unused string Label
}

sub ref!Buffer GetBoundBufferOrError(GLenum target) {
  b := GetBoundBuffer(target)
  if b == null { glErrorInvalidOperation() }
  return b
}

sub ref!Buffer GetBoundBuffer(GLenum target) {
  ctx := GetContext()
  // TODO: The error conditions are not spelled out for all commands in the spec.
  b := switch (target) {
    @if(Version.GLES20)
    case GL_ARRAY_BUFFER: {
      ctx.Bound.ArrayBuffer
    }
    @if(Version.GLES20)
    case GL_ELEMENT_ARRAY_BUFFER: {
      ctx.Bound.VertexArray.ElementArrayBuffer
    }
    @if(Version.GLES30)
    case GL_COPY_READ_BUFFER: {
      ctx.Bound.CopyReadBuffer
    }
    @if(Version.GLES30)
    case GL_COPY_WRITE_BUFFER: {
      ctx.Bound.CopyWriteBuffer
    }
    @if(Version.GLES30)
    case GL_PIXEL_PACK_BUFFER: {
      ctx.Bound.PixelPackBuffer
    }
    @if(Version.GLES30)
    case GL_PIXEL_UNPACK_BUFFER: {
      ctx.Bound.PixelUnpackBuffer
    }
    @if(Version.GLES30)
    case GL_TRANSFORM_FEEDBACK_BUFFER: {
      ctx.Bound.TransformFeedbackBuffer
    }
    @if(Version.GLES30)
    case GL_UNIFORM_BUFFER: {
      ctx.Bound.UniformBuffer
    }
    @if(Version.GLES31)
    case GL_ATOMIC_COUNTER_BUFFER: {
      ctx.Bound.AtomicCounterBuffer
    }
    @if(Version.GLES31)
    case GL_DISPATCH_INDIRECT_BUFFER: {
      ctx.Bound.DispatchIndirectBuffer
    }
    @if(Version.GLES31)
    case GL_DRAW_INDIRECT_BUFFER: {
      ctx.Bound.DrawIndirectBuffer
    }
    @if(Version.GLES31)
    case GL_SHADER_STORAGE_BUFFER: {
      ctx.Bound.ShaderStorageBuffer
    }
    @if(Version.GLES32)
    case GL_TEXTURE_BUFFER: {
      ctx.Bound.TextureBuffer
    }
    default: {
      // TODO: glErrorInvalidEnum(target)
      as!ref!Buffer(null)
    }
  }
  return b
}

sub ref!Buffer GetBoundBufferAtIndex(GLenum target, GLuint index) {
  ctx := GetContext()
  bb := switch (target) {
    @if(Version.GLES30) case GL_TRANSFORM_FEEDBACK_BUFFER: ctx.Bound.TransformFeedback.Buffers[index]
    @if(Version.GLES30) case GL_UNIFORM_BUFFER:            ctx.Bound.UniformBuffers[index]
    @if(Version.GLES31) case GL_ATOMIC_COUNTER_BUFFER:     ctx.Bound.AtomicCounterBuffers[index]
    @if(Version.GLES31) case GL_SHADER_STORAGE_BUFFER:     ctx.Bound.ShaderStorageBuffers[index]
    default: BufferBinding()
  }
  return bb.Binding
}

sub ref!Buffer GetOrCreateBuffer(BufferId id) {
  ctx := GetContext()
  if (id != 0) && (ctx.Objects.Buffers[id] == null) {
    ctx.Objects.Buffers[id] = new!Buffer(ID: id)
    ctx.Objects.GeneratedNames.Buffers[id] = true
  }
  return ctx.Objects.Buffers[id]
}

@if(Version.GLES10)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindBuffer.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glBindBuffer.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glBindBuffer.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glBindBuffer.xhtml", Version.GLES32)
cmd void glBindBuffer(GLenum target, BufferId buffer) {
  ctx := GetContext()
  switch (target) {
    case GL_ARRAY_BUFFER: {
      ctx.Bound.ArrayBuffer = GetOrCreateBuffer(buffer)
    }
    case GL_ELEMENT_ARRAY_BUFFER: {
      ctx.Bound.VertexArray.ElementArrayBuffer = GetOrCreateBuffer(buffer)
    }
    @if(Version.GLES30)
    case GL_COPY_READ_BUFFER: {
      ctx.Bound.CopyReadBuffer = GetOrCreateBuffer(buffer)
    }
    @if(Version.GLES30)
    case GL_COPY_WRITE_BUFFER: {
      ctx.Bound.CopyWriteBuffer = GetOrCreateBuffer(buffer)
    }
    @if(Version.GLES30)
    case GL_PIXEL_PACK_BUFFER: {
      ctx.Bound.PixelPackBuffer = GetOrCreateBuffer(buffer)
    }
    @if(Version.GLES30)
    case GL_PIXEL_UNPACK_BUFFER: {
      ctx.Bound.PixelUnpackBuffer = GetOrCreateBuffer(buffer)
    }
    @if(Version.GLES30)
    case GL_TRANSFORM_FEEDBACK_BUFFER: {
      ctx.Bound.TransformFeedbackBuffer = GetOrCreateBuffer(buffer)
    }
    @if(Version.GLES30)
    case GL_UNIFORM_BUFFER: {
      ctx.Bound.UniformBuffer = GetOrCreateBuffer(buffer)
    }
    @if(Version.GLES31)
    case GL_ATOMIC_COUNTER_BUFFER: {
      ctx.Bound.AtomicCounterBuffer = GetOrCreateBuffer(buffer)
    }
    @if(Version.GLES31)
    case GL_DISPATCH_INDIRECT_BUFFER: {
      ctx.Bound.DispatchIndirectBuffer = GetOrCreateBuffer(buffer)
    }
    @if(Version.GLES31)
    case GL_DRAW_INDIRECT_BUFFER: {
      ctx.Bound.DrawIndirectBuffer = GetOrCreateBuffer(buffer)
    }
    @if(Version.GLES31)
    case GL_SHADER_STORAGE_BUFFER: {
      ctx.Bound.ShaderStorageBuffer = GetOrCreateBuffer(buffer)
    }
    @if(Version.GLES32)
    case GL_TEXTURE_BUFFER: {
      ctx.Bound.TextureBuffer = GetOrCreateBuffer(buffer)
    }
    default: {
      glErrorInvalidEnum(target)
    }
  }
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glBindBufferBase.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glBindBufferBase.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glBindBufferBase.xhtml", Version.GLES32)
cmd void glBindBufferBase(GLenum target, GLuint index, BufferId buffer) {
  ctx := GetContext()
  size := switch (buffer in ctx.Objects.Buffers) {
    case true:  ctx.Objects.Buffers[buffer].Size
    case false: as!GLsizeiptr(0)
  }
  BindBufferRange(target, index, buffer, 0, size)
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glBindBufferRange.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glBindBufferRange.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glBindBufferRange.xhtml", Version.GLES32)
cmd void glBindBufferRange(GLenum     target,
                           GLuint     index,
                           BufferId   buffer,
                           GLintptr   offset,
                           GLsizeiptr size) {
  BindBufferRange(target, index, buffer, offset, size)
}

sub void BindBufferRange(GLenum     target,
                         GLuint     index,
                         BufferId   buffer,
                         GLintptr   offset,
                         GLsizeiptr size) {
  ctx := GetContext()
  switch (target) {
    @if(Version.GLES30)
    case GL_TRANSFORM_FEEDBACK_BUFFER: {
      b := GetOrCreateBuffer(buffer)
      ctx.Bound.TransformFeedbackBuffer = b
      ctx.Bound.TransformFeedback.Buffers[index] = BufferBinding(b, offset, size)
    }
    @if(Version.GLES30)
    case GL_UNIFORM_BUFFER: {
      b := GetOrCreateBuffer(buffer)
      ctx.Bound.UniformBuffer = b
      ctx.Bound.UniformBuffers[index] = BufferBinding(b, offset, size)
    }
    @if(Version.GLES31)
    case GL_ATOMIC_COUNTER_BUFFER: {
      b := GetOrCreateBuffer(buffer)
      ctx.Bound.AtomicCounterBuffer = b
      ctx.Bound.AtomicCounterBuffers[index] = BufferBinding(b, offset, size)
    }
    @if(Version.GLES31)
    case GL_SHADER_STORAGE_BUFFER: {
      b := GetOrCreateBuffer(buffer)
      ctx.Bound.ShaderStorageBuffer = b
      ctx.Bound.ShaderStorageBuffers[index] = BufferBinding(b, offset, size)
    }
    default: {
      glErrorInvalidEnum(target)
    }
  }
}

@if(Version.GLES10)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBufferData.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glBufferData.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glBufferData.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glBufferData.xhtml", Version.GLES32)
cmd void glBufferData(GLenum target, GLsizeiptr size, BufferDataPointer data, GLenum usage) {
  b := GetBoundBufferOrError(target)
  switch (usage) {
    case GL_DYNAMIC_DRAW, GL_STATIC_DRAW, GL_STREAM_DRAW: {
      // version 2.0
    }
    @if(Version.GLES30)
    case GL_DYNAMIC_COPY, GL_DYNAMIC_READ, GL_STATIC_COPY, GL_STATIC_READ, GL_STREAM_COPY,
        GL_STREAM_READ: {
    }
    default: {
      glErrorInvalidEnum(usage)
    }
  }
  CheckSizeGE!GLsizeiptr(size, 0)

  b.Data = switch (data != null) {
    case true:  clone(as!u8*(data)[0:size])
    case false: make!u8(size)
  }
  b.Size = size
  b.Usage = usage
}

@if(Version.GLES10)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBufferSubData.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glBufferSubData.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glBufferSubData.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glBufferSubData.xhtml", Version.GLES32)
cmd void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, BufferDataPointer data) {
  b := GetBoundBufferOrError(target)
  CheckGE!GLintptr(offset, 0)
  CheckSizeGE!GLsizeiptr(size, 0)
  CheckLE!GLsizeiptr((as!GLsizeiptr(offset) + size), b.Size)
  copy(b.Data[offset:as!GLsizeiptr(offset) + size], as!u8*(data)[0:size])
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glCopyBufferSubData.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glCopyBufferSubData.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glCopyBufferSubData.xhtml", Version.GLES32)
cmd void glCopyBufferSubData(GLenum     readTarget,
                             GLenum     writeTarget,
                             GLintptr   readOffset,
                             GLintptr   writeOffset,
                             GLsizeiptr size) {
  CopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size)
}

sub void CopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  _ = GetBoundBufferOrError(readTarget)
  _ = GetBoundBufferOrError(writeTarget)
  _ = readOffset // TODO
  _ = writeOffset // TODO
  _ = size // TODO
}

@if(Version.GLES10)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteBuffers.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glDeleteBuffers.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glDeleteBuffers.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDeleteBuffers.xhtml", Version.GLES32)
cmd void glDeleteBuffers(GLsizei count, const BufferId* buffers) {
  CheckCountGE!GLsizei(count, 0)
  b := buffers[0:count]
  ctx := GetContext()
  for i in (0 .. count) {
    id := b[i]
    if id != 0 {
      delete(ctx.Objects.Buffers, id)
      delete(ctx.Objects.GeneratedNames.Buffers, id)
    }
  }
}

@if(Version.GLES10)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenBuffers.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGenBuffers.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGenBuffers.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGenBuffers.xhtml", Version.GLES32)
cmd void glGenBuffers(GLsizei count, BufferId* buffers) {
  CheckCountGE!GLsizei(count, 0)
  b := buffers[0:count]
  ctx := GetContext()
  for i in (0 .. count) {
    id := as!BufferId(?)
    assert(id != 0)
    ctx.Objects.GeneratedNames.Buffers[id] = true
    b[i] = id
  }
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetBufferParameter.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetBufferParameter.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetBufferParameter.xhtml", Version.GLES32)
cmd void glGetBufferParameteri64v(GLenum target, GLenum parameter, GLint64* value) {
  GetBufferParameter!GLint64(target, parameter, value)
}

@if(Version.GLES10)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetBufferParameteriv.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetBufferParameter.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetBufferParameter.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetBufferParameter.xhtml", Version.GLES32)
cmd void glGetBufferParameteriv(GLenum target, GLenum parameter, GLint* value) {
  GetBufferParameter!GLint(target, parameter, value)
}

sub void GetBufferParameter!T(GLenum target, GLenum parameter, T* value) {
  b := GetBoundBufferOrError(target)
  switch (parameter) {
    @if(Version.GLES20)
    case GL_BUFFER_SIZE: {
      value[0] = as!T(b.Size)
    }
    @if(Version.GLES20)
    case GL_BUFFER_USAGE: {
      value[0] = as!T(b.Usage)
    }
    @if(Version.GLES30)
    case GL_BUFFER_ACCESS_FLAGS: {
      value[0] = as!T(b.AccessFlags)
    }
    @if(Version.GLES30)
    case GL_BUFFER_MAPPED: {
      value[0] = as!T(b.Mapped)
    }
    @if(Version.GLES30)
    case GL_BUFFER_MAP_LENGTH: {
      value[0] = as!T(b.MapLength)
    }
    @if(Version.GLES30)
    case GL_BUFFER_MAP_OFFSET: {
      value[0] = as!T(b.MapOffset)
    }
    default: {
      glErrorInvalidEnum(parameter)
    }
  }
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetBufferPointerv.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetBufferPointerv.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetBufferPointerv.xhtml", Version.GLES32)
cmd void glGetBufferPointerv(GLenum target, GLenum pname, void** params) {
  GetBufferPointerv(target, pname, params)
}

sub void GetBufferPointerv(GLenum target, GLenum pname, void** params) {
  switch (target) {
    case GL_ARRAY_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_ELEMENT_ARRAY_BUFFER,
        GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER,
        GL_UNIFORM_BUFFER: {
      // version 3.0
    }
    @if(Version.GLES32)
    case GL_ATOMIC_COUNTER_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_DRAW_INDIRECT_BUFFER,
        GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER: {
    }
    default: {
      glErrorInvalidEnum(target)
    }
  }
  switch (pname) {
    case GL_BUFFER_MAP_POINTER: {
      // version 3.0
    }
    default: {
      glErrorInvalidEnum(pname)
    }
  }
  // TODO

  write(params[0:1])
}

@if(Version.GLES10)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsBuffer.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glIsBuffer.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glIsBuffer.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glIsBuffer.xhtml", Version.GLES32)
cmd GLboolean glIsBuffer(BufferId buffer) {

  ctx := GetContext()
  return as!GLboolean(buffer in ctx.Objects.Buffers)
}

// This command only exits in desktop GL - but we need the signature in compat.
cmd void* glMapBuffer(GLenum target, GLenum access) {
  ptr := ?
  MapBuffer(target, access, as!u8*(ptr))
  return ptr
}

sub void MapBuffer(GLenum target, GLenum access, u8* ptr) {
  b := GetBoundBufferOrError(target)
  accessBits := switch (access) {
    case GL_READ_ONLY:  GL_MAP_READ_BIT
    case GL_WRITE_ONLY: GL_MAP_WRITE_BIT
    case GL_READ_WRITE: GL_MAP_READ_BIT | GL_MAP_WRITE_BIT
  }
  MapBufferRange(target, 0 /* offset */, b.Size, accessBits, as!u8*(ptr))
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glMapBufferRange.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glMapBufferRange.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glMapBufferRange.xhtml", Version.GLES32)
cmd void* glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  ptr := ?
  MapBufferRange(target, offset, length, access, as!u8*(ptr))
  return ptr
}

sub void MapBufferRange(GLenum target, GLintptr offset, GLsizeiptr size, GLbitfield access, u8* ptr) {
  b := GetBoundBufferOrError(target)
  CheckGE!GLintptr(offset, 0)
  CheckSizeGE!GLsizeiptr(size, 0)
  CheckLE!GLsizeiptr((as!GLsizeiptr(offset) + size), b.Size)
  supportsBits(access, GL_MAP_FLUSH_EXPLICIT_BIT | GL_MAP_INVALIDATE_BUFFER_BIT | GL_MAP_INVALIDATE_RANGE_BIT | GL_MAP_READ_BIT | GL_MAP_UNSYNCHRONIZED_BIT | GL_MAP_WRITE_BIT)
  if b.Mapped == GL_TRUE { glErrorInvalidOperation() }

  b.Mapped = GL_TRUE
  b.AccessFlags = access
  b.MapPointer = ptr
  b.MapOffset = offset
  b.MapLength = size
  mapMemory(ptr[0:size])

  if GL_MAP_READ_BIT in access {
    copy(ptr[0:size], b.Data[offset:offset + as!GLintptr(size)])
  }
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glMapBufferRange.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glMapBufferRange.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glMapBufferRange.xhtml", Version.GLES32)
cmd GLboolean glUnmapBuffer(GLenum target) {
  UnmapBuffer(target)
  return ?
}

sub void UnmapBuffer(GLenum target) {
  b := GetBoundBufferOrError(target)
  if b.Mapped == GL_FALSE { glErrorInvalidOperation() }
  if (GL_MAP_WRITE_BIT in b.AccessFlags) && (!(GL_MAP_FLUSH_EXPLICIT_BIT in b.AccessFlags)) {
    copyLength := as!GLintptr(b.MapLength)
    copy(b.Data[b.MapOffset:b.MapOffset + copyLength], b.MapPointer[0:copyLength])
  }
  unmapMemory(b.MapPointer[0:b.MapLength])
  b.Mapped = GL_FALSE
  b.AccessFlags = as!GLbitfield(0)
  b.MapPointer = null
  b.MapOffset = 0
  b.MapLength = 0
}

@if(Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glFlushMappedBufferRange.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glFlushMappedBufferRange.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glFlushMappedBufferRange.xhtml", Version.GLES32)
cmd void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) {
  FlushMappedBufferRange(target, offset, length)
}

sub void FlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr size) {
  b := GetBoundBufferOrError(target)
  if b.Mapped == GL_FALSE { glErrorInvalidOperation() }
  if !(GL_MAP_FLUSH_EXPLICIT_BIT in b.AccessFlags) { glErrorInvalidOperation() }
  CheckGE!GLintptr(offset, 0)
  CheckSizeGE!GLsizeiptr(size, 0)
  CheckLE!GLsizeiptr((as!GLsizeiptr(offset) + size), b.MapLength)
  dstOffset := b.MapOffset + offset
  copy(b.Data[dstOffset:dstOffset + as!GLintptr(size)], b.MapPointer[offset:offset + as!GLintptr(size)])
}
