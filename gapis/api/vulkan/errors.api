// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

// TODO: Change to take message type once the error messages below are moved to
// en-us.stb.md.
extern void vkErrInvalidHandle(string handleType, u64 handle)
extern void vkErrNullPointer(string pointerType)
extern void vkErrUnsupported(string pointerType)
extern void vkErrNotNullPointer(string pointerType)
extern void vkErrUnrecognizedExtension(string name)
extern void vkErrExpectNVDedicatedlyAllocatedHandle(string handleType, u64 handle)
extern void vkErrInvalidDescriptorArrayElement(u64 set, u32 binding, u32 arrayIndex)
extern void vkErrInvalidDescriptorBindingType(VkDescriptorSet set, u32 binding, VkDescriptorType layoutType, VkDescriptorType updateType)
extern void vkErrCommandBufferIncomplete(VkCommandBuffer cmdbuf)
extern void vkErrCommandBufferNotRecording(VkCommandBuffer cmdbuf)
extern void vkErrQueryOutOfRange(VkQueryPool queryPool, u32 query)
extern void vkErrQueryUninitialized(VkQueryPool queryPool, u32 query)
extern void vkErrQueryNotInactive(VkQueryPool queryPool, u32 query)
extern void vkErrQueryNotActive(VkQueryPool queryPool, u32 query)
extern void vkErrInvalidImageLayout(VkImage img, u32 aspect, u32 layer, u32 level, VkImageLayout layout, VkImageLayout expectedLayout)
extern void vkErrInvalidImageSubresource(VkImage img, string subresourceType, u32 value)
extern void vkErrImageMemoryNotBound(VkImage img)
extern void vkErrSemaphoreNotSubmitted(VkSemaphore semaphore)
extern void vkErrInvalidDescriptorCopy(VkDescriptorSet srcSet, u32 srcBinding, VkDescriptorSet dstSet, u32 dstBinding)

sub void vkErrorInvalidInstance(VkInstance inst) {
  vkErrorInvalidHandle("VkInstance", as!u64(inst))
}

sub void vkErrorInvalidPhysicalDevice(VkPhysicalDevice dev) {
  vkErrorInvalidHandle("VkPhysicalDevice", as!u64(dev))
}

sub void vkErrorInvalidDevice(VkDevice dev) {
  vkErrorInvalidHandle("VkDevice", as!u64(dev))
  abort
}

sub void vkErrorInvalidQueue(VkQueue queue) {
  vkErrorInvalidHandle("VkQueue", as!u64(queue))
  abort
}

sub void vkErrorInvalidCommandBuffer(VkCommandBuffer cmdbuf) {
  vkErrorInvalidHandle("VkCommandBuffer", as!u64(cmdbuf))
}

sub void vkErrorCommandBufferIncomplete(VkCommandBuffer cmdbuf) {
  vkErrCommandBufferIncomplete(cmdbuf)
}

sub void vkErrorCommandBufferNotRecording(VkCommandBuffer cmdbuf) {
  vkErrCommandBufferNotRecording(cmdbuf)
}

sub void vkErrorQueryOutOfRange(VkQueryPool queryPool, u32 query) {
  vkErrQueryOutOfRange(queryPool, query)
}
sub void vkErrorQueryUninitialized(VkQueryPool queryPool, u32 query) {
  vkErrQueryUninitialized(queryPool, query)
}
sub void vkErrorQueryNotInactive(VkQueryPool queryPool, u32 query) {
  vkErrQueryNotInactive(queryPool, query)
}
sub void vkErrorQueryNotActive(VkQueryPool queryPool, u32 query) {
  vkErrQueryNotActive(queryPool, query)
}

sub void vkErrorInvalidDeviceMemory(VkDeviceMemory mem) {
  vkErrorInvalidHandle("VkDeviceMemory", as!u64(mem))
}

sub void vkErrorInvalidBuffer(VkBuffer buf) {
  vkErrorInvalidHandle("VkBuffer", as!u64(buf))
}

sub void vkErrorInvalidBufferView(VkBufferView view) {
  vkErrorInvalidHandle("VkBufferView", as!u64(view))
}

sub void vkErrorInvalidImage(VkImage img) {
  vkErrorInvalidHandle("VkImage", as!u64(img))
}

sub void vkErrorInvalidImageAspect(VkImage img, VkImageAspectFlagBits aspectBit) {
  vkErrInvalidImageSubresource(img, "VkImageAspectFlagBits", as!u32(aspectBit))
  // Continue the mutation as this may not cause problem.
}

sub void vkErrorInvalidImageArrayLayer(VkImage img, u32 layer) {
  vkErrInvalidImageSubresource(img, "ArrayLayer", layer)
  // Continue the mutation as this may not cause problem.
}

sub void vkErrorInvalidImageMipLevel(VkImage img, u32 level) {
  vkErrInvalidImageSubresource(img, "MipLevel", level)
  // Continue the mutation as this may not cause problem.
}

sub void vkErrorInvalidImageLayout(VkImage img, VkImageAspectFlagBits aspect, u32 layer, u32 level, VkImageLayout layout, VkImageLayout expectedLayout) {
  vkErrInvalidImageLayout(img, as!u32(aspect), layer, level, layout, expectedLayout)
  // Continue the mutation as this may not cause problem.
}

sub void vkErrorImageMemoryNotBound(VkImage img) {
  vkErrImageMemoryNotBound(img)
}

sub void vkErrorInvalidImageView(VkImageView view) {
  vkErrorInvalidHandle("VkImageView", as!u64(view))
}


sub void vkErrorInvalidShaderModule(VkShaderModule shader) {
  vkErrorInvalidHandle("VkShaderModule", as!u64(shader))
}

sub void vkErrorInvalidPipeline(VkPipeline pipeline) {
  vkErrorInvalidHandle("VkPipeline", as!u64(pipeline))
}

sub void vkErrorInvalidPipelineLayout(VkPipelineLayout layout) {
  vkErrorInvalidHandle("VkPipelineLayout", as!u64(layout))
}

sub void vkErrorInvalidDescriptorSet(VkDescriptorSet set) {
  vkErrorInvalidHandle("VkDescriptorSet", as!u64(set))
}

sub void vkErrorInvalidDescriptorCopy(VkDescriptorSet srcSet, u32 srcBinding, VkDescriptorSet dstSet, u32 dstBinding) {
  vkErrInvalidDescriptorCopy(srcSet, srcBinding, dstSet, dstBinding)
}

sub void vkErrorInvalidDescriptorSetLayout(VkDescriptorSetLayout layout) {
  vkErrorInvalidHandle("VkDescriptorSetLayout", as!u64(layout))
}

sub void vkErrorInvalidDescriptorPool(VkDescriptorPool pool) {
  vkErrorInvalidHandle("VkDescriptorPool", as!u64(pool))
}

sub void vkErrorInvalidFence(VkFence fence) {
  vkErrorInvalidHandle("VkFence", as!u64(fence))
}

sub void vkErrorInvalidSemaphore(VkSemaphore semaphore) {
  vkErrorInvalidHandle("VkSemaphore", as!u64(semaphore))
}

sub void vkErrorSemaphoreNotSubmitted(VkSemaphore semaphore) {
  vkErrSemaphoreNotSubmitted(semaphore)
}

sub void vkErrorInvalidEvent(VkEvent event) {
  vkErrorInvalidHandle("VkEvent", as!u64(event))
}

sub void vkErrorInvalidQueryPool(VkQueryPool pool) {
  vkErrorInvalidHandle("VkQueryPool", as!u64(pool))
}

sub void vkErrorInvalidFramebuffer(VkFramebuffer framebuffer) {
  vkErrorInvalidHandle("VkFramebuffer", as!u64(framebuffer))
}

sub void vkErrorInvalidRenderPass(VkRenderPass renderpass) {
  vkErrorInvalidHandle("VkRenderPass", as!u64(renderpass))
}

sub void vkErrorInvalidPipelineCache(VkPipelineCache cache) {
  vkErrorInvalidHandle("VkPipelineCache", as!u64(cache))
}

sub void vkErrorInvalidCommandPool(VkCommandPool pool) {
  vkErrorInvalidHandle("VkCommandPool", as!u64(pool))
}

sub void vkErrorInvalidSurface(VkSurfaceKHR surface) {
  vkErrorInvalidHandle("VkSurfaceKHR", as!u64(surface))
}

sub void vkErrorInvalidSwapchain(VkSwapchainKHR swapchain) {
  vkErrorInvalidHandle("VkSwapchainKHR", as!u64(swapchain))
}

sub void vkErrorInvalidDisplayMode(VkDisplayModeKHR mode) {
  vkErrorInvalidHandle("VkDisplayModeKHR", as!u64(mode))
}

sub void vkErrorInvalidHandle(string handleType, u64 handle) {
  vkErrInvalidHandle(handleType, handle)
}

sub void vkErrorInvalidDescriptorUpdateTemplate(VkDescriptorUpdateTemplate set) {
  vkErrorInvalidHandle("VkDescriptorUpdateTemplate", as!u64(set))
}


sub void vkErrorNullPointer(string pointerType) {
  vkErrNullPointer(pointerType)
  abort
}

sub void vkErrorUnsupported(string unsupported) {
  vkErrUnsupported(unsupported)
  abort
}

sub void vkErrorNotNullPointer(string pointerType) {
  vkErrNotNullPointer(pointerType)
  // Continue the mutation as this may not cause problem.
}

sub void vkErrorUnrecognizedExtension(const char* name) {
  vkErrUnrecognizedExtension(as!string(name))
  // Continue the mutation as this may not cause problem.
}

sub void vkErrorExpectNVDedicatedlyAllocatedHandle(string handleType, u64 handle) {
  vkErrExpectNVDedicatedlyAllocatedHandle(handleType, handle)
  // Continue the mutation as this may not cause problem.
}
