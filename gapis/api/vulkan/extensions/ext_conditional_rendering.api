// Copyright (C) 2020 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

///////////////
// Constants //
///////////////

@extension("VK_EXT_conditional_rendering") define VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION 1
@extension("VK_EXT_conditional_rendering") define VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME "VK_EXT_conditional_rendering"

@internal class vkCmdBeginConditionalRenderingEXTArgs {
  const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin
}

@internal class vkCmdEndConditionalRenderingEXTArgs {
}

sub void dovkCmdBeginConditionalRenderingEXT(ref!vkCmdBeginConditionalRenderingEXTArgs cond) {

}

sub void dovkCmdEndConditionalRenderingEXT(ref!vkCmdEndConditionalRenderingEXTArgs unused) {
}

@unused
bitfield VkConditionalRenderingFlagBitsEXT {
  VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 0x00000001
}
type VkFlags VkConditionalRenderingFlagsEXT

@extension("VK_EXT_conditional_rendering")
class VkConditionalRenderingBeginInfoEXT {
  @values(VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT)
  VkStructureType sType
  const void* pNext
  VkBuffer buffer
  VkDeviceSize offset
  VkConditionalRenderingFlagsEXT flags
}

@extension("VK_EXT_conditional_rendering")
@structextends("VkCommandBufferInheritanceInfo")
class VkCommandBufferInheritanceConditionalRenderingInfoEXT {
  @values(VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT)
  VkStructureType sType
  const void* pNext
  VkBool32 conditionalRenderingEnable
}

@extension("VK_EXT_conditional_rendering")
@structextends("VkPhysicalDeviceFeatures2","VkDeviceCreateInfo")
class VkPhysicalDeviceConditionalRenderingFeaturesEXT {
  @values(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT)
  VkStructureType sType
  const void* pNext
  VkBool32 conditionalRendering
  VkBool32 inheritedConditionalRendering
}

@extension("VK_EXT_conditional_rendering")
@threadSafety("app")
@indirect("VkCommandBuffer", "VkDevice")
cmd void vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, const VkConditionalRenderingBeginInfoEXT* pConditinalRenderingBegin) {
  if !(commandBuffer in CommandBuffers) {
    vkErrorInvalidCommandBuffer(commandBuffer)
  }
}

@extension("VK_EXT_conditional_rendering")
@threadSafety("app")
@indirect("VkCommandBuffer", "VkDevice")
cmd void vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer) {
  if !(commandBuffer in CommandBuffers) {
    vkErrorInvalidCommandBuffer(commandBuffer)
  }
}

