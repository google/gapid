// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

@extension("VK_KHR_get_memory_requirements2")
class VkBufferMemoryRequirementsInfo2KHR {
  VkStructureType sType
  const void*     pNext
  VkBuffer        buffer
}

@extension("VK_KHR_get_memory_requirements2")
class VkImageMemoryRequirementsInfo2KHR {
  VkStructureType sType
  const void*     pNext
  VkImage         image
}

@extension("VK_KHR_get_memory_requirements2")
class VkMemoryRequirements2KHR {
  VkStructureType      sType
  void*                pNext
  VkMemoryRequirements memoryRequirements
}

@extension("VK_KHR_get_memory_requirements2")
class VkImageSparseMemoryRequirementsInfo2KHR {
  VkStructureType sType
  const void*     pNext
  VkImage         image
}

@extension("VK_KHR_get_memory_requirements2")
class VkSparseImageMemoryRequirements2KHR {
  VkStructureType                 sType
  void*                           pNext
  VkSparseImageMemoryRequirements memoryRequirements
}

@extension("VK_KHR_get_memory_requirements2")
@indirect("VkDevice")
cmd void vkGetImageMemoryRequirements2KHR(
    VkDevice                                 device,
    const VkImageMemoryRequirementsInfo2KHR* pInfo,
    VkMemoryRequirements2KHR*                pMemoryRequirements) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  info := pInfo[0]
  memReqs := pMemoryRequirements[0]
  if memReqs.pNext != null {
    nPNext := numberOfPNext(as!const void*(memReqs.pNext))
    next := MutableVoidPtr(as!void*(memReqs.pNext))
    for i in (0 .. nPNext) {
      _ = as!const VkStructureType*(next.Ptr)[0]
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0].PNext
    }
  }

  // TODO: handle pNext for 'info'
  fence

  if pMemoryRequirements == null { vkErrorNullPointer("VkMemoryRequirements2KHR") }
  pMemoryRequirements[0] = ?
  memReq := pMemoryRequirements[0]

  if !(info.image in Images) { vkErrorInvalidImage(info.image) }
  // TODO: Drop the touch of the image object once we extract the memory
  // requirement info out of the image object.
  Images[info.image].MemoryRequirements = memReq.memoryRequirements

  if memReq.pNext != null {
    numPNext := numberOfPNext(as!const void*(memReq.pNext))
    next := MutableVoidPtr(as!void*(memReq.pNext))
    for i in (0 .. numPNext) {
      sType := as!const VkStructureType*(next.Ptr)[0]
      switch sType {
        case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR: {
          ext := as!VkMemoryDedicatedRequirementsKHR(?)
          Images[info.image].DedicatedRequirementsKHR = new!DedicatedRequirementsKHR(
            PrefersDedicatedAllocation:   ext.prefersDedicatedAllocation,
            RequiresDedicatedAllocation:  ext.requiresDedicatedAllocation,
          )
          as!VkMemoryDedicatedRequirementsKHR*(next.Ptr)[0] = ext
        }
      }
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0].PNext
    }
  }
}

@extension("VK_KHR_get_memory_requirements2")
@indirect("VkDevice")
cmd void vkGetBufferMemoryRequirements2KHR(
    VkDevice                                  device,
    const VkBufferMemoryRequirementsInfo2KHR* pInfo,
    VkMemoryRequirements2KHR*                 pMemoryRequirements) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  info := pInfo[0]
  // TODO: handle pNext

  memReqs := pMemoryRequirements[0]
  if memReqs.pNext != null {
    nPNext := numberOfPNext(as!const void*(memReqs.pNext))
    next := MutableVoidPtr(as!void*(memReqs.pNext))
    for i in (0 .. nPNext) {
      _ = as!const VkStructureType*(next.Ptr)[0]
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0].PNext
    }
  }

  fence

  if pMemoryRequirements == null { vkErrorNullPointer("VkMemoryRequirements2KHR") }
  pMemoryRequirements[0] = ?
  // TODO: handle pNext for 'memReq'
  memReq := pMemoryRequirements[0]
  if !(info.buffer in Buffers) { vkErrorInvalidBuffer(info.buffer) }
  // TODO: Do the touch of the buffer object once we extract the memory
  // requirement info out of the buffer objectd.
  Buffers[info.buffer].MemoryRequirements = memReq.memoryRequirements

  if memReq.pNext != null {
    numPNext := numberOfPNext(as!const void*(memReq.pNext))
    next := MutableVoidPtr(as!void*(memReq.pNext))
    for i in (0 .. numPNext) {
      sType := as!const VkStructureType*(next.Ptr)[0]
      switch sType {
        case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR: {
          ext := as!VkMemoryDedicatedRequirementsKHR(?)
          Buffers[info.buffer].DedicatedRequirementsKHR = new!DedicatedRequirementsKHR(
            PrefersDedicatedAllocation:   ext.prefersDedicatedAllocation,
            RequiresDedicatedAllocation:  ext.requiresDedicatedAllocation,
          )
          as!VkMemoryDedicatedRequirementsKHR*(next.Ptr)[0] = ext
        }
      }
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0].PNext
    }
  }
}

@extension("VK_KHR_get_memory_requirements2")
@indirect("VkDevice")
cmd void vkGetImageSparseMemoryRequirements2KHR(
    VkDevice                                       device,
    const VkImageSparseMemoryRequirementsInfo2KHR* pInfo,
    u32*                                           pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2KHR*           pSparseMemoryRequirements) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  info := pInfo[0]
  image := info.image
  if !(image in Images) { vkErrorInvalidImage(image) }
  // TODO: handle pNext
  if pSparseMemoryRequirementCount == null { vkErrorNullPointer("uint32_t") }
  read(pSparseMemoryRequirementCount[0:1])

  fence

  if pSparseMemoryRequirements == null {
    pSparseMemoryRequirementCount[0] = ?
  } else {
    count := as!u32(?)
    requirements := pSparseMemoryRequirements[0:count]
    for i in (0 .. count) {
      requirements[i] = ?
      // TODO: handle pNext for 'requirements[i]'
      aspect := requirements[i].memoryRequirements.formatProperties.aspectMask
      // TODO: Drop the touch of the image object.
      Images[image].SparseMemoryRequirements[as!u32(aspect)] = requirements[i].memoryRequirements
    }
    pSparseMemoryRequirementCount[0] = count
  }
}
