// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

/////////////
// Structs //
/////////////

@extension("VK_KHR_get_memory_requirements2")
class VkBufferMemoryRequirementsInfo2KHR {
  VkStructureType sType
  const void*     pNext
  VkBuffer        buffer
}

@extension("VK_KHR_get_memory_requirements2")
class VkImageMemoryRequirementsInfo2KHR {
  VkStructureType sType
  const void*     pNext
  VkImage         image
}

@extension("VK_KHR_get_memory_requirements2")
class VkMemoryRequirements2KHR {
  VkStructureType      sType
  void*                pNext
  VkMemoryRequirements memoryRequirements
}

@extension("VK_KHR_get_memory_requirements2")
class VkImageSparseMemoryRequirementsInfo2KHR {
  VkStructureType sType
  const void*     pNext
  VkImage         image
}

@extension("VK_KHR_get_memory_requirements2")
class VkSparseImageMemoryRequirements2KHR {
  VkStructureType                 sType
  void*                           pNext
  VkSparseImageMemoryRequirements memoryRequirements
}

//////////////
// Commands //
//////////////

@extension("VK_KHR_get_memory_requirements2")
@indirect("VkDevice")
cmd void vkGetImageMemoryRequirements2KHR(
    VkDevice                                 device,
    const VkImageMemoryRequirementsInfo2KHR* pInfo,
    VkMemoryRequirements2KHR*                pMemoryRequirements) {
  GetImageMemoryRequirements2(device,
    as!const VkImageMemoryRequirementsInfo2*(pInfo),
    as!VkMemoryRequirements2*(pMemoryRequirements))
}

@extension("VK_KHR_get_memory_requirements2")
@indirect("VkDevice")
cmd void vkGetBufferMemoryRequirements2KHR(
    VkDevice                                  device,
    const VkBufferMemoryRequirementsInfo2KHR* pInfo,
    VkMemoryRequirements2KHR*                 pMemoryRequirements) {
  GetBufferMemoryRequirements2(device,
    as!const VkBufferMemoryRequirementsInfo2*(pInfo),
    as!VkMemoryRequirements2*(pMemoryRequirements))
}

@extension("VK_KHR_get_memory_requirements2")
@indirect("VkDevice")
cmd void vkGetImageSparseMemoryRequirements2KHR(
    VkDevice                                       device,
    const VkImageSparseMemoryRequirementsInfo2KHR* pInfo,
    u32*                                           pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2KHR*           pSparseMemoryRequirements) {
  GetImageSparseMemoryRequirements2(device,
    as!const VkImageSparseMemoryRequirementsInfo2*(pInfo),
    pSparseMemoryRequirementCount,
    as!VkSparseImageMemoryRequirements2*(pSparseMemoryRequirements))
}
