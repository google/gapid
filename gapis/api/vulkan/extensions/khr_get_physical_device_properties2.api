// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

/////////////
// Structs //
/////////////

@extension("VK_KHR_get_physical_device_properties2")
class VkPhysicalDeviceFeatures2KHR {
  VkStructureType          sType
  void*                    pNext
  VkPhysicalDeviceFeatures features
}

@extension("VK_KHR_get_physical_device_properties2")
class VkPhysicalDeviceProperties2KHR {
  VkStructureType            sType
  void*                      pNext
  VkPhysicalDeviceProperties properties
}

@extension("VK_KHR_get_physical_device_properties2")
class VkFormatProperties2KHR {
  VkStructureType    sType
  void*              pNext
  VkFormatProperties formatProperties
}

@extension("VK_KHR_get_physical_device_properties2")
class VkImageFormatProperties2KHR {
  VkStructureType         sType
  void*                   pNext
  VkImageFormatProperties imageFormatProperties
}

@extension("VK_KHR_get_physical_device_properties2")
class VkPhysicalDeviceImageFormatInfo2KHR {
  VkStructureType    sType
  const void*        pNext
  VkFormat           format
  VkImageType        type
  VkImageTiling      tiling
  VkImageUsageFlags  usage
  VkImageCreateFlags flags
}

@extension("VK_KHR_get_physical_device_properties2")
class VkQueueFamilyProperties2KHR {
  VkStructureType         sType
  void*                   pNext
  VkQueueFamilyProperties queueFamilyProperties
}

@extension("VK_KHR_get_physical_device_properties2")
class VkPhysicalDeviceMemoryProperties2KHR {
  VkStructureType                  sType
  void*                            pNext
  VkPhysicalDeviceMemoryProperties memoryProperties
}

@extension("VK_KHR_get_physical_device_properties2")
class VkSparseImageFormatProperties2KHR {
  VkStructureType               sType
  void*                         pNext
  VkSparseImageFormatProperties properties
}

@extension("VK_KHR_get_physical_device_properties2")
class VkPhysicalDeviceSparseImageFormatInfo2KHR {
  VkStructureType       sType
  const void*           pNext
  VkFormat              format
  VkImageType           type
  VkSampleCountFlagBits samples
  VkImageUsageFlags     usage
  VkImageTiling         tiling
}

//////////////
// Commands //
//////////////

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
@extension("VK_KHR_get_physical_device_properties2")
cmd void vkGetPhysicalDeviceFeatures2KHR(
    VkPhysicalDevice              physicalDevice,
    VkPhysicalDeviceFeatures2KHR* pFeatures) {
  GetPhysicalDeviceFeatures2(physicalDevice,
    as!VkPhysicalDeviceFeatures2*(pFeatures))
}

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
@extension("VK_KHR_get_physical_device_properties2")
cmd void vkGetPhysicalDeviceProperties2KHR(
    VkPhysicalDevice                physicalDevice,
    VkPhysicalDeviceProperties2KHR* pProperties) {
  GetPhysicalDeviceProperties2(physicalDevice,
    as!VkPhysicalDeviceProperties2*(pProperties))
}

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
@extension("VK_KHR_get_physical_device_properties2")
cmd void vkGetPhysicalDeviceFormatProperties2KHR(
    VkPhysicalDevice        physicalDevice,
    VkFormat                format,
    VkFormatProperties2KHR* pFormatProperties) {
  GetPhysicalDeviceFormatProperties2(physicalDevice, format,
    as!VkFormatProperties2*(pFormatProperties))
}

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
@extension("VK_KHR_get_physical_device_properties2")
cmd VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(
    VkPhysicalDevice                           physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2KHR* pImageFormatInfo,
    VkImageFormatProperties2KHR*               pImageFormatProperties) {
  GetPhysicalDeviceImageFormatProperties2(physicalDevice,
    as!const VkPhysicalDeviceImageFormatInfo2*(pImageFormatInfo),
    as!VkImageFormatProperties2*(pImageFormatProperties))
  return ?
}

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
@extension("VK_KHR_get_physical_device_properties2")
cmd void vkGetPhysicalDeviceQueueFamilyProperties2KHR(
    VkPhysicalDevice             physicalDevice,
    u32*                         pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2KHR* pQueueFamilyProperties) {
  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  if pQueueFamilyPropertyCount == null { vkErrorNullPointer("uint32_t") }
  _ = pQueueFamilyPropertyCount[0]

  fence

  if pQueueFamilyProperties == null {
    pQueueFamilyPropertyCount[0] = ?
  } else {
    count := as!u32(?)
    properties := pQueueFamilyProperties[0:count]
    for i in (0 .. count) {
      properties[i] = ?
      // TODO: handle pNext
    }
    pQueueFamilyPropertyCount[0] = count
    if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
    for i in (0 .. count) {
      PhysicalDevices[physicalDevice].QueueFamilyProperties[i] = properties[i].queueFamilyProperties
    }
  }
}

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
@extension("VK_KHR_get_physical_device_properties2")
cmd void vkGetPhysicalDeviceMemoryProperties2KHR(
    VkPhysicalDevice                      physicalDevice,
    VkPhysicalDeviceMemoryProperties2KHR* pMemoryProperties) {
  GetPhysicalDeviceMemoryProperties2(physicalDevice,
    as!VkPhysicalDeviceMemoryProperties2*(pMemoryProperties))
}

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
@extension("VK_KHR_get_physical_device_properties2")
cmd void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(
    VkPhysicalDevice                                 physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2KHR* pFormatInfo,
    u32*                                             pPropertyCount,
    VkSparseImageFormatProperties2KHR*               pProperties) {
  GetPhysicalDeviceSparseImageFormatProperties2(physicalDevice,
    as!const VkPhysicalDeviceSparseImageFormatInfo2*(pFormatInfo),
    pPropertyCount,
    as!VkSparseImageFormatProperties2*(pProperties))
}
