{{/*
 * Copyright (C) 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */}}

{{/* ---- Includes ---- */}}
{{Include "../../templates/cpp_common.tmpl"}}

{{Global "ApiIndex" $.Index}}

{{$filename := print (Global "API") "_exports.h" }}
{{$ | Macro "ExportHeader" | Reflow 4 | Write $filename}}

{{define "AllExports"}}
  {{Macro "CommonExports" $.API}}
  namespace gapii {
  {{range $c := $.Commands}}
    {{if not (GetAnnotation $c "pfn")}}
      {{Template "DefineFunction" $c}}
    {{end}}
  {{end}}
  }
{{end}}

{{range $t := (PartitionByKey (AllCommands $) "InitialIndirection")}}
  {{if gt (len $t) 0}}
    {{$name := Title (Macro "InitialIndirection" (index $t 0))}}
    {{if $name}}
      {{$filename := print (Global "API") "_" $name "_exports.cpp" }}
      {{Macro "AllExports" "API" $ "Commands" $t| Reflow 4 | Write $filename}}
    {{else}}
      {{$filename := print (Global "API") "_exports.cpp" }}
      {{Macro "AllExports" "API" $ "Commands" $t| Reflow 4 | Write $filename}}
    {{end}}
  {{end}}
{{end}}

{{define "ExportHeader"}}
  {{AssertType $ "API"}}
  {{Template "C++.Copyright"}}
¶
  #include "{{Global "API"}}_types.h"
  #include "{{Global "API"}}_spy.h"
  namespace gapii {
  {{range $c := AllCommands $}}
    {{if (or (GetAnnotation $c "override") (not (GetAnnotation $c "synthetic")))}}
      {{$name := Macro "CmdName" $c}}
      VKAPI_ATTR {{Template "C++.ReturnType" $c}} VKAPI_CALL {{$name}}({{Template "C++.CallParameters" $c}});
    {{end}}
  {{end}}
  }
{{end}}

{{define "CommonExports"}}
  {{AssertType $ "API"}}
  {{Template "C++.Copyright"}}
¶
  #include "gapii/cc/{{Global "API"}}_types.h"
  #include "gapii/cc/{{Global "API"}}_spy.h"
  #include "gapii/cc/{{Global "API"}}_exports.h"
  #include "gapii/cc/spy.h"
¶
  #include "core/cc/get_{{Global "API"}}_proc_address.h"
  #include "core/cc/lock.h"
  #include "core/cc/log.h"
  #include "core/cc/target.h" // STDCALL
¶
  #include <memory>
¶
  #include <cstring>
¶
  using namespace gapii;
¶
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits an import declaration for an indirected command.
-------------------------------------------------------------------------------
*/}}
{{define "ConcatenateImports"}}
  {{AssertType $.FromClass "string"}}
  {{AssertType $.ToClass   "string"}}
  {{AssertType $.Element   "string"}}
  State.m{{$.FromClass}}sTo{{$.ToClass}}s[{{$.Element}}]
{{end}}


{{/*
-------------------------------------------------------------------------------
  Emits a reference to a function pointer to an indirected function.
-------------------------------------------------------------------------------
*/}}
{{define "GetIndirectedCall"}}
  {{AssertType $.Element    "string"      }}
  {{AssertType $.Function   "string"      }}
  {{$annotation := index $.Annotations 0}}
  {{if eq (len $.Annotations) 1}}
    {{$function_class := Title $annotation}}
    imports().m{{$function_class}}Functions[{{$.Element}}].{{$.Function}}
  {{else}}
    {{$next_annotation := index $.Annotations 1}}
    {{$from_class := Title $annotation}}
    {{$to_class := Title $next_annotation}}
    {{$next_elements := Macro "ConcatenateImports" "FromClass" (print $from_class) "ToClass" (print $to_class) "Element" $.Element}}
    {{Template "GetIndirectedCall" "Annotations" (Tail 1 $.Annotations) "Element" (print $next_elements) "Function" $.Function}}
  {{end}}
{{end}}



{{define "DefineFunction"}}
  {{$name := Macro "CmdName" $}}
  VKAPI_ATTR {{Template "C++.ReturnType" $}} VKAPI_CALL {{$name}}({{Template "C++.CallParameters" $}}) {
    Spy* s = Spy::get();
    GAPID_DEBUG({{Template "C++.PrintfCommandCall" $}});
    auto spy_ctx = s->enter("{{$name}}", {{Global "ApiIndex"}});
    {{if not (IsVoid $.Return.Type)}} auto _result_ = §{{end}}
    s->{{$name}}({{Macro "C++.CallArguments" $ | Strings "spy_ctx" | JoinWith ", "}});
    s->exit();
    {{if not (IsVoid $.Return.Type)}} return _result_;{{end}}
  }
{{end}}
