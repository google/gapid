// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

sub void readCoherentMemory(ref!DeviceMemoryObject memory, VkDeviceSize readOffset, VkDeviceSize readSize) {
  if IsMemoryCoherent(memory) && (memory.MappedLocation != null) {
    offset_in_mapped := deviceMemoryOffsetToMappedSpace(memory, readOffset)
    if offset_in_mapped != as!VkDeviceSize(0xFFFFFFFFFFFFFFFF) {
      read_size_in_mapped := switch (
      (readSize == as!VkDeviceSize(0xFFFFFFFFFFFFFFFF)) ||
      ((offset_in_mapped + readSize) > memory.MappedSize)) {
        case true:
          memory.MappedSize - offset_in_mapped
        case false:
          readSize
      }
      if (offset_in_mapped + read_size_in_mapped) > offset_in_mapped {
        readMappedCoherentMemory(memory.VulkanHandle, as!u64(offset_in_mapped),
          as!size(read_size_in_mapped))
      }
    }
  }
}

sub void readMemoryInBuffer(ref!BufferObject buffer, VkDeviceSize readOffset, VkDeviceSize readSize) {
  memPieces := getBufferBoundMemoryPiecesInRange(buffer, readOffset, readSize)
  for _, _, mp in memPieces {
    readCoherentMemory(mp.DeviceMemory, mp.MemoryOffset, mp.Size)
    read(mp.DeviceMemory.Data[mp.MemoryOffset:mp.MemoryOffset+mp.Size])
  }
}

sub void readMemoryInBufferBindings(map!(u32, ref!VkDescriptorBufferInfo) bufferBindings, map!(u32, VkDeviceSize) bufferBindingOffsets) {
  for i in (0 .. len(bufferBindings)) {
    bufferBinding := bufferBindings[as!u32(i)]
    if bufferBinding.Buffer != as!VkBuffer(0) {
      if (bufferBinding.Buffer in Buffers) {
        offset := switch as!u32(i) in bufferBindingOffsets {
          case true:
            bufferBindingOffsets[as!u32(i)]
          case false:
            bufferBinding.Offset
        }
        readMemoryInBuffer(Buffers[bufferBinding.Buffer], offset, bufferBinding.Range)
      }
    }
  }
}

sub void readMemoryInBufferViewBindings(map!(u32, VkBufferView) bufferViews) {
  for _, _, v in bufferViews {
    if v in BufferViews {
      view := BufferViews[v]
      if (view.Buffer.VulkanHandle in Buffers) {
        readMemoryInBuffer(view.Buffer, view.Offset, view.Range)
      }
    }
  }
}

sub void readMemoryInImageBindings(map!(u32, ref!VkDescriptorImageInfo) imageBindings) {
  for _, _, v in imageBindings {
    _ = Samplers[v.Sampler]
    if v.ImageView != as!VkImageView(0) {
      if (v.ImageView in ImageViews) {
        imageViewObj := ImageViews[v.ImageView]
        imageObj := imageViewObj.Image
        rng := imageViewObj.SubresourceRange
        updateImageQueue(imageObj, rng)
        readImageSubresource(imageObj, rng)
      }
    }
  }
}

sub void readMemoryInDescriptorSet(ref!DescriptorSetObject descriptor_set, map!(u32, map!(u32, VkDeviceSize)) bufferBindingOffsets) {
  if descriptor_set != null {
    for i in (0 .. len(descriptor_set.Bindings)) {
      binding := descriptor_set.Bindings[as!u32(i)]
      switch binding.BindingType {
        case
          VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
          VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
          VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC,
          VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC:
            if as!u32(i) in bufferBindingOffsets {
              readMemoryInBufferBindings(binding.BufferBinding, bufferBindingOffsets[as!u32(i)])
            } else {
              readMemoryInBufferBindings(binding.BufferBinding, null)
            }
        case VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER,
          VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER:
            readMemoryInBufferViewBindings(binding.BufferViewBindings)
        case
          VK_DESCRIPTOR_TYPE_SAMPLER,
          VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,
          VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE,
          VK_DESCRIPTOR_TYPE_STORAGE_IMAGE,
          VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT:
            readMemoryInImageBindings(binding.ImageBinding)
        default: {}
      }
    }
  }
}

sub void writeMemoryInBuffer(ref!BufferObject buffer, VkDeviceSize offset, VkDeviceSize size) {
  mem := buffer.Memory
  if mem != null {
    begin := buffer.MemoryOffset + offset
    actualSize := switch as!u64(size) {
      case 0xFFFFFFFFFFFFFFFF:
        buffer.Info.Size - offset
      default:
        size
    }
    end := begin + actualSize
    if len(mem.Data) != 0 {
      write(mem.Data[begin : end])
    }
  }
}

sub void writeMemoryInBufferBindings(map!(u32, ref!VkDescriptorBufferInfo) bufferBindings, map!(u32, VkDeviceSize) bufferBindingOffsets) {
  for i in (0 .. len(bufferBindings)) {
    bufferBinding := bufferBindings[as!u32(i)]
    if bufferBinding.Buffer != as!VkBuffer(0) {
      if (bufferBinding.Buffer in Buffers) {
        offset := switch as!u32(i) in bufferBindingOffsets {
          case true:
            bufferBindingOffsets[as!u32(i)]
          case false:
            bufferBinding.Offset
        }
        writeMemoryInBuffer(Buffers[bufferBinding.Buffer], offset, bufferBinding.Range)
      }
    }
  }
}

sub void writeMemoryInBufferViewBindings(map!(u32, VkBufferView) bufferViews) {
  for _, _, v in bufferViews {
    if v in BufferViews {
      view := BufferViews[v]
      if (view.Buffer.VulkanHandle in Buffers) {
        writeMemoryInBuffer(view.Buffer, view.Offset, view.Range)
      }
    }
  }
}

sub void writeMemoryInImageBindings(map!(u32, ref!VkDescriptorImageInfo) imageBindings) {
  for _, _, v in imageBindings {
    _ = Samplers[v.Sampler]
    if v.ImageView != as!VkImageView(0) {
      imageViewObj := ImageViews[v.ImageView]
      imageObj := imageViewObj.Image
      rng := imageViewObj.SubresourceRange
      writeImageSubresource(imageObj, rng)
      updateImageQueue(imageObj, rng)
    }
  }
}

sub void writeMemoryInDescriptorSet(ref!DescriptorSetObject descriptor_set, map!(u32, map!(u32, VkDeviceSize)) bufferBindingOffsets) {
  if descriptor_set != null {
    for i in (0 .. len(descriptor_set.Bindings)) {
      binding := descriptor_set.Bindings[as!u32(i)]
      switch binding.BindingType {
        case
          VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
          VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC:
            if as!u32(i) in bufferBindingOffsets {
              writeMemoryInBufferBindings(binding.BufferBinding, bufferBindingOffsets[as!u32(i)])
            } else {
              writeMemoryInBufferBindings(binding.BufferBinding, null)
            }
        case VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER:
            writeMemoryInBufferViewBindings(binding.BufferViewBindings)
        case VK_DESCRIPTOR_TYPE_STORAGE_IMAGE:
          writeMemoryInImageBindings(binding.ImageBinding)
        default: {}
      }
    }
  }
}


sub void readWriteMemoryInBoundDescriptorSets(
    ref!PipelineLayoutObject pipelineLayout,
    map!(u32, ref!DescriptorSetObject) descriptorSets,
    map!(u32, map!(u32, map!(u32, VkDeviceSize))) bufferBindingOffsets) {
  layerCount := len(pipelineLayout.SetLayouts)
  for i in (0 .. layerCount) {
    readMemoryInDescriptorSet(descriptorSets[as!u32(i)], bufferBindingOffsets[as!u32(i)])
    writeMemoryInDescriptorSet(descriptorSets[as!u32(i)], bufferBindingOffsets[as!u32(i)])
  }
}

sub void readCoherentMemoryInImage(ref!ImageObject image) {
  mem := image.BoundMemory
  if mem != null {
    // Host access to image memory is only well-defined for images created with
    // VK_IMAGE_TILING_LINEAR tiling and for image subresources of those images
    // which are currently in either VK_IMAGE_LAYOUT_PREINITIALIZED or
    // VK_IMAGE_LAYOUT_GENERAL layout.
    // TODO: Complete the layout tracking logic then update this if statement
    // to check the layout of the underlying image.
    if image.Info.Tiling == VK_IMAGE_TILING_LINEAR {
      readCoherentMemory(mem, image.BoundMemoryOffset, inferImageSize(image))
    }
  }
}

sub void readMemoryInCurrentPipelineBoundVertexBuffers(u32 vertexCount, u32 instanceCount, u32 firstVertex, u32 firstInstance) {
  for _ , _ , vertex_binding in lastDrawInfo().GraphicsPipeline.VertexInputState.BindingDescriptions {
    if vertex_binding.binding in lastDrawInfo().BoundVertexBuffers {
      bound_vertex_buffer := lastDrawInfo().BoundVertexBuffers[vertex_binding.binding]
      backing_buf := bound_vertex_buffer.Buffer
      if backing_buf.Memory != null {
        start_vertex := switch vertex_binding.inputRate {
          case VK_VERTEX_INPUT_RATE_VERTEX:
            firstVertex
          case VK_VERTEX_INPUT_RATE_INSTANCE:
            firstInstance
        }
        num_vertices := switch vertex_binding.inputRate {
          case VK_VERTEX_INPUT_RATE_VERTEX:
            vertexCount
          case VK_VERTEX_INPUT_RATE_INSTANCE:
            instanceCount
        }
        start_offset := bound_vertex_buffer.Offset + as!VkDeviceSize(start_vertex * vertex_binding.stride)
        num := switch vertexCount == 0xFFFFFFFF {
          case true:
            backing_buf.Info.Size - start_offset
          case false:
            as!VkDeviceSize(num_vertices * vertex_binding.stride)
        }
        readMemoryInBuffer(backing_buf, start_offset, num)
      }
    }
  }
}

sub bool IsMemoryCoherent(ref!DeviceMemoryObject memory) {
  physical_device := PhysicalDevices[Devices[memory.Device].PhysicalDevice]
  return 0 != (as!u32(physical_device.MemoryProperties.memoryTypes[memory.MemoryTypeIndex].propertyFlags) &
  as!u32(VK_MEMORY_PROPERTY_HOST_COHERENT_BIT))
}
