// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

sub void readCoherentMemory(ref!DeviceMemoryObject memory, VkDeviceSize readOffset, VkDeviceSize readSize) {
  if IsMemoryCoherent(memory) && (memory.MappedLocation != null) {
    offset_in_mapped := deviceMemoryOffsetToMappedSpace(memory, readOffset)
    if offset_in_mapped != as!VkDeviceSize(0xFFFFFFFFFFFFFFFF) {
      read_size_in_mapped := switch (
      (readSize == as!VkDeviceSize(0xFFFFFFFFFFFFFFFF)) ||
      ((offset_in_mapped + readSize) > memory.MappedSize)) {
        case true:
          memory.MappedSize - offset_in_mapped
        case false:
          readSize
      }
      if (offset_in_mapped + read_size_in_mapped) > offset_in_mapped {
        readMappedCoherentMemory(memory.VulkanHandle, as!u64(offset_in_mapped),
          as!size(read_size_in_mapped))
      }
    }
  }
}

sub void readCoherentMemoryInBuffer(ref!BufferObject buffer, VkDeviceSize readOffset, VkDeviceSize readSize) {
  mem := buffer.Memory
  if mem != null {
    if as!u64(readSize) == 0xFFFFFFFFFFFFFFFF {
      readCoherentMemory(mem, buffer.MemoryOffset + readOffset, buffer.Info.Size - readOffset)
    } else {
      readCoherentMemory(mem, buffer.MemoryOffset + readOffset, readSize)
    }
  }
}

sub void readCoherentMemoryInBufferBindings(map!(u32, ref!VkDescriptorBufferInfo) bufferBindings) {
  for _, _, v in bufferBindings {
    if v.Buffer != as!VkBuffer(0) {
      if (v.Buffer in Buffers) {
        readCoherentMemoryInBuffer(Buffers[v.Buffer], v.Offset, v.Range)
      }
    }
  }
}

sub void readCoherentMemoryBufferViewBindings(map!(u32, VkBufferView) bufferViews) {
  for _, _, v in bufferViews {
    if v in BufferViews {
      view := BufferViews[v]
      if (view.Buffer.VulkanHandle in Buffers) {
        readCoherentMemoryInBuffer(view.Buffer, view.Offset, view.Range)
      }
    }
  }
}

sub void readCoherentMemoryInDescriptorSet(ref!DescriptorSetObject descriptor_set) {
  for _, _, v in descriptor_set.Bindings {
    switch v.BindingType {
      case
        VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
        VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
        VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC,
        VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC:
          readCoherentMemoryInBufferBindings(v.BufferBinding)
      case VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER,
        VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER:
          readCoherentMemoryBufferViewBindings(v.BufferViewBindings)
      default: {}
    }
  }
}

sub void readCoherentMemoryInBoundDescriptorSets() {
  for _, _, s in lastDrawInfo().DescriptorSets {
    readCoherentMemoryInDescriptorSet(s)
  }
}

sub void readCoherentMemoryInImage(ref!ImageObject image) {
  mem := image.BoundMemory
  if mem != null {
    // Host access to image memory is only well-defined for images created with
    // VK_IMAGE_TILING_LINEAR tiling and for image subresources of those images
    // which are currently in either VK_IMAGE_LAYOUT_PREINITIALIZED or
    // VK_IMAGE_LAYOUT_GENERAL layout.
    // TODO: Complete the layout tracking logic then update this if statement
    // to check the layout of the underlying image.
    if image.Info.Tiling == VK_IMAGE_TILING_LINEAR {
      readCoherentMemory(mem, image.BoundMemoryOffset, inferImageSize(image))
    }
  }
}

sub void readCoherentMemoryInCurrentPipelineBoundVertexBuffers(u32 vertexCount, u32 instanceCount, u32 firstVertex, u32 firstInstance) {
  for _ , _ , vertex_binding in lastDrawInfo().GraphicsPipeline.VertexInputState.BindingDescriptions {
    if vertex_binding.binding in lastDrawInfo().BoundVertexBuffers {
      bound_vertex_buffer := lastDrawInfo().BoundVertexBuffers[vertex_binding.binding]
      backing_buf := bound_vertex_buffer.Buffer
      if ((backing_buf.Memory != null) && IsMemoryCoherent(backing_buf.Memory)) {
        start_vertex := switch vertex_binding.inputRate {
          case VK_VERTEX_INPUT_RATE_VERTEX:
            firstVertex
          case VK_VERTEX_INPUT_RATE_INSTANCE:
            firstInstance
        }
        num_vertices := switch vertex_binding.inputRate {
          case VK_VERTEX_INPUT_RATE_VERTEX:
            vertexCount
          case VK_VERTEX_INPUT_RATE_INSTANCE:
            instanceCount
        }
        start_offset := bound_vertex_buffer.Offset + as!VkDeviceSize(start_vertex * vertex_binding.stride)
        num := switch vertexCount == 0xFFFFFFFF {
          case true:
            backing_buf.Info.Size - start_offset
          case false:
            as!VkDeviceSize(num_vertices * vertex_binding.stride)
        }
        readCoherentMemoryInBuffer(backing_buf, start_offset, num)
      }
    }
  }
}

sub bool IsMemoryCoherent(ref!DeviceMemoryObject memory) {
  physical_device := PhysicalDevices[Devices[memory.Device].PhysicalDevice]
  return 0 != (as!u32(physical_device.MemoryProperties.memoryTypes[memory.MemoryTypeIndex].propertyFlags) &
  as!u32(VK_MEMORY_PROPERTY_HOST_COHERENT_BIT))
}
