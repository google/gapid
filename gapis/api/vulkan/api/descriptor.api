// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

///////////////////////////
// Descriptor set layout //
///////////////////////////

@internal class DescriptorSetLayoutBinding {
  VkDescriptorType                     Type
  @unused u32                          Count
  @unused VkShaderStageFlags           Stages
  @unused map!(u32, ref!SamplerObject) ImmutableSamplers
}

@internal class DescriptorSetLayoutObject {
  @unused VkDevice              Device
  @unused VkDescriptorSetLayout VulkanHandle
  u32                           MaximumBinding
  // Map of binding numbers to binding information
  map!(u32, DescriptorSetLayoutBinding) Bindings
  @unused ref!VulkanDebugMarkerInfo     DebugInfo
}

@threadSafety("system")
@indirect("VkDevice")
cmd VkResult vkCreateDescriptorSetLayout(
    VkDevice                               device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    AllocationCallbacks                    pAllocator,
    VkDescriptorSetLayout*                 pSetLayout) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if pCreateInfo == null { vkErrorNullPointer("VkDescriptorSetLayoutCreateInfo") }
  info := pCreateInfo[0]
  // handle pNext
  if info.pNext != null {
    numPNext := numberOfPNext(info.pNext)
    next := MutableVoidPtr(as!void*(info.pNext))
    for i in (0 .. numPNext) {
      sType := as!const VkStructureType*(next.Ptr)[0:1][0]
      _ = sType
      // TODO: handle extensions for VkDescriptorSetLayoutCreateInfo
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
    }
  }
  count := info.bindingCount
  bindings := info.pBindings[0:count]
  descriptorSetLayout := new!DescriptorSetLayoutObject()
  descriptorSetLayout.Device = device
  largestBinding := MutableU32(0)

  for i in (0 .. count) {
    descriptorBinding := DescriptorSetLayoutBinding(
      Type:    bindings[i].descriptorType,
      Count:   bindings[i].descriptorCount,
      Stages:  bindings[i].stageFlags
    )
    c := bindings[i].descriptorCount
    if (c != 0) && (bindings[i].pImmutableSamplers != null) {
      samplers := bindings[i].pImmutableSamplers[0:c]
      for j in (0 .. c) {
        sampler := samplers[j]
        descriptorBinding.ImmutableSamplers[j] = Samplers[sampler]
      }
    }
    descriptorSetLayout.Bindings[bindings[i].binding] = descriptorBinding
    if (bindings[i].binding > largestBinding.Val) {
      largestBinding.Val = bindings[i].binding
    }
  }
  descriptorSetLayout.MaximumBinding = largestBinding.Val

  handle := ?
  if pSetLayout == null { vkErrorNullPointer("VkDescriptorSetLayout") }
  pSetLayout[0] = handle
  descriptorSetLayout.VulkanHandle = handle
  DescriptorSetLayouts[handle] = descriptorSetLayout

  return ?
}

@threadSafety("system")
@indirect("VkDevice")
cmd void vkDestroyDescriptorSetLayout(
    VkDevice                     device,
    VkDescriptorSetLayout        descriptorSetLayout,
    AllocationCallbacks          pAllocator) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  delete(DescriptorSetLayouts, descriptorSetLayout)
}

/////////////////////
// Descriptor pool //
/////////////////////

@internal class DescriptorPoolObject {
  @unused VkDevice                                       Device
  @unused VkDescriptorPool                               VulkanHandle
  @unused VkDescriptorPoolCreateFlags                    Flags
  @unused u32                                            MaxSets
  @unused map!(u32, VkDescriptorPoolSize)                Sizes
  @unused map!(VkDescriptorSet, ref!DescriptorSetObject) DescriptorSets
  @unused ref!VulkanDebugMarkerInfo                      DebugInfo
}

@threadSafety("system")
@indirect("VkDevice")
cmd VkResult vkCreateDescriptorPool(
    VkDevice                          device,
    const VkDescriptorPoolCreateInfo* pCreateInfo,
    AllocationCallbacks               pAllocator,
    VkDescriptorPool*                 pDescriptorPool) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if pCreateInfo == null { vkErrorNullPointer("VkDescriptorPoolCreateInfo") }
  info := pCreateInfo[0]
  // handle pNext
  if info.pNext != null {
    numPNext := numberOfPNext(info.pNext)
    next := MutableVoidPtr(as!void*(info.pNext))
    for i in (0 .. numPNext) {
      sType := as!const VkStructureType*(next.Ptr)[0:1][0]
      _ = sType
      // TODO: handle extensions for VkDescriptorPoolCreateInfo
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
    }
  }
  pool := new!DescriptorPoolObject(
    Device:   device,
    Flags:    info.flags,
    MaxSets:  info.maxSets)

  sizes := info.pPoolSizes[0:info.poolSizeCount]
  for i in (0 .. info.poolSizeCount) {
    pool.Sizes[i] = sizes[i]
  }

  handle := ?
  if pDescriptorPool == null { vkErrorNullPointer("VkDescriptorPool") }
  pDescriptorPool[0] = handle
  pool.VulkanHandle = handle
  DescriptorPools[handle] = pool

  return ?
}

@threadSafety("system")
@indirect("VkDevice")
cmd void vkDestroyDescriptorPool(
    VkDevice                     device,
    VkDescriptorPool             descriptorPool,
    AllocationCallbacks          pAllocator) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if (descriptorPool != as!VkDescriptorPool(0)) {
    if !(descriptorPool in DescriptorPools) { vkErrorInvalidDescriptorPool(descriptorPool) }
    sets := DescriptorPools[descriptorPool].DescriptorSets
    for _ , s , _ in sets {
      delete(DescriptorSets, s)
    }
    delete(DescriptorPools, descriptorPool)
  }
}

@threadSafety("app")
@indirect("VkDevice")
cmd VkResult vkResetDescriptorPool(
    VkDevice                   device,
    VkDescriptorPool           descriptorPool,
    VkDescriptorPoolResetFlags flags) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if !(descriptorPool in DescriptorPools) { vkErrorInvalidDescriptorPool(descriptorPool) }
  // We need to iterate through all the descriptor sets in the descriptor pool
  // and remove them from the pool. The following line will makes a copy of
  // the map in the generated C++ code, to prevent us from deleting an item
  // while iterating the map. However, in the generated Go code, this does not
  // make a copy of the map but a reference. But according to the examples in
  // Effective Go (https://golang.org/doc/effective_go.html#for), deleting
  // while iterating is safe for Go. So the code here should behave as we
  // expect.
  sets := DescriptorPools[descriptorPool].DescriptorSets
  for _ , s , _ in sets {
    delete(DescriptorSets, s)
  }
  old_object := DescriptorPools[descriptorPool]
  pool := new!DescriptorPoolObject(
    Device:        old_object.Device,
    VulkanHandle:  old_object.VulkanHandle,
    Flags:         old_object.Flags,
    MaxSets:       old_object.MaxSets,
    Sizes:         old_object.Sizes,
    DebugInfo:     old_object.DebugInfo
  )
  DescriptorPools[descriptorPool] = pool
  return ?
}

////////////////////
// Descriptor set //
////////////////////

@internal class DescriptorBinding {
  VkDescriptorType                      BindingType
  map!(u32, ref!VkDescriptorBufferInfo) BufferBinding
  map!(u32, ref!VkDescriptorImageInfo)  ImageBinding
  map!(u32, VkBufferView)               BufferViewBindings
}

@internal class DescriptorSetObject {
  @unused VkDevice                      Device
  @unused VkDescriptorSet               VulkanHandle
  @unused VkDescriptorPool              DescriptorPool

  // Map from a binding number to its bound array of buffers.
  map!(u32, ref!DescriptorBinding)      Bindings
  ref!DescriptorSetLayoutObject         Layout
  @unused ref!VulkanDebugMarkerInfo     DebugInfo

  @untracked @untrackedMap @unused @hidden @nobox
  map!(VkImage, ref!ImageCoverage)      LinkedImages
  @untracked @untrackedMap @unused @hidden @nobox
  map!(VkBuffer, bool)                  LinkedBuffers
  @untracked @untrackedMap @unused @hidden @nobox
  map!(VkCommandBuffer, bool)           CommandBufferUsers
}

@threadSafety("app")
@indirect("VkDevice")
cmd VkResult vkAllocateDescriptorSets(
    VkDevice                           device,
    const VkDescriptorSetAllocateInfo* pAllocateInfo,
    VkDescriptorSet*                   pDescriptorSets) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if pAllocateInfo == null { vkErrorNullPointer("VkDescriptorSetAllocateInfo") }
  info := pAllocateInfo[0]
  // handle pNext
  if info.pNext != null {
    numPNext := numberOfPNext(info.pNext)
    next := MutableVoidPtr(as!void*(info.pNext))
    for i in (0 .. numPNext) {
      sType := as!const VkStructureType*(next.Ptr)[0:1][0]
      _ = sType
      // TODO: handle extensions for VkDescriptorSetAllocateInfo
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
    }
  }
  count := info.descriptorSetCount

  layouts := info.pSetLayouts[0:count]
  read(info.pSetLayouts[0:count])
  if pDescriptorSets == null { vkErrorNullPointer("VkDescriptorSet") }
  sets := pDescriptorSets[0:count]

  for i in (0 .. count) {
    handle := ?
    sets[i] = handle
    if (handle != as!VkDescriptorSet(0)) {
      object := new!DescriptorSetObject(device, handle,
        info.descriptorPool)
      pool := DescriptorPools[info.descriptorPool]
      pool.DescriptorSets[handle] = object
      object.Layout = DescriptorSetLayouts[layouts[i]]
      DescriptorSets[handle] = object
    }
  }

  return ?
}

@indirect("VkDevice")
cmd VkResult vkFreeDescriptorSets(
    VkDevice               device,
    VkDescriptorPool       descriptorPool,
    u32                    descriptorSetCount,
    const VkDescriptorSet* pDescriptorSets) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if !(descriptorPool in DescriptorPools) { vkErrorInvalidDescriptorPool(descriptorPool) }
  if pDescriptorSets == null { vkErrorNullPointer("VkDescriptorSet") }
  sets := pDescriptorSets[0:descriptorSetCount]
  for i in (0 .. descriptorSetCount) {
    pool := DescriptorPools[DescriptorSets[sets[i]].DescriptorPool]
    delete(pool.DescriptorSets, sets[i])
    delete(DescriptorSets, sets[i])
  }

  return ?
}

@internal class DescriptorUpdateRecord {
  u32 Binding
  u32 ArrayIndex
  u32 UpdateIndex
}

@internal class DescriptorSetWrite {
  u32                        Binding
  u32                        BindingArrayIndex
  VkDescriptorType           Type
  VkDescriptorSet            DstSet
  ref!VkDescriptorImageInfo  ImageInfo
  ref!VkDescriptorBufferInfo BufferInfo
  VkBufferView               BufferView
}

@internal class WriteReturnMap {
  map!(u32, DescriptorSetWrite) Map
}

// Rewrites all descriptor-set writes to be single updates
sub map!(u32, DescriptorSetWrite) RewriteWriteDescriptorSets
    (u32                         descriptorWriteCount,
     const VkWriteDescriptorSet* pDescriptorWrites) {
  descriptor_writes := pDescriptorWrites[0:descriptorWriteCount]
  ret_val := WriteReturnMap()
  for i in (0 .. descriptorWriteCount) {
    write := descriptor_writes[i]
    count := write.descriptorCount
    set := DescriptorSets[write.dstSet]
    updating := DescriptorUpdateRecord(
      Binding:      write.dstBinding,
      ArrayIndex:   write.dstArrayElement,
      UpdateIndex:  0,
    )

    for j in (0 .. count) {
      // Find the right descriptor binding/array index for j descriptor
      found := MutableBool(false)
      for k in (updating.Binding .. set.Layout.MaximumBinding + 1) {
        if !found.b {
          if k in set.Layout.Bindings {
            if updating.ArrayIndex < set.Layout.Bindings[k].Count {
              updating.Binding = k
              found.b = true
            } else {
              updating.ArrayIndex -= set.Layout.Bindings[k].Count
            }
          }
        }
      }
      if !found.b {
        vkErrInvalidDescriptorArrayElement(as!u64(write.dstSet),
          write.dstBinding,                write.dstArrayElement + j)
      }

      switch (write.descriptorType) {
        case VK_DESCRIPTOR_TYPE_SAMPLER,
            VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,
            VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE,
            VK_DESCRIPTOR_TYPE_STORAGE_IMAGE,
            VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT: {
          imageInfos := write.pImageInfo[0:updating.UpdateIndex + 1]
          imageInfo := imageInfos[updating.UpdateIndex]
          ret_val.Map[len(ret_val.Map)] = DescriptorSetWrite(
            Binding:            updating.Binding,
            BindingArrayIndex:  updating.ArrayIndex,
            DstSet:             write.dstSet,
            Type:               write.descriptorType,
            ImageInfo:          new!VkDescriptorImageInfo(
              Sampler:      imageInfo.Sampler,
              ImageView:    imageInfo.ImageView,
              ImageLayout:  imageInfo.ImageLayout
            )
          )
        }
        case VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER,
            VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER: {
          bufferViews := write.pTexelBufferView[0:updating.UpdateIndex + 1]
          bufferView := bufferViews[updating.UpdateIndex]
          ret_val.Map[len(ret_val.Map)] = DescriptorSetWrite(
            Binding:            updating.Binding,
            Type:               write.descriptorType,
            DstSet:             write.dstSet,
            BindingArrayIndex:  updating.ArrayIndex,
            BufferView:         bufferView
          )
        }
        case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
            VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
            VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC,
            VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC: {
          bufferInfos := write.pBufferInfo[0:updating.UpdateIndex + 1]
          bufferInfo := bufferInfos[updating.UpdateIndex]
          ret_val.Map[len(ret_val.Map)] = DescriptorSetWrite(
            Binding:            updating.Binding,
            Type:               write.descriptorType,
            DstSet:             write.dstSet,
            BindingArrayIndex:  updating.ArrayIndex,
            BufferInfo:         new!VkDescriptorBufferInfo(
              Buffer:  bufferInfo.Buffer,
              Offset:  bufferInfo.Offset,
              Range:   bufferInfo.Range
            )
          )
        }
        default: {
          // Do nothing, we should also never get here
        }
      }
      updating.ArrayIndex += 1
      updating.UpdateIndex += 1
    }
  }
  return ret_val.Map
}

@internal class CopyReturnMap {
  map!(u32, DescriptorSetCopy) Map
}

@internal class DescriptorSetCopy {
  u32             SrcBinding
  u32             DstBinding
  u32             SrcArrayIndex
  u32             DstArrayIndex
  VkDescriptorSet SrcSet
  VkDescriptorSet DstSet
}

// Rewrites all descriptor-set writes to be single updates
sub map!(u32, DescriptorSetCopy) RewriteWriteDescriptorCopies
    (u32                        descriptorCopyCount,
     const VkCopyDescriptorSet* pDescriptorCopies) {
  descriptorCopies := pDescriptorCopies[0:descriptorCopyCount]
  ret_val := CopyReturnMap()
  for i in (0 .. descriptorCopyCount) {
    copy := descriptorCopies[i]
    count := copy.descriptorCount
    srcSet := DescriptorSets[copy.srcSet]
    dstSet := DescriptorSets[copy.dstSet]

    srcRecord := DescriptorUpdateRecord(
      Binding:      copy.srcBinding,
      ArrayIndex:   copy.srcArrayElement,
      UpdateIndex:  0,
    )
    dstRecord := DescriptorUpdateRecord(
      Binding:      copy.dstBinding,
      ArrayIndex:   copy.dstArrayElement,
      UpdateIndex:  0,
    )

    for j in (0 .. count) {
      // Find the exact binding/array index pair for src descriptor
      srcFound := MutableBool(false)
      for k in (srcRecord.Binding .. srcSet.Layout.MaximumBinding + 1) {
        if !srcFound.b {
          if k in srcSet.Layout.Bindings {
            if srcRecord.ArrayIndex < srcSet.Layout.Bindings[k].Count {
              srcRecord.Binding = k
              srcFound.b = true
            } else {
              srcRecord.ArrayIndex -= srcSet.Layout.Bindings[k].Count
            }
          }
        }
      }
      if !srcFound.b {
        vkErrInvalidDescriptorArrayElement(as!u64(copy.srcSet),
          copy.srcBinding,                 copy.srcArrayElement + j)
      }

      // Find the exact binding/array index pair for dst descriptor
      dstFound := MutableBool(false)
      for k in (dstRecord.Binding .. dstSet.Layout.MaximumBinding + 1) {
        if !dstFound.b {
          if k in dstSet.Layout.Bindings {
            if dstRecord.ArrayIndex < srcSet.Layout.Bindings[k].Count {
              dstRecord.Binding = k
              dstFound.b = true
            } else {
              dstRecord.ArrayIndex -= dstSet.Layout.Bindings[k].Count
            }
          }
        }
      }
      if !dstFound.b {
        vkErrInvalidDescriptorArrayElement(as!u64(copy.dstSet),
          copy.dstBinding,                 copy.dstArrayElement + j)
      }

      ret_val.Map[len(ret_val.Map)] = DescriptorSetCopy(
        SrcBinding:     srcRecord.Binding,
        DstBinding:     dstRecord.Binding,
        SrcArrayIndex:  srcRecord.ArrayIndex,
        DstArrayIndex:  dstRecord.ArrayIndex,
        SrcSet:         copy.srcSet,
        DstSet:         copy.dstSet,
      )
      srcRecord.UpdateIndex += 1
      srcRecord.ArrayIndex += 1
      dstRecord.UpdateIndex += 1
      dstRecord.ArrayIndex += 1
    }
  }
  return ret_val.Map
}

@indirect("VkDevice")
@threadsafe
cmd void vkUpdateDescriptorSets(
    VkDevice                    device,
    u32                         descriptorWriteCount,
    const VkWriteDescriptorSet* pDescriptorWrites,
    u32                         descriptorCopyCount,
    const VkCopyDescriptorSet*  pDescriptorCopies) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  ws := pDescriptorWrites[0:descriptorWriteCount]
  for i in (0 .. descriptorWriteCount) {
    w := ws[i]
    // handle VkWriteDescriptorSet pNext
    if w.pNext != null {
      numPNext := numberOfPNext(w.pNext)
      next := MutableVoidPtr(as!void*(w.pNext))
      for i in (0 .. numPNext) {
        sType := as!const VkStructureType*(next.Ptr)[0:1][0]
        _ = sType
        // TODO: handle extensions for VkWriteDescriptorSet
        next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
      }
    }
  }

  cs := pDescriptorCopies[0:descriptorCopyCount]
  for i in (0 .. descriptorCopyCount) {
    c := cs[i]
    // handle VkCopyDescriptorSet pNext
    if c.pNext != null {
      numPNext := numberOfPNext(c.pNext)
      next := MutableVoidPtr(as!void*(c.pNext))
      for i in (0 .. numPNext) {
        sType := as!const VkStructureType*(next.Ptr)[0:1][0]
        _ = sType
        // TODO: handle extensions for VkCopyDescriptorSet
        next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
      }
    }

  }

  modifiedDescriptorSets := new!DescriptorSetSet()

  writes := RewriteWriteDescriptorSets(
    descriptorWriteCount,
    pDescriptorWrites)
  for _ , _ , w in writes {
    modifiedDescriptorSets.val[w.DstSet] = true
    set := DescriptorSets[w.DstSet]
    binding := w.Binding
    arrayIndex := w.BindingArrayIndex
    setBinding := switch set.Bindings[binding] == null {
      case false:
        set.Bindings[binding]
      case true:
        new!DescriptorBinding(BindingType: set.Layout.Bindings[binding].Type)
    }
    if set.Layout.Bindings[binding].Type != setBinding.BindingType {
      vkErrInvalidDescriptorBindingType(set.VulkanHandle, binding, set.Layout.Bindings[binding].Type, setBinding.BindingType)
    }

    switch w.Type {
      case VK_DESCRIPTOR_TYPE_SAMPLER,
          VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,
          VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE,
          VK_DESCRIPTOR_TYPE_STORAGE_IMAGE,
          VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT: {
            imageBinding := setBinding.ImageBinding
            imageBinding[arrayIndex] = w.ImageInfo
            setBinding.ImageBinding = imageBinding
            if w.ImageInfo.Sampler in Samplers {
              samObj := Samplers[w.ImageInfo.Sampler]
              if samObj != null {
                samObj.DescriptorUsers[w.DstSet][binding][
                  as!u32(len(samObj.DescriptorUsers[w.DstSet][binding]))] = arrayIndex
              }
            }
            if w.ImageInfo.ImageView in ImageViews {
              viewObj := ImageViews[w.ImageInfo.ImageView]
              if viewObj != null {
                viewObj.DescriptorUsers[w.DstSet][binding][
                  as!u32(len(viewObj.DescriptorUsers[w.DstSet][binding]))] = arrayIndex
              }
            }
          }

      case VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER,
          VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER: {
            viewBindings := setBinding.BufferViewBindings
            viewBindings[arrayIndex] = w.BufferView
            setBinding.BufferViewBindings = viewBindings
            if w.BufferView in BufferViews {
              viewObj := BufferViews[w.BufferView]
              if viewObj != null {
                viewObj.DescriptorUsers[w.DstSet][binding][
                  as!u32(len(viewObj.DescriptorUsers[w.DstSet][binding]))] = arrayIndex
              }
            }
          }

      case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
          VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
          VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC,
          VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC: {
        bufferBindings := setBinding.BufferBinding
        bufferBindings[arrayIndex] = w.BufferInfo
        setBinding.BufferBinding = bufferBindings
      }
    }
    set.Bindings[binding] = setBinding
  }

  copies := RewriteWriteDescriptorCopies(
    descriptorCopyCount,
    pDescriptorCopies)
  for _ , _ , c in copies {
    modifiedDescriptorSets.val[c.DstSet] = true
    srcSet := DescriptorSets[c.SrcSet]
    dstSet := DescriptorSets[c.DstSet]
    srcBinding := switch (c.SrcBinding in srcSet.Bindings) {
      case false:
        srcSet.Bindings[c.SrcBinding]
      case true:
        new!DescriptorBinding(BindingType: srcSet.Layout.Bindings[c.SrcBinding].Type)
    }
    dstBinding := switch (c.DstBinding in dstSet.Bindings) {
      case false:
        dstSet.Bindings[c.DstBinding]
      case true:
        new!DescriptorBinding(BindingType: dstSet.Layout.Bindings[c.DstBinding].Type)
    }
    switch (srcBinding.BindingType) {
      case VK_DESCRIPTOR_TYPE_SAMPLER,
          VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,
          VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE,
          VK_DESCRIPTOR_TYPE_STORAGE_IMAGE,
          VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT: {
        imageBinding := dstBinding.ImageBinding
        imageBinding[c.DstArrayIndex] =
        srcBinding.ImageBinding[c.SrcArrayIndex]
        dstBinding.ImageBinding = imageBinding

        vkSam := srcBinding.ImageBinding[c.SrcArrayIndex].Sampler
        if vkSam in Samplers {
          samObj := Samplers[vkSam]
          if samObj != null {
            samObj.DescriptorUsers[c.DstSet][c.DstBinding][
              as!u32(len(samObj.DescriptorUsers[c.DstSet][c.DstBinding]))] = c.DstArrayIndex
          }
        }
        vkView := srcBinding.ImageBinding[c.SrcArrayIndex].ImageView
        if vkView in ImageViews {
          viewObj := ImageViews[vkView]
          if viewObj != null {
            viewObj.DescriptorUsers[c.DstSet][c.DstBinding][
              as!u32(len(viewObj.DescriptorUsers[c.DstSet][c.DstBinding]))] = c.DstArrayIndex
          }
        }
      }

      case VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER,
          VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER: {
        bufferViews := dstBinding.BufferViewBindings
        bufferViews[c.DstArrayIndex] =
        srcBinding.BufferViewBindings[c.SrcArrayIndex]
        dstBinding.BufferViewBindings = bufferViews

        vkView := srcBinding.BufferViewBindings[c.SrcArrayIndex]
        if vkView in BufferViews {
          viewObj := BufferViews[vkView]
          if viewObj != null {
            viewObj.DescriptorUsers[c.DstSet][c.DstBinding][
              as!u32(len(viewObj.DescriptorUsers[c.DstSet][c.DstBinding]))] = c.DstArrayIndex
          }
        }
      }

      case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
          VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
          VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC,
          VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC: {
        bufferBinding := dstBinding.BufferBinding
        bufferBinding[c.DstArrayIndex] =
        srcBinding.BufferBinding[c.SrcArrayIndex]
        dstBinding.BufferBinding = bufferBinding
      }
    }
    dstSet.Bindings[c.DstBinding] = dstBinding
  }

  // Then update the list of linked images and buffers for each modified
  // descriptor sets. This is to avoid traveling all the bindings and array
  // elements again when a command buffer binds these descriptor sets.
  for _, set, _ in modifiedDescriptorSets.val {
    setObj := DescriptorSets[set]

    // TODO: Notify the command buffers that contain vkCmdBindDescriptorSets
    // with the updated descriptor sets, if the descriptor sets' pools are
    // created with VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT and
    // their layouts created with
    // VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT.
    //for _, cb, _ in setObj.CommandBufferUsers {
    //  if cb in CommandBuffers {
    //    cbObj := CommandBuffers[cb]
    //    delete(cbObj.ProcessedDescriptorSets, set)
    //  }
    //}
    //clear(setObj.CommandBufferUsers)

    clear(setObj.LinkedBuffers)
    clear(setObj.LinkedImages)

    for _, _, binding in setObj.Bindings {
      switch binding.BindingType {
        case VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,
          VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE,
          VK_DESCRIPTOR_TYPE_STORAGE_IMAGE,
          VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT: {
          for _, _, ib in binding.ImageBinding {
            if ib.ImageView in ImageViews {
              viewObj := ImageViews[ib.ImageView]
              if viewObj.Image.VulkanHandle in Images {
                imgObj := viewObj.Image
                descriptorSetLinkImage(setObj, imgObj, viewObj.SubresourceRange)
              }
            }
          }
        }

        case VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER,
          VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER: {
          for _, _, bv in binding.BufferViewBindings {
            if bv in BufferViews {
              viewObj := BufferViews[bv]
              if viewObj.Buffer.VulkanHandle in Buffers {
                setObj.LinkedBuffers[viewObj.Buffer.VulkanHandle] = true
              }
            }
          }
        }

        case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
          VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
          VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC,
          VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC: {
          for _, _, bb in binding.BufferBinding {
            if bb.Buffer in Buffers {
              setObj.LinkedBuffers[bb.Buffer] = true
            }
          }
        }

        case VK_DESCRIPTOR_TYPE_SAMPLER: {
          // do nothing
        }

        default: {
          // do nothing, we should never reach here.
        }
      }
    }
  }
}

/////////////////////////////
// Command buffer commands //
/////////////////////////////

@internal class
vkCmdBindDescriptorSetsArgs {
  VkPipelineBindPoint        PipelineBindPoint
  VkPipelineLayout           Layout
  u32                        FirstSet
  dense_map!(u32, VkDescriptorSet) DescriptorSets
  dense_map!(u32, u32)             DynamicOffsets
}

@internal class
emptyBufferOffsets {
  map!(u32, map!(u32, map!(VkDeviceSize, bool))) BufferBindingOffsets
}

@spy_disabled
sub void updateDescriptorBufferBindingOffsets(ref!vkCmdBindDescriptorSetsArgs args) {
  _ = PipelineLayouts[args.Layout]
  dynamic_offset_index := MutableU32(0)

  computeInfo := lastComputeInfo()
  drawInfo := lastDrawInfo()

  currentDescriptorSets := switch args.PipelineBindPoint {
    case VK_PIPELINE_BIND_POINT_COMPUTE:
      computeInfo.DescriptorSets
    case VK_PIPELINE_BIND_POINT_GRAPHICS:
      drawInfo.DescriptorSets
  }

  bufferBindingOffsets := switch args.PipelineBindPoint {
    case VK_PIPELINE_BIND_POINT_COMPUTE:
      computeInfo.BufferBindingOffsets
    case VK_PIPELINE_BIND_POINT_GRAPHICS:
      drawInfo.BufferBindingOffsets
  }

  numDescSets := len(args.DescriptorSets)
  for i in (0 .. numDescSets) {
    if args.DescriptorSets[as!u32(i)] in DescriptorSets {
      set := args.DescriptorSets[as!u32(i)]
      setObj := DescriptorSets[set]
      currentDescriptorSets[args.FirstSet + as!u32(i)] = setObj
      desc_set_buf_offsets := bufferBindingOffsets[as!u32(i)+args.FirstSet]

      // Since the pDynamicOffsets point into the bindings in order of
      // binding index, and then array index, we have to loop over all
      // of the Bindings in order of the binding number.
      for j in (0 .. setObj.Layout.MaximumBinding + 1) {
        if (j in setObj.Bindings) && (setObj.Bindings[j] != null) {
          desc_binding_buf_offsets := desc_set_buf_offsets[as!u32(j)]
          binding := setObj.Bindings[j]
          numBufferBindings := len(binding.BufferBinding)
          for k in (0 .. numBufferBindings) {
            bufferInfo := binding.BufferBinding[as!u32(k)]

            binding_offset := switch binding.BindingType {
              case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC:
                as!VkDeviceSize(args.DynamicOffsets[dynamic_offset_index.Val]) + bufferInfo.Offset
              default:
                bufferInfo.Offset
            }
            dynamic_offset_index.Val = switch binding.BindingType {
              case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC:
                dynamic_offset_index.Val + 1
              default:
                dynamic_offset_index.Val
            }
            desc_binding_buf_offsets[as!u32(k)] = binding_offset
          }
          desc_set_buf_offsets[as!u32(j)] = desc_binding_buf_offsets
        }
      }
      bufferBindingOffsets[as!u32(i)+args.FirstSet] = desc_set_buf_offsets
    }
  }
}

sub void dovkCmdBindDescriptorSets(ref!vkCmdBindDescriptorSetsArgs args) {
  updateDescriptorBufferBindingOffsets(args)
}

@threadSafety("app")
@indirect("VkCommandBuffer", "VkDevice")
@threadsafe
cmd void vkCmdBindDescriptorSets(
    VkCommandBuffer        commandBuffer,
    VkPipelineBindPoint    pipelineBindPoint,
    VkPipelineLayout       layout,
    u32                    firstSet,
    u32                    descriptorSetCount,
    const VkDescriptorSet* pDescriptorSets,
    u32                    dynamicOffsetCount,
    const u32*             pDynamicOffsets) {
  if !(commandBuffer in CommandBuffers) {
    vkErrorInvalidCommandBuffer(commandBuffer)
  } else {
    cmdBuf := CommandBuffers[commandBuffer]

    if pDescriptorSets == null { vkErrorNullPointer("VkDescriptorSet") }
    sets := pDescriptorSets[0:descriptorSetCount]
    args := new!vkCmdBindDescriptorSetsArgs(
      PipelineBindPoint: pipelineBindPoint,
      Layout:            layout,
      FirstSet:          firstSet
    )

    dynamic_offsets := pDynamicOffsets[0:dynamicOffsetCount]
    for i in (0 .. dynamicOffsetCount) {
      args.DynamicOffsets[i] = dynamic_offsets[i]
    }
    for i in (0 .. descriptorSetCount) {
      args.DescriptorSets[i] = sets[i]
    }
    for i in (0 .. descriptorSetCount) {
      set := sets[i]
      if !(set in cmdBuf.ProcessedDescriptorSets) {
        if !(set in DescriptorSets) {
          vkErrorInvalidDescriptorSet(set)
        } else {
          setObj := DescriptorSets[set]
          for _, buf, _ in setObj.LinkedBuffers {
            cmdBuf.TouchedBuffers[buf] = true
          }
          for _, img, cov in setObj.LinkedImages {
            cmdBuf.TouchedImages[img] = cov
          }
          cmdBuf.ProcessedDescriptorSets[set] = true
          DescriptorSets[set].CommandBufferUsers[commandBuffer] = true
        }
      }
    }

    bc := cmdBuf.BufferCommands.vkCmdBindDescriptorSets
    mapPos := as!u32(len(bc))
    bc[mapPos] = args
    AddCommand(commandBuffer, cmd_vkCmdBindDescriptorSets, mapPos)
  }
}

@internal class
vkCmdPushConstantsArgs {
  VkPipelineLayout   Layout
  VkShaderStageFlags StageFlags
  u32                Offset
  u32                Size
  u8[]               Data
}

sub void dovkCmdPushConstants(ref!vkCmdPushConstantsArgs args) {
  _ = PipelineLayouts[args.Layout]
  pushConstants := lastPushConstants()
  if pushConstants != null {
    write(pushConstants.Data[args.Offset:args.Offset+args.Size])
  }
}

@indirect("VkCommandBuffer", "VkDevice")
@threadsafe
cmd void vkCmdPushConstants(
    VkCommandBuffer    commandBuffer,
    VkPipelineLayout   layout,
    VkShaderStageFlags stageFlags,
    u32                offset,
    u32                size,
    const void*        pValues) {
  if !(commandBuffer in CommandBuffers) {
    vkErrorInvalidCommandBuffer(commandBuffer)
  } else {
    args := new!vkCmdPushConstantsArgs(
      layout,                stageFlags, offset, size, clone(as!u8*(pValues)[0:size])
    )

    cmdBuf := CommandBuffers[commandBuffer]

    mapPos := as!u32(len(cmdBuf.BufferCommands.vkCmdPushConstants))
    cmdBuf.BufferCommands.vkCmdPushConstants[mapPos] = args

    AddCommand(commandBuffer, cmd_vkCmdPushConstants, mapPos)
  }
}

@spy_disabled
sub void readPushConstants(VkPipelineBindPoint bindPoint) {
  layout := boundPipelineLayout(bindPoint)
  pushConstants := lastPushConstants()
  if pushConstants != null {
    for _, _, r in layout.PushConstantRanges {
      read(pushConstants.Data[r.offset:r.offset+r.size])
    }
  }
}

// ----------------------------------------------------------------------------
// Vulkan 1.1 Commands
// ----------------------------------------------------------------------------

///////////////////////////
// Descriptor set layout //
///////////////////////////

@indirect("VkDevice")
cmd void vkGetDescriptorSetLayoutSupport(
    VkDevice                               device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    VkDescriptorSetLayoutSupport*          pSupport) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if pCreateInfo == null { vkErrorNullPointer("VkDescriptorSetLayoutCreateInfo") }
  info := pCreateInfo[0]
  _ = info.pBindings[0:info.bindingCount]
  // TODO: pNext pointer

  support := ?
  if pSupport == null { vkErrorNullPointer("VkDescriptorSetLayoutSupport") }
  pSupport[0] = support
}
