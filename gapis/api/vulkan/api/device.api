// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

@intenral class QueueInfo {
  u32 QueueFamilyIndex
  u32 QueueIndex
  f32 Priority
}

@internal class DeviceObject {
  VkPhysicalDevice                   PhysicalDevice
  @unused map!(u32, string)          EnabledExtensions
  @unused map!(u32, string)          EnabledLayers
  @unused map!(u32, QueueInfo)       Queues
  @unused map!(u32, ref!QueueObject) QueueObjects
  @unused VkPhysicalDeviceFeatures   EnabledFeatures
  @unused VkDevice                   VulkanHandle
  @unused ref!VulkanDebugMarkerInfo  DebugInfo
}

@indirect("VkDevice")
@override
cmd PFN_vkVoidFunction vkGetDeviceProcAddr(
    VkDevice    device,
    const char* pName) {

  _ = as!string(pName)
  return ?
}

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
@override
@custom
cmd VkResult vkCreateDevice(
    VkPhysicalDevice             physicalDevice,
    const VkDeviceCreateInfo*    pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDevice*                    pDevice) {
  // NOTE: The logic for this function should be identical to the one of
  // replayCreateVkDevice() in synthetic.api. Change both together.
  device := createDeviceObject(pCreateInfo)
  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  device.PhysicalDevice = physicalDevice
  // TODO: pAllocator

  handle := ?
  if pDevice == null { vkErrorNullPointer("VkDevice*") }
  pDevice[0] = handle
  device.VulkanHandle = handle
  Devices[handle] = device

  return ?
}

@threadSafety("system")
@indirect("VkDevice")
@override
@custom
cmd void vkDestroyDevice(
    VkDevice                     device,
    const VkAllocationCallbacks* pAllocator) {
  if (device in Devices) {
    dev := Devices[device]
    for _ , _ , v in dev.QueueObjects {
      if LastBoundQueue == v {
        LastBoundQueue = null
      }
      for i in (0 .. LastPresentInfo.PresentImageCount) {
        if (LastPresentInfo.PresentImages[i] != null) {
          if (LastPresentInfo.PresentImages[i].Device == device) {
            LastPresentInfo.PresentImages[i] = null
          }
        }
      }
      delete(Queues, v.VulkanHandle)
    }
  }

  // TODO: pAllocator
  delete(Devices, device)
}

@threadSafety("system")
@indirect("VkDevice")
@blocking
cmd VkResult vkDeviceWaitIdle(
    VkDevice device) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  return ?
}

// Marks the fields that need to be observed in a VkDeviceCreateInfo struct and populates and returns a DeviceObject.
sub ref!DeviceObject createDeviceObject(const VkDeviceCreateInfo* data) {
  object := new!DeviceObject()
  if data == null { vkErrorNullPointer("VkDeviceCreateInfo") }
  info := data[0]

  // TODO: pNext
  queueCreateInfos := info.pQueueCreateInfos[0:info.queueCreateInfoCount]
  for i in (0 .. info.queueCreateInfoCount) {
    queue_info := queueCreateInfos[i]
    queue_priorities := queue_info.pQueuePriorities[0:queue_info.queueCount]
    for j in (0 .. queue_info.queueCount) {
      object.Queues[len(object.Queues)] =
      QueueInfo(QueueFamilyIndex: queue_info.queueFamilyIndex,
        QueueIndex:               j,
        Priority:                 queue_priorities[j])
    }
  }

  layerNames := info.ppEnabledLayerNames[0:info.enabledLayerCount]
  for i in (0 .. info.enabledLayerCount) {
    object.EnabledLayers[i] = as!string(layerNames[i])
  }

  supported := supportedDeviceExtensions()
  extensionNames := info.ppEnabledExtensionNames[0:info.enabledExtensionCount]
  for i in (0 .. info.enabledExtensionCount) {
    ext := as!string(extensionNames[i])
    if !(ext in supported.ExtensionNames) { vkErrorUnrecognizedExtension(extensionNames[i]) }
    object.EnabledExtensions[i] = ext
  }

  if info.pEnabledFeatures != null {
    object.EnabledFeatures = info.pEnabledFeatures[0]
  }

  return object
}
