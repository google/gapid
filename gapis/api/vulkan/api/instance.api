// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

@internal class ApplicationInfo {
  @unused string ApplicationName
  @unused u32 ApplicationVersion
  @unused string EngineName
  @unused u32 EngineVersion
  @unused u32 ApiVersion  // The api version the app requested when setting up the instance
}

// Internal struct for holding useful instance level information from VkInstanceCreateInfo.
@internal class InstanceObject {
  @unused ref!ApplicationInfo       ApplicationInfo
  @unused map!(u32, string)         EnabledExtensions // Map from enabled extension index to extension name
  @unused map!(u32, string)         EnabledLayers
  @unused VkInstance                VulkanHandle
  @unused ref!VulkanDebugMarkerInfo DebugInfo
}

@custom
@threadSafety("system")
@override
cmd VkResult vkCreateInstance(
    const VkInstanceCreateInfo*  pCreateInfo,
    AllocationCallbacks          pAllocator,
    VkInstance*                  pInstance) {
  // NOTE: The logic for this function should be identical to the one of
  // replayCreateVkInstance() in synthetic.api. Change both together.

  instance := createInstanceObject(pCreateInfo)
  handle := ?
  if pInstance == null { vkErrorNullPointer("VkInstance") }
  pInstance[0] = handle
  instance.VulkanHandle = handle
  Instances[handle] = instance
  return ?
}

@threadSafety("system")
@indirect("VkInstance")
@override
@custom
cmd void vkDestroyInstance(
    VkInstance                   instance,
    AllocationCallbacks          pAllocator) {
  delete(Instances, instance)
  for _, device, _ in PhysicalDevices {
    delete(PhysicalDevices, device)
  }
}

@indirect("VkInstance")
@override
cmd PFN_vkVoidFunction vkGetInstanceProcAddr(
    VkInstance  instance,
    const char* pName) {

  _ = as!string(pName)
  return ?
}

// Marks the fields that need to be observed in a VkInstanceCreateInfo struct and populates and returns an InstanceObject.
sub ref!InstanceObject createInstanceObject(const VkInstanceCreateInfo* createInfo) {
  object := new!InstanceObject()
  if createInfo == null { vkErrorNullPointer("VkInstanceCreateInfo") }
  info := createInfo[0]

  // handle pNext
  if info.pNext != null {
    numPNext := numberOfPNext(info.pNext)
    next := MutableVoidPtr(as!void*(info.pNext))
    for i in (0 .. numPNext) {
      sType := as!const VkStructureType*(next.Ptr)[0:1][0]
      _ = sType
      // TODO: handle extensions for VkInstanceCreateInfo
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
    }
  }

  if info.pApplicationInfo != null {
    object.ApplicationInfo = readVkApplicationInfo(info.pApplicationInfo)
  }

  layerNames := info.ppEnabledLayerNames[0:info.enabledLayerCount]
  for i in (0 .. info.enabledLayerCount) {
    // We do not need to store off the list of enabled layers, since
    // a layer's presence should not affect any other calls in the API,
    // only an enabled extension that is provided by a layer.
    object.EnabledLayers[i] = as!string(layerNames[i])
  }

  supported := supportedInstanceExtensions()
  extensionNames := info.ppEnabledExtensionNames[0:info.enabledExtensionCount]
  for i in (0 .. info.enabledExtensionCount) {
    ext := as!string(extensionNames[i])
    if !(ext in supported.ExtensionNames) { vkErrorUnrecognizedExtension(extensionNames[i]) }
    object.EnabledExtensions[i] = ext
  }

  return object
}

// Marks the fields that need to be observed in a VkApplicationInfo struct and returns the API version.
sub ref!ApplicationInfo readVkApplicationInfo(const VkApplicationInfo* applicationInfo) {
  object := new!ApplicationInfo()
  info := applicationInfo[0]

  // handle pNext
  if info.pNext != null {
    numPNext := numberOfPNext(info.pNext)
    next := MutableVoidPtr(as!void*(info.pNext))
    for i in (0 .. numPNext) {
      sType := as!const VkStructureType*(next.Ptr)[0:1][0]
      _ = sType
      // TODO: handle extensions for VkApplicationInfo
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
    }
  }

  object.ApplicationVersion = info.applicationVersion
  object.EngineVersion = info.engineVersion
  object.ApiVersion = info.apiVersion

  if info.pApplicationName != null {
    object.ApplicationName = as!string(info.pApplicationName)
  }
  if info.pEngineName != null {
    object.EngineName = as!string(info.pEngineName)
  }
  return object
}
