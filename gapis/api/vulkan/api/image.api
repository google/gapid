// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

///////////
// Image //
///////////

@internal class ImageInfo {
  VkImageCreateFlags                             Flags
  VkImageType                                    ImageType
  VkFormat                                       Format
  VkExtent3D                                     Extent
  u32                                            MipLevels
  u32                                            ArrayLayers
  VkSampleCountFlagBits                          Samples
  VkImageTiling                                  Tiling
  VkImageUsageFlags                              Usage
  VkSharingMode                                  SharingMode
  map!(u32, u32)                                 QueueFamilyIndices
  VkImageLayout                                  InitialLayout
  ref!DedicatedAllocationBufferImageCreateInfoNV DedicatedAllocationNV
}

@resource
@internal class ImageObject {
  @unused VkDevice        Device
  @unused ref!QueueObject LastBoundQueue
  ref!DeviceMemoryObject  BoundMemory
  VkDeviceSize            BoundMemoryOffset
  // mapping from the resource offsets to the sparse bindings in the unit of sparse blocks
  map!(u64, VkSparseMemoryBind) OpaqueSparseMemoryBindings
  // mapping from image aspect flag bits to binding info
  map!(u32, ref!SparseBoundImageAspectInfo)    SparseImageMemoryBindings
  @unused bool                                 IsSwapchainImage
  VkImage                                      VulkanHandle
  ImageInfo                                    Info
  VkImageAspectFlags                           ImageAspect
  map!(VkImageAspectFlagBits, ref!ImageAspect) Aspects
  @unused ref!VulkanDebugMarkerInfo            DebugInfo
  VkMemoryRequirements                         MemoryRequirements
  map!(u32, VkSparseImageMemoryRequirements)   SparseMemoryRequirements
  ref!DedicatedRequirementsKHR                 DedicatedRequirementsKHR
}

@internal class ImageAspect {
  map!(u32, ref!ImageLayer) Layers
}

@internal class ImageLayer {
  map!(u32, ref!ImageLevel) Levels
}

@internal class ImageLevel {
  u32         Width
  u32         Height
  @unused u32 Depth
  @spy_disabled
  @hidden @nobox @internal u8[] Data
  VkImageLayout                 Layout
  ref!VkSubresourceLayout       LinearLayout
}

@internal class SparseBoundImageAspectInfo {
  map!(u32, ref!SparseBoundImageLayerInfo) Layers
}

@internal class SparseBoundImageLayerInfo {
  map!(u32, ref!SparseBoundImageLevelInfo) Levels
}

@internal class SparseBoundImageLevelInfo {
  map!(u64, ref!SparseBoundImageBlockInfo) Blocks
}

@internal class SparseBoundImageBlockInfo {
  VkOffset3D              Offset
  VkExtent3D              Extent
  VkDeviceMemory          Memory
  VkDeviceSize            MemoryOffset
  VkDeviceSize            Size
  VkSparseMemoryBindFlags Flags
}

@internal class ImageMemoryRequirements {
  VkMemoryRequirements                       MemoryRequirements
  map!(u32, VkSparseImageMemoryRequirements) AspectBitsToSparseMemoryRequirements
}

@internal class LinearImageLayouts {
  map!(u32, ref!LinearImageAspectLayouts) AspectLayouts
}

@internal class LinearImageAspectLayouts {
  map!(u32, ref!LinearImageLayerLayouts) LayerLayouts
}

@internal class LinearImageLayerLayouts {
  map!(u32, ref!VkSubresourceLayout) LevelLayouts
}

@threadSafety("system")
@indirect("VkDevice")
@override
cmd VkResult vkCreateImage(
    VkDevice                 device,
    const VkImageCreateInfo* pCreateInfo,
    AllocationCallbacks      pAllocator,
    VkImage*                 pImage) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if pCreateInfo == null { vkErrorNullPointer("VkImageCreateInfo") }
  info := pCreateInfo[0]
  queueFamilyIndices := info.pQueueFamilyIndices[0:info.queueFamilyIndexCount]

  imageInfo := ImageInfo(
    Flags:          info.flags,
    ImageType:      info.imageType,
    Format:         info.format,
    Extent:         info.extent,
    MipLevels:      info.mipLevels,
    ArrayLayers:    info.arrayLayers,
    Samples:        info.samples,
    Tiling:         info.tiling,
    Usage:          info.usage,
    SharingMode:    info.sharingMode,
    InitialLayout:  info.initialLayout,
  )

  for i in (0 .. info.queueFamilyIndexCount) {
    imageInfo.QueueFamilyIndices[i] = queueFamilyIndices[i]
  }

  imageAspect := as!VkImageAspectFlags(
    switch info.format {
      // Depth only
      case VK_FORMAT_D16_UNORM,
          VK_FORMAT_X8_D24_UNORM_PACK32,
          VK_FORMAT_D32_SFLOAT:
        VK_IMAGE_ASPECT_DEPTH_BIT
      // Stencil only
      case VK_FORMAT_S8_UINT:
        VK_IMAGE_ASPECT_STENCIL_BIT
      // Depth and Stencil
      case VK_FORMAT_D16_UNORM_S8_UINT,
          VK_FORMAT_D24_UNORM_S8_UINT,
          VK_FORMAT_D32_SFLOAT_S8_UINT:
        VK_IMAGE_ASPECT_DEPTH_BIT |
        VK_IMAGE_ASPECT_STENCIL_BIT
      // Others
      default:
        VK_IMAGE_ASPECT_COLOR_BIT
    })

  hasSparseBit := (as!u32(info.flags) & as!u32(VK_IMAGE_CREATE_SPARSE_BINDING_BIT)) != 0

  // Handle pNext
  if info.pNext != null {
    numPNext := numberOfPNext(info.pNext)
    next := MutableVoidPtr(as!void*(info.pNext))
    for i in (0 .. numPNext) {
      sType := as!const VkStructureType*(next.Ptr)[0:1][0]
      switch sType {
        case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV: {
          ext := as!VkDedicatedAllocationImageCreateInfoNV*(next.Ptr)[0]
          imageInfo.DedicatedAllocationNV = new!DedicatedAllocationBufferImageCreateInfoNV(
            DedicatedAllocation: ext.dedicatedAllocation
          )
        }
      }
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
    }
  }

  handle := ?
  if pImage == null { vkErrorNullPointer("VkImage") }
  pImage[0] = handle
  object := new!ImageObject(
    Device:            device,
    IsSwapchainImage:  false,
    VulkanHandle:      handle,
    Info:              imageInfo,
    ImageAspect:       imageAspect,
  )

  for _ , _ , aspectBit in unpackImageAspectFlags(imageAspect).Bits {
    object.Aspects[aspectBit] = new!ImageAspect()
    aspect := object.Aspects[aspectBit]
    for j in (0 .. info.arrayLayers) {
      aspect.Layers[j] = new!ImageLayer()
      for i in (0 .. info.mipLevels) {
        width := getMipSize(info.extent.Width, i)
        height := getMipSize(info.extent.Height, i)
        depth := getMipSize(info.extent.Depth, i)
        level := new!ImageLevel(Width: width,Height:  height,Depth:  depth,Layout:  info.initialLayout)
        aspect.Layers[j].Levels[i] = level
      }
    }
  }

  memRequirements := fetchImageMemoryRequirements(device, handle, hasSparseBit)
  // If the vkCreateImage is inserted by GAPID (e.g. the staging image for
  // reading framebuffer), NO memory requirements will be returned.
  if memRequirements != null {
    object.MemoryRequirements = memRequirements.MemoryRequirements
    if (hasSparseBit) {
      object.SparseMemoryRequirements = memRequirements.AspectBitsToSparseMemoryRequirements
    }
  }

  // If the image tiling is LINEAR, get the VkSubresourceLayout for each linear image level
  if (info.tiling == VK_IMAGE_TILING_LINEAR) {
    linearLayouts := fetchLinearImageSubresourceLayouts(device, object,
      VkImageSubresourceRange(
        aspectMask:      imageAspect,
        baseMipLevel:    0,
        levelCount:      imageInfo.MipLevels,
        baseArrayLayer:  0,
        layerCount:      imageInfo.ArrayLayers,
      ))
    if (linearLayouts != null) {
      for _ , aspectBit , al in linearLayouts.AspectLayouts {
        for _ , layer , layl in al.LayerLayouts {
          for _ , level , levl in layl.LevelLayouts {
            if levl != null {
              object.Aspects[as!VkImageAspectFlagBits(aspectBit)].Layers[layer].Levels[level].LinearLayout = levl
            }
          }
        }
      }
    }
  }

  Images[handle] = object

  return ?
}

@threadSafety("system")
@indirect("VkDevice")
cmd void vkDestroyImage(
    VkDevice            device,
    VkImage             image,
    AllocationCallbacks pAllocator) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if (image != as!VkImage(0)) {
    imageObject := Images[image]
    if (imageObject.BoundMemory != null) {
      // If the memory is deleted first, then do not try to remove ourselves.
      delete(imageObject.BoundMemory.BoundObjects, as!u64(image))
    }
    delete(Images, image)
    for _ , _ , v in ImageViews {
      if v.Image != null {
        if v.Image.VulkanHandle == image {
          v.Image = null
        }
      }
    }
    for i in (0 .. LastPresentInfo.PresentImageCount) {
      if (LastPresentInfo.PresentImages[i] != null) {
        if (LastPresentInfo.PresentImages[i].VulkanHandle == image) {
          LastPresentInfo.PresentImages[i] = null
        }
      }
    }
  }
}

@indirect("VkDevice")
cmd void vkGetImageSubresourceLayout(
    VkDevice                  device,
    VkImage                   image,
    const VkImageSubresource* pSubresource,
    VkSubresourceLayout*      pLayout) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if !(image in Images) { vkErrorInvalidImage(image) }
  _ = pSubresource[0]

  pLayout[0] = ?
}

@indirect("VkDevice")
cmd VkResult vkBindImageMemory(
    VkDevice       device,
    VkImage        image,
    VkDeviceMemory memory,
    VkDeviceSize   memoryOffset) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if !(memory in DeviceMemories) { vkErrorInvalidDeviceMemory(memory) }
  if !(image in Images) { vkErrorInvalidImage(image) }
  imageObject := Images[image]
  imageObject.BoundMemory = DeviceMemories[memory]
  imageObject.BoundMemoryOffset = memoryOffset
  DeviceMemories[memory].BoundObjects[as!u64(image)] = memoryOffset

  for _ , _ , aspectBit in unpackImageAspectFlags(imageObject.ImageAspect).Bits {
    aspect := imageObject.Aspects[aspectBit]
    for j in (0 .. imageObject.Info.ArrayLayers) {
      for i in (0 .. imageObject.Info.MipLevels) {
        level := aspect.Layers[j].Levels[i]
        elementAndTexelBlockSize := getElementAndTexelBlockSize(imageObject.Info.Format)
        depthElementSize := getDepthElementSize(imageObject.Info.Format, false)
        // Roundup the width and height in the number of blocks.
        widthInBlocks := roundUpTo(level.Width, elementAndTexelBlockSize.TexelBlockSize.Width)
        heightInBlocks := roundUpTo(level.Height, elementAndTexelBlockSize.TexelBlockSize.Height)
        elementSize := switch (aspectBit) {
          case VK_IMAGE_ASPECT_COLOR_BIT:
            elementAndTexelBlockSize.ElementSize
          case VK_IMAGE_ASPECT_DEPTH_BIT:
            depthElementSize
          case VK_IMAGE_ASPECT_STENCIL_BIT:
            // stencil element is always 1 byte wide
            as!u32(1)
        }
        size := widthInBlocks * heightInBlocks * level.Depth * elementSize

        // If the image has LINEAR tiling and the image level has layout
        // PREINITIALIZED, link the data back to the bound device memory.
        // Otherwise creates its own shadow memory pool.
        // TODO: If the image as a whole requires more memory than we
        // calculated, we should link the data back to the bound device memory
        // no matter whether the tiling is LINEAR or OPTIMAL. But we need to
        // come up with a 'linear layout' used in GAPID.
        if (imageObject.Info.Tiling == VK_IMAGE_TILING_LINEAR) &&
            (level.Layout == VK_IMAGE_LAYOUT_PREINITIALIZED) &&
            (level.LinearLayout != null) {
          loffset := as!u64(memoryOffset + level.LinearLayout.offset)
          lsize := as!u64(level.LinearLayout.size)
          level.Data = imageObject.BoundMemory.Data[loffset:lsize]
        } else {
          level.Data = make!u8(size)
        }
      }
    }
  }

  if (Images[image].Info.DedicatedAllocationNV != null) && (DeviceMemories[memory].DedicatedAllocationNV == null) {
    vkErrorExpectNVDedicatedlyAllocatedHandle("VkImage", as!u64(image))
  }
  if (Images[image].Info.DedicatedAllocationNV == null) && (DeviceMemories[memory].DedicatedAllocationNV != null) {
    vkErrorExpectNVDedicatedlyAllocatedHandle("VkDeviceMemory", as!u64(memory))
  }
  return ?
}

////////////////
// Image view //
////////////////

@internal class ImageViewObject {
  @unused VkDevice                  Device
  @unused VkImageView               VulkanHandle
  @unused VkImageViewType           Type
  @unused VkFormat                  Format
  @unused VkComponentMapping        Components
  @unused VkImageSubresourceRange   SubresourceRange
  ref!ImageObject                   Image
  @unused ref!VulkanDebugMarkerInfo DebugInfo
}

@threadSafety("system")
@indirect("VkDevice")
cmd VkResult vkCreateImageView(
    VkDevice                     device,
    const VkImageViewCreateInfo* pCreateInfo,
    AllocationCallbacks          pAllocator,
    VkImageView*                 pView) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if pCreateInfo == null { vkErrorNullPointer("VkImageViewCreateInfo") }
  image_view_create_info := pCreateInfo[0]

  handle := ?
  if !(image_view_create_info.image in Images) { vkErrorInvalidImage(image_view_create_info.image) }
  imageViewObject := new!ImageViewObject(Device: device,
    VulkanHandle:           handle,
    Image:                  Images[image_view_create_info.image],
    Type:                   image_view_create_info.viewType,
    Format:                 image_view_create_info.format,
    Components:             image_view_create_info.components,
    SubresourceRange:       image_view_create_info.subresourceRange
  )
  if pView == null { vkErrorNullPointer("VkImageView") }
  pView[0] = handle
  ImageViews[handle] = imageViewObject

  return ?
}

@threadSafety("system")
@indirect("VkDevice")
cmd void vkDestroyImageView(
    VkDevice            device,
    VkImageView         imageView,
    AllocationCallbacks pAllocator) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  delete(ImageViews, imageView)
  for _ , _ , drawInfo in LastDrawInfos {
    if (drawInfo.Framebuffer != null) {
      for _ , i , v in drawInfo.Framebuffer.ImageAttachments {
        if (v != null) && (v.VulkanHandle == imageView) {
          drawInfo.Framebuffer.ImageAttachments[i] = null
        }
      }
    }
  }
  for _ , _ , descSet in DescriptorSets {
    for _ , _ , binding in descSet.Bindings {
      for _ , _ , imgBinding in binding.ImageBinding {
        if imgBinding.ImageView == imageView {
          imgBinding.ImageView = as!VkImageView(0)
        }
      }
    }
  }
}

/////////////
// Sampler //
/////////////

@internal class SamplerObject {
  @unused VkDevice                  Device
  @unused VkSampler                 VulkanHandle
  @unused VkFilter                  MagFilter
  @unused VkFilter                  MinFilter
  @unused VkSamplerMipmapMode       MipMapMode
  @unused VkSamplerAddressMode      AddressModeU
  @unused VkSamplerAddressMode      AddressModeV
  @unused VkSamplerAddressMode      AddressModeW
  @unused f32                       MipLodBias
  @unused VkBool32                  AnisotropyEnable
  @unused f32                       MaxAnisotropy
  @unused VkBool32                  CompareEnable
  @unused VkCompareOp               CompareOp
  @unused f32                       MinLod
  @unused f32                       MaxLod
  @unused VkBorderColor             BorderColor
  @unsued VkBool32                  UnnormalizedCoordinates
  @unused ref!VulkanDebugMarkerInfo DebugInfo
}

@threadSafety("system")
@indirect("VkDevice")
cmd VkResult vkCreateSampler(
    VkDevice                   device,
    const VkSamplerCreateInfo* pCreateInfo,
    AllocationCallbacks        pAllocator,
    VkSampler*                 pSampler) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if pCreateInfo == null { vkErrorNullPointer("VkSamplerCreateInfo") }
  create_info := pCreateInfo[0]
  sampler := new!SamplerObject(
    Device:                   device,
    MagFilter:                create_info.magFilter,
    MinFilter:                create_info.minFilter,
    MipMapMode:               create_info.mipmapMode,
    AddressModeU:             create_info.addressModeU,
    AddressModeV:             create_info.addressModeV,
    AddressModeW:             create_info.addressModeW,
    MipLodBias:               create_info.mipLodBias,
    AnisotropyEnable:         create_info.anisotropyEnable,
    MaxAnisotropy:            create_info.maxAnisotropy,
    CompareEnable:            create_info.compareEnable,
    CompareOp:                create_info.compareOp,
    MinLod:                   create_info.minLod,
    MaxLod:                   create_info.maxLod,
    BorderColor:              create_info.borderColor,
    UnnormalizedCoordinates:  create_info.unnormalizedCoordinates
  )
  handle := ?
  if pSampler == null { vkErrorNullPointer("VkSampler") }
  pSampler[0] = handle
  sampler.VulkanHandle = handle
  Samplers[handle] = sampler
  return ?
}

@threadSafety("system")
@indirect("VkDevice")
cmd void vkDestroySampler(
    VkDevice            device,
    VkSampler           sampler,
    AllocationCallbacks pAllocator) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  delete(Samplers, sampler)
}

sub void readImageSubresource(ref!ImageObject image, VkImageSubresourceRange rng, VkImageLayout layout) {
  layerCount := imageSubresourceLayerCount(image, rng)
  levelCount := imageSubresourceLevelCount(image, rng)
  for _ , _ , aspectBit in unpackImageAspectFlags(rng.aspectMask).Bits {
    aspect := image.Aspects[aspectBit]
    for layerIndex in (rng.baseArrayLayer .. rng.baseArrayLayer + layerCount) {
      layer := aspect.Layers[layerIndex]
      for mipLevel in (rng.baseMipLevel .. rng.baseMipLevel + levelCount) {
        level := layer.Levels[mipLevel]
        read(level.Data)
      }
    }
  }
}

sub void writeImageSubresource(ref!ImageObject image, VkImageSubresourceRange rng, VkImageLayout layout) {
  layerCount := imageSubresourceLayerCount(image, rng)
  levelCount := imageSubresourceLevelCount(image, rng)
  for _ , _ , aspectBit in unpackImageAspectFlags(rng.aspectMask).Bits {
    aspect := image.Aspects[aspectBit]
    for layerIndex in (rng.baseArrayLayer .. rng.baseArrayLayer + layerCount) {
      layer := aspect.Layers[layerIndex]
      for mipLevel in (rng.baseMipLevel .. rng.baseMipLevel + levelCount) {
        level := layer.Levels[mipLevel]
        write(level.Data)
      }
    }
  }
}

sub u32 imageSubresourceLayerCount(ref!ImageObject image, VkImageSubresourceRange rng) {
  VK_REMAINING_ARRAY_LAYERS := as!u32(0xFFFFFFFF)
  return switch (rng.layerCount == VK_REMAINING_ARRAY_LAYERS) {
    case true:
      image.Info.ArrayLayers - rng.baseArrayLayer
    case false:
      switch ((rng.layerCount + rng.baseArrayLayer) > image.Info.ArrayLayers) {
        case true:
          image.Info.ArrayLayers - rng.baseArrayLayer
        case false:
          rng.layerCount
      }
  }
}

sub u32 imageSubresourceLevelCount(ref!ImageObject image, VkImageSubresourceRange rng) {
  VK_REMAINING_MIP_LEVELS := as!u32(0xFFFFFFFF)
  return switch (rng.levelCount == VK_REMAINING_MIP_LEVELS) {
    case true:
      image.Info.MipLevels - rng.baseMipLevel
    case false:
      switch ((rng.levelCount + rng.baseMipLevel) > image.Info.MipLevels) {
        case true:
          image.Info.MipLevels - rng.baseMipLevel
        case false:
          rng.levelCount
      }
  }
}

sub void transitionImageLayout(ref!ImageObject img, VkImageSubresourceRange rng, VkImageLayout oldLayout, VkImageLayout newLayout) {
  layerCount := imageSubresourceLayerCount(img, rng)
  levelCount := imageSubresourceLevelCount(img, rng)
  for _ , _ , aspectBit in unpackImageAspectFlags(rng.aspectMask).Bits {
    if (aspectBit in img.Aspects) {
      for layer in (rng.baseArrayLayer .. rng.baseArrayLayer + layerCount) {
        if (layer in img.Aspects[aspectBit].Layers) {
          for level in (rng.baseMipLevel .. rng.baseMipLevel + levelCount) {
            if (level in img.Aspects[aspectBit].Layers[layer].Levels) {
              imgLevel := img.Aspects[aspectBit].Layers[layer].Levels[level]
              imgLevel.Layout = newLayout
            }
          }
        }
      }
    }
  }
}
