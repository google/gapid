// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

/////////////////////////
// Instance and Device //
/////////////////////////

@override
cmd VkResult vkEnumerateInstanceExtensionProperties(
    const char*            pLayerName,
    u32*                   pPropertyCount,
    VkExtensionProperties* pProperties) {

  _ = as!string(pLayerName)

  queryExtensionProperties(pPropertyCount, pProperties)

  return ?
}

@override
cmd VkResult vkEnumerateInstanceLayerProperties(
    u32*               pPropertyCount,
    VkLayerProperties* pProperties) {
  queryLayerProperties(pPropertyCount, pProperties)
  return ?
}

@indirect("VkPhysicalDevice", "VkInstance")
@override
cmd VkResult vkEnumerateDeviceExtensionProperties(
    VkPhysicalDevice       physicalDevice,
    const char*            pLayerName,
    u32*                   pPropertyCount,
    VkExtensionProperties* pProperties) {

  _ = as!string(pLayerName)

  // Do not check validness of physicalDevice as the loader may feed 0 to it.
  queryExtensionProperties(pPropertyCount, pProperties)

  return ?
}

@indirect("VkPhysicalDevice", "VkInstance")
@override
cmd VkResult vkEnumerateDeviceLayerProperties(
    VkPhysicalDevice   physicalDevice,
    u32*               pPropertyCount,
    VkLayerProperties* pProperties) {
  // Do not check validness of physicalDevice as the loader may feed 0 to it.
  queryLayerProperties(pPropertyCount, pProperties)
  return ?
}

sub void queryExtensionProperties(u32* pPropertyCount, VkExtensionProperties* pProperties) {
  if pPropertyCount == null { vkErrorNullPointer("uint32_t") }
  _ = pPropertyCount[0]

  if pProperties == null {
    pPropertyCount[0] = ?
  } else {
    count := as!u32(?)
    properties := pProperties[0:count]
    for i in (0 .. count) {
      properties[i] = ?
    }
    pPropertyCount[0] = count
  }
}

sub void queryLayerProperties(u32* pPropertyCount, VkLayerProperties* pProperties) {
  if pPropertyCount == null { vkErrorNullPointer("uint32_t") }
  _ = pPropertyCount[0]

  if pProperties == null {
    pPropertyCount[0] = ?
  } else {
    count := as!u32(?)
    properties := pProperties[0:count]
    for i in (0 .. count) {
      properties[i] = ?
    }
    pPropertyCount[0] = count
  }
}

/////////////////////
// Physical Device //
/////////////////////

@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceFeatures(
    VkPhysicalDevice          physicalDevice,
    VkPhysicalDeviceFeatures* pFeatures) {
  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  if pFeatures == null { vkErrorNullPointer("VkPhysicalDeviceFeatures") }
  pFeatures[0] = ?
}

@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceFormatProperties(
    VkPhysicalDevice    physicalDevice,
    VkFormat            format,
    VkFormatProperties* pFormatProperties) {
  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  if pFormatProperties == null { vkErrorNullPointer("VkFormatProperties") }
  pFormatProperties[0] = ?
}

@indirect("VkPhysicalDevice", "VkInstance")
cmd VkResult vkGetPhysicalDeviceImageFormatProperties(
    VkPhysicalDevice         physicalDevice,
    VkFormat                 format,
    VkImageType              type,
    VkImageTiling            tiling,
    VkImageUsageFlags        usage,
    VkImageCreateFlags       flags,
    VkImageFormatProperties* pImageFormatProperties) {
  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  if pImageFormatProperties == null { vkErrorNullPointer("VkImageFormatProperties") }
  pImageFormatProperties[0] = ?
  return ?
}

@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceProperties(
    VkPhysicalDevice            physicalDevice,
    VkPhysicalDeviceProperties* pProperties) {
  if pProperties == null { vkErrorNullPointer("VkPhysicalDeviceProperties") }
  pProperties[0] = ?
  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  PhysicalDevices[physicalDevice].PhysicalDeviceProperties = pProperties[0]
}

@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceQueueFamilyProperties(
    VkPhysicalDevice         physicalDevice,
    u32*                     pQueueFamilyPropertyCount,
    VkQueueFamilyProperties* pQueueFamilyProperties) {
  if pQueueFamilyPropertyCount == null { vkErrorNullPointer("uint32_t") }
  _ = pQueueFamilyPropertyCount[0]

  fence

  if pQueueFamilyProperties == null {
    pQueueFamilyPropertyCount[0] = ?
  } else {
    count := as!u32(?)
    properties := pQueueFamilyProperties[0:count]
    for i in (0 .. count) {
      properties[i] = ?
    }
    pQueueFamilyPropertyCount[0] = count
    if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
    for i in (0 .. count) {
      PhysicalDevices[physicalDevice].QueueFamilyProperties[i] = properties[i]
    }
  }
}

@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceMemoryProperties(
    VkPhysicalDevice                  physicalDevice,
    VkPhysicalDeviceMemoryProperties* pMemoryProperties) {
  memoryProperties := ?
  if pMemoryProperties == null { vkErrorNullPointer("VkPhysicalDeviceMemoryProperties") }
  pMemoryProperties[0] = memoryProperties

  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  dev := PhysicalDevices[physicalDevice]
  dev.MemoryProperties = memoryProperties
  PhysicalDevices[physicalDevice] = dev
}

@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceSparseImageFormatProperties(
    VkPhysicalDevice               physicalDevice,
    VkFormat                       format,
    VkImageType                    type,
    VkSampleCountFlagBits          samples,
    VkImageUsageFlags              usage,
    VkImageTiling                  tiling,
    u32*                           pPropertyCount,
    VkSparseImageFormatProperties* pProperties) {
  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  if pPropertyCount == null { vkErrorNullPointer("uint32_t") }
  _ = pPropertyCount[0]

  if pProperties == null {
    pPropertyCount[0] = ?
  } else {
    count := as!u32(?)
    properties := pProperties[0:count]
    for i in (0 .. count) {
      properties[i] = ?
    }
    pPropertyCount[0] = count
  }
}

////////////
// Buffer //
////////////

@indirect("VkDevice")
cmd void vkGetBufferMemoryRequirements(
    VkDevice              device,
    VkBuffer              buffer,
    VkMemoryRequirements* pMemoryRequirements) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if !(buffer in Buffers) { vkErrorInvalidBuffer(buffer) }
  requirements := ?
  if pMemoryRequirements == null { vkErrorNullPointer("VkMemoryRequirements") }
  pMemoryRequirements[0] = requirements
  Buffers[buffer].MemoryRequirements = requirements
  if (as!u32(Buffers[buffer].Info.Usage) & as!u32(VK_BUFFER_USAGE_TRANSFER_SRC_BIT)) != 0 {
    if !(device in TransferBufferMemoryRequirements) {
      TransferBufferMemoryRequirements[device] = VkMemoryRequirements()
    }
    reqs := TransferBufferMemoryRequirements[device]
    reqs.memoryTypeBits =
    reqs.memoryTypeBits | Buffers[buffer].MemoryRequirements.memoryTypeBits
    TransferBufferMemoryRequirements[device] = reqs
  }
}

///////////
// Image //
///////////

@indirect("VkDevice")
cmd void vkGetImageMemoryRequirements(
    VkDevice              device,
    VkImage               image,
    VkMemoryRequirements* pMemoryRequirements) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if !(image in Images) { vkErrorInvalidImage(image) }
  requirements := ?
  if pMemoryRequirements == null { vkErrorNullPointer("VkMemoryRequirements") }
  pMemoryRequirements[0] = requirements
  Images[image].MemoryRequirements = requirements
}

@indirect("VkDevice")
cmd void vkGetImageSparseMemoryRequirements(
    VkDevice                         device,
    VkImage                          image,
    u32*                             pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements* pSparseMemoryRequirements) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if !(image in Images) { vkErrorInvalidImage(image) }
  if pSparseMemoryRequirementCount == null { vkErrorNullPointer("uint32_t") }
  read(pSparseMemoryRequirementCount[0:1])

  fence

  if pSparseMemoryRequirements == null {
    pSparseMemoryRequirementCount[0] = ?
  } else {
    count := as!u32(?)
    requirements := pSparseMemoryRequirements[0:count]
    for i in (0 .. count) {
      requirements[i] = ?
      aspect := requirements[i].formatProperties.aspectMask
      Images[image].SparseMemoryRequirements[as!u32(aspect)] = requirements[i]
    }
    pSparseMemoryRequirementCount[0] = count
  }
}

// ----------------------------------------------------------------------------
// Vulkan 1.1 Commands
// ----------------------------------------------------------------------------

//////////////
// Instance //
//////////////

@threadSafety("system")
cmd VkResult vkEnumerateInstanceVersion(
    u32* pApiVersion) {
  pApiVersion[0] = ?
  return ?
}

/////////////////////
// Physical Device //
/////////////////////

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceFeatures2(
    VkPhysicalDevice           physicalDevice,
    VkPhysicalDeviceFeatures2* pFeatures) {
  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  if pFeatures == null { vkErrorNullPointer("VkPhysicalDeviceFeatures2") }
  pFeatures[0] = ?
  // TODO: handle pNext
}

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceFormatProperties2(
    VkPhysicalDevice     physicalDevice,
    VkFormat             format,
    VkFormatProperties2* pFormatProperties) {
  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  if pFormatProperties == null { vkErrorNullPointer("VkFormatProperties2") }
  pFormatProperties[0] = ?
  // TODO: handle pNext
}

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
cmd VkResult vkGetPhysicalDeviceImageFormatProperties2(
    VkPhysicalDevice                        physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
    VkImageFormatProperties2*               pImageFormatProperties) {
  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  if pImageFormatInfo == null { vkErrorNullPointer("const VkPhysicalDeviceImageFormatInfo2") }
  if pImageFormatProperties == null { vkErrorNullPointer("VkImageFormatProperties2") }
  pImageFormatProperties[0] = ?
  // TODO: handle pNext
  return ?
}

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceProperties2(
    VkPhysicalDevice             physicalDevice,
    VkPhysicalDeviceProperties2* pProperties) {
  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  if pProperties == null { vkErrorNullPointer("VkPhysicalDeviceProperties2") }
  pProperties[0] = ?
  // TODO: handle pNext
  PhysicalDevices[physicalDevice].PhysicalDeviceProperties = pProperties[0].properties
}
