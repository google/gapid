// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

/////////////////////////
// Instance and Device //
/////////////////////////

@override
cmd VkResult vkEnumerateInstanceExtensionProperties(
    const char*            pLayerName,
    u32*                   pPropertyCount,
    VkExtensionProperties* pProperties) {

  _ = as!string(pLayerName)

  queryExtensionProperties(pPropertyCount, pProperties)

  return ?
}

@override
cmd VkResult vkEnumerateInstanceLayerProperties(
    u32*               pPropertyCount,
    VkLayerProperties* pProperties) {
  queryLayerProperties(pPropertyCount, pProperties)
  return ?
}

@indirect("VkPhysicalDevice", "VkInstance")
@override
cmd VkResult vkEnumerateDeviceExtensionProperties(
    VkPhysicalDevice       physicalDevice,
    const char*            pLayerName,
    u32*                   pPropertyCount,
    VkExtensionProperties* pProperties) {

  _ = as!string(pLayerName)

  // Do not check validness of physicalDevice as the loader may feed 0 to it.
  queryExtensionProperties(pPropertyCount, pProperties)

  return ?
}

@indirect("VkPhysicalDevice", "VkInstance")
@override
cmd VkResult vkEnumerateDeviceLayerProperties(
    VkPhysicalDevice   physicalDevice,
    u32*               pPropertyCount,
    VkLayerProperties* pProperties) {
  // Do not check validness of physicalDevice as the loader may feed 0 to it.
  queryLayerProperties(pPropertyCount, pProperties)
  return ?
}

sub void queryExtensionProperties(u32* pPropertyCount, VkExtensionProperties* pProperties) {
  if pPropertyCount == null { vkErrorNullPointer("uint32_t") }
  _ = pPropertyCount[0]

  if pProperties == null {
    pPropertyCount[0] = ?
  } else {
    count := as!u32(?)
    properties := pProperties[0:count]
    for i in (0 .. count) {
      properties[i] = ?
    }
    pPropertyCount[0] = count
  }
}

sub void queryLayerProperties(u32* pPropertyCount, VkLayerProperties* pProperties) {
  if pPropertyCount == null { vkErrorNullPointer("uint32_t") }
  _ = pPropertyCount[0]

  if pProperties == null {
    pPropertyCount[0] = ?
  } else {
    count := as!u32(?)
    properties := pProperties[0:count]
    for i in (0 .. count) {
      properties[i] = ?
    }
    pPropertyCount[0] = count
  }
}

/////////////////////
// Physical Device //
/////////////////////

@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceFeatures(
    VkPhysicalDevice          physicalDevice,
    VkPhysicalDeviceFeatures* pFeatures) {
  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  if pFeatures == null { vkErrorNullPointer("VkPhysicalDeviceFeatures") }
  pFeatures[0] = ?
}

@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceFormatProperties(
    VkPhysicalDevice    physicalDevice,
    VkFormat            format,
    VkFormatProperties* pFormatProperties) {
  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  if pFormatProperties == null { vkErrorNullPointer("VkFormatProperties") }
  pFormatProperties[0] = ?
}

@indirect("VkPhysicalDevice", "VkInstance")
cmd VkResult vkGetPhysicalDeviceImageFormatProperties(
    VkPhysicalDevice         physicalDevice,
    VkFormat                 format,
    VkImageType              type,
    VkImageTiling            tiling,
    VkImageUsageFlags        usage,
    VkImageCreateFlags       flags,
    VkImageFormatProperties* pImageFormatProperties) {
  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  if pImageFormatProperties == null { vkErrorNullPointer("VkImageFormatProperties") }
  pImageFormatProperties[0] = ?
  return ?
}

@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceProperties(
    VkPhysicalDevice            physicalDevice,
    VkPhysicalDeviceProperties* pProperties) {
  if pProperties == null { vkErrorNullPointer("VkPhysicalDeviceProperties") }
  pProperties[0] = ?
  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  PhysicalDevices[physicalDevice].PhysicalDeviceProperties = pProperties[0]
}

@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceQueueFamilyProperties(
    VkPhysicalDevice         physicalDevice,
    u32*                     pQueueFamilyPropertyCount,
    VkQueueFamilyProperties* pQueueFamilyProperties) {
  if pQueueFamilyPropertyCount == null { vkErrorNullPointer("uint32_t") }
  _ = pQueueFamilyPropertyCount[0]

  fence

  if pQueueFamilyProperties == null {
    pQueueFamilyPropertyCount[0] = ?
  } else {
    count := as!u32(?)
    properties := pQueueFamilyProperties[0:count]
    for i in (0 .. count) {
      properties[i] = ?
    }
    pQueueFamilyPropertyCount[0] = count
    if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
    for i in (0 .. count) {
      PhysicalDevices[physicalDevice].QueueFamilyProperties[i] = properties[i]
    }
  }
}

@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceMemoryProperties(
    VkPhysicalDevice                  physicalDevice,
    VkPhysicalDeviceMemoryProperties* pMemoryProperties) {
  memoryProperties := ?
  if pMemoryProperties == null { vkErrorNullPointer("VkPhysicalDeviceMemoryProperties") }
  pMemoryProperties[0] = memoryProperties

  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  dev := PhysicalDevices[physicalDevice]
  dev.MemoryProperties = memoryProperties
}

@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceSparseImageFormatProperties(
    VkPhysicalDevice               physicalDevice,
    VkFormat                       format,
    VkImageType                    type,
    VkSampleCountFlagBits          samples,
    VkImageUsageFlags              usage,
    VkImageTiling                  tiling,
    u32*                           pPropertyCount,
    VkSparseImageFormatProperties* pProperties) {
  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  if pPropertyCount == null { vkErrorNullPointer("uint32_t") }
  _ = pPropertyCount[0]

  if pProperties == null {
    pPropertyCount[0] = ?
  } else {
    count := as!u32(?)
    properties := pProperties[0:count]
    for i in (0 .. count) {
      properties[i] = ?
    }
    pPropertyCount[0] = count
  }
}

////////////
// Buffer //
////////////

@indirect("VkDevice")
cmd void vkGetBufferMemoryRequirements(
    VkDevice              device,
    VkBuffer              buffer,
    VkMemoryRequirements* pMemoryRequirements) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if !(buffer in Buffers) { vkErrorInvalidBuffer(buffer) }
  requirements := ?
  if pMemoryRequirements == null { vkErrorNullPointer("VkMemoryRequirements") }
  pMemoryRequirements[0] = requirements
  Buffers[buffer].MemoryRequirements = requirements
  if (as!u32(Buffers[buffer].Info.Usage) & as!u32(VK_BUFFER_USAGE_TRANSFER_SRC_BIT)) != 0 {
    if !(device in TransferBufferMemoryRequirements) {
      TransferBufferMemoryRequirements[device] = VkMemoryRequirements()
    }
    reqs := TransferBufferMemoryRequirements[device]
    reqs.memoryTypeBits =
    reqs.memoryTypeBits | Buffers[buffer].MemoryRequirements.memoryTypeBits
    TransferBufferMemoryRequirements[device] = reqs
  }
}

///////////
// Image //
///////////

@indirect("VkDevice")
cmd void vkGetImageMemoryRequirements(
    VkDevice              device,
    VkImage               image,
    VkMemoryRequirements* pMemoryRequirements) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if !(image in Images) { vkErrorInvalidImage(image) } else {
    requirements := ?
    if pMemoryRequirements == null { vkErrorNullPointer("VkMemoryRequirements") }
    pMemoryRequirements[0] = requirements
    // This command can be only used for single-planar images
    plane := as!VkImageAspectFlagBits(0)
    if !(plane in Images[image].PlaneMemoryInfo) {
      Images[image].PlaneMemoryInfo[plane] = new!ImagePlaneMemoryInfo()
    }
    Images[image].PlaneMemoryInfo[plane].MemoryRequirements = requirements
  }
}

@indirect("VkDevice")
cmd void vkGetImageSparseMemoryRequirements(
    VkDevice                         device,
    VkImage                          image,
    u32*                             pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements* pSparseMemoryRequirements) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if !(image in Images) { vkErrorInvalidImage(image) }
  if pSparseMemoryRequirementCount == null { vkErrorNullPointer("uint32_t") }
  read(pSparseMemoryRequirementCount[0:1])

  fence

  if pSparseMemoryRequirements == null {
    pSparseMemoryRequirementCount[0] = ?
  } else {
    count := as!u32(?)
    requirements := pSparseMemoryRequirements[0:count]
    for i in (0 .. count) {
      requirements[i] = ?
      aspect := requirements[i].formatProperties.aspectMask
      Images[image].SparseMemoryRequirements[as!VkImageAspectFlagBits(aspect)] = requirements[i]
    }
    pSparseMemoryRequirementCount[0] = count
  }
}

// ----------------------------------------------------------------------------
// Vulkan 1.1 Commands
// ----------------------------------------------------------------------------

//////////////
// Instance //
//////////////

@threadSafety("system")
cmd VkResult vkEnumerateInstanceVersion(
    u32* pApiVersion) {
  pApiVersion[0] = ?
  return ?
}

/////////////////////
// Physical Device //
/////////////////////

sub void GetPhysicalDeviceFeatures2(
    VkPhysicalDevice           physicalDevice,
    VkPhysicalDeviceFeatures2* pFeatures) {
  if !(physicalDevice in PhysicalDevices) {
    vkErrorInvalidPhysicalDevice(physicalDevice)
  } else {
    if pFeatures == null {
      vkErrorNullPointer("VkPhysicalDeviceFeatures2(KHR)")
    }
  }
  features := pFeatures[0]
  if (physicalDevice in PhysicalDevices) {
    // TODO: handle pNext
    if features.pNext != null {
      numPNext := numberOfPNext(
        as!const void*(features.pNext))
      next := MutableVoidPtr(as!void*(features.pNext))
      for i in (0 .. numPNext) {
        sType := as!const VkStructureType*(next.Ptr)[0:1][0]
        switch sType {
          case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES: {
            _ = as!VkPhysicalDeviceVariablePointerFeatures*(next.Ptr)[0]
          }
          case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES: {
            _ = as!VkPhysicalDevice16BitStorageFeatures*(next.Ptr)[0]
          }
          case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES: {
            _ = as!VkPhysicalDeviceSamplerYcbcrConversionFeatures*(next.Ptr)[0]
          }
        }
        next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
      }
    }
  }
  fence
  if (physicalDevice in PhysicalDevices) {
    pFeatures[0] = ?
    newFeatures := pFeatures[0]
    // TODO: handle pNext
    if newFeatures.pNext != null {
      numPNext := numberOfPNext(
        as!const void*(newFeatures.pNext))
      next := MutableVoidPtr(as!void*(newFeatures.pNext))
      for i in (0 .. numPNext) {
        sType := as!const VkStructureType*(next.Ptr)[0:1][0]
        switch sType {
          case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES: {
            write(as!VkPhysicalDeviceVariablePointerFeatures*(next.Ptr)[0:1])
          }
          case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES: {
            write(as!VkPhysicalDevice16BitStorageFeatures*(next.Ptr)[0:1])
          }
          case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES: {
            write(as!VkPhysicalDeviceSamplerYcbcrConversionFeatures*(next.Ptr)[0:1])
          }
        }
        next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
      }
    }
  }
}

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceFeatures2(
    VkPhysicalDevice           physicalDevice,
    VkPhysicalDeviceFeatures2* pFeatures) {
  GetPhysicalDeviceFeatures2(physicalDevice, pFeatures)
}

sub void GetPhysicalDeviceFormatProperties2(
    VkPhysicalDevice     physicalDevice,
    VkFormat             format,
    VkFormatProperties2* pFormatProperties) {
  if !(physicalDevice in PhysicalDevices) {
    vkErrorInvalidPhysicalDevice(physicalDevice)
  } else {
    if pFormatProperties == null {
      vkErrorNullPointer("VkFormatProperties2(KHR)")
    } else {
      pFormatProperties[0] = ?
      // TODO: handle pNext
    }
  }
}

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceFormatProperties2(
    VkPhysicalDevice     physicalDevice,
    VkFormat             format,
    VkFormatProperties2* pFormatProperties) {
  GetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties)
}

sub void GetPhysicalDeviceImageFormatProperties2(
    VkPhysicalDevice                        physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
    VkImageFormatProperties2*               pImageFormatProperties) {
  if pImageFormatInfo == null {
    vkErrorNullPointer("const VkPhysicalDeviceImageFormatInfo2(KHR)")
  } else {
    info := pImageFormatInfo[0]
    // handle pNext in format info
    if info.pNext != null {
      numPNext := numberOfPNext(info.pNext)
      next := MutableVoidPtr(as!void*(info.pNext))
      for i in (0 .. numPNext) {
        sType := as!const VkStructureType*(next.Ptr)[0:1][0]
        switch sType {
          case VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR: {
            ext := as!VkImageFormatListCreateInfoKHR*(next.Ptr)[0]
            if (ext.viewFormatCount > 0) {
              _ = ext.pViewFormats[0:ext.viewFormatCount]
            }
          }
          default: {}
        }
        // TODO: handle extensions for VkPhysicalDeviceImageFormatInfo2
        next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
      }
    }
  }
  if pImageFormatProperties == null {
    vkErrorNullPointer("VkImageFormatProperties2(KHR)")
  }
  fence
  pImageFormatProperties[0] = ?
  props := pImageFormatProperties[0]
  // handle pNext in format properties
  if props.pNext != null {
    numPNext := numberOfPNext(as!const void*(props.pNext))
    next := MutableVoidPtr(props.pNext)
    for i in (0 .. numPNext) {
      sType := as!const VkStructureType*(next.Ptr)[0:1][0]
      switch sType {
        case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES: {
          _ = as!VkSamplerYcbcrConversionImageFormatProperties*(next.Ptr)[0]
        }
      }
    }
  }
}

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
cmd VkResult vkGetPhysicalDeviceImageFormatProperties2(
    VkPhysicalDevice                        physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
    VkImageFormatProperties2*               pImageFormatProperties) {
  GetPhysicalDeviceImageFormatProperties2(
    physicalDevice, pImageFormatInfo, pImageFormatProperties)
  return ?
}

sub void GetPhysicalDeviceProperties2(
    VkPhysicalDevice             physicalDevice,
    VkPhysicalDeviceProperties2* pProperties) {
  if pProperties == null {
    vkErrorNullPointer("VkPhysicalDeviceProperties2")
  } else {
    props := pProperties[0]
    if props.pNext != null {
      numPNext := numberOfPNext(as!const void*(props.pNext))
      next := MutableVoidPtr(as!void*(props.pNext))
      for i in (0 .. numPNext) {
        sType := as!const VkStructureType*(next.Ptr)[0:1][0]
        switch sType {
          case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES: {
            _ = as!VkPhysicalDevicePointClippingProperties*(next.Ptr)[0]
          }
          case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES: {
            _ = as!VkPhysicalDeviceMaintenance3Properties*(next.Ptr)[0]
          }
          case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES: {
            _ = as!VkPhysicalDeviceIDProperties*(next.Ptr)[0]
          }
        }
        next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
      }
    }
  }
  fence
  if pProperties != null {
    pProperties[0] = ?
    if !(physicalDevice in PhysicalDevices) {
      vkErrorInvalidPhysicalDevice(physicalDevice)
    } else {
      props := pProperties[0]
      phyDev := PhysicalDevices[physicalDevice]
      phyDev.PhysicalDeviceProperties = props.properties
      // TODO: handle pNext
      if props.pNext != null {
        numPNext := numberOfPNext(as!const void*(props.pNext))
        next := MutableVoidPtr(as!void*(props.pNext))
        for i in (0 .. numPNext) {
          sType := as!const VkStructureType*(next.Ptr)[0:1][0]
          switch sType {
            case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES: {
              ext := as!VkPhysicalDevicePointClippingProperties*(next.Ptr)[0]
              phyDev.PointClippingProperties = new!PointClippingProperties(
                PointClippingBehavior: ext.pointClippingBehavior
              )
            }
            case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES: {
              ext := as!VkPhysicalDeviceMaintenance3Properties*(next.Ptr)[0]
              phyDev.Maintenance3Properties = new!Maintenance3Properties(
                MaxPerSetDescriptors: ext.maxPerSetDescriptors,
                MaxMemoryAllocationSize: ext.maxMemoryAllocationSize,
              )
            }
            case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES: {
            }
          }
          next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
        }
      }
    }
  }
}

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceProperties2(
    VkPhysicalDevice             physicalDevice,
    VkPhysicalDeviceProperties2* pProperties) {
  GetPhysicalDeviceProperties2(physicalDevice, pProperties)
}

sub void GetPhysicalDeviceMemoryProperties2(
    VkPhysicalDevice                   physicalDevice,
    VkPhysicalDeviceMemoryProperties2* pMemoryProperties) {
  if pMemoryProperties == null {
    vkErrorNullPointer("VkPhysicalDeviceMemoryProperties2(KHR)")
  }
  fence
  pMemoryProperties[0] = ?
  memoryProperties := pMemoryProperties[0]

  if !(physicalDevice in PhysicalDevices) {
    vkErrorInvalidPhysicalDevice(physicalDevice)
  } else {
    PhysicalDevices[physicalDevice].MemoryProperties = memoryProperties.memoryProperties
    // handle pNext
  }
}

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceMemoryProperties2(
    VkPhysicalDevice                   physicalDevice,
    VkPhysicalDeviceMemoryProperties2* pMemoryProperties) {
  GetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties)
}

sub void GetPhysicalDeviceSparseImageFormatProperties2(
    VkPhysicalDevice                              physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
    u32*                                          pPropertyCount,
    VkSparseImageFormatProperties2*               pProperties) {
  if !(physicalDevice in PhysicalDevices) {
    vkErrorInvalidPhysicalDevice(physicalDevice)
  }
  if pPropertyCount == null { vkErrorNullPointer("uint32_t") }
  info := pFormatInfo[0]
  // handle pNext in pFormatInfo
  if info.pNext != null {
    numPNext := numberOfPNext(info.pNext)
    next := MutableVoidPtr(as!void*(info.pNext))
    for i in (0 .. numPNext) {
      sType := as!const VkStructureType*(next.Ptr)[0:1][0]
      _ = sType
      // TODO: handle extensions for VkPhysicalDeviceSparseImageFormatInfo2KHR
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
    }
  }

  _ = pPropertyCount[0]

  if pProperties == null {
    pPropertyCount[0] = ?
  } else {
    count := as!u32(?)
    properties := pProperties[0:count]
    for i in (0 .. count) {
      properties[i] = ?
      // TODO: handle pNext in pProperties
    }
    pPropertyCount[0] = count
  }
}

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceSparseImageFormatProperties2(
    VkPhysicalDevice                              physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
    u32*                                          pPropertyCount,
    VkSparseImageFormatProperties2*               pProperties) {
  GetPhysicalDeviceSparseImageFormatProperties2(
    physicalDevice, pFormatInfo, pPropertyCount, pProperties)
}

sub void GetPhysicalDeviceQueueFamilyProperties2(
    VkPhysicalDevice          physicalDevice,
    u32*                      pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2* pQueueFamilyProperties) {
  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  if pQueueFamilyPropertyCount == null { vkErrorNullPointer("uint32_t") }
  _ = pQueueFamilyPropertyCount[0]

  fence

  if pQueueFamilyProperties == null {
    pQueueFamilyPropertyCount[0] = ?
  } else {
    count := as!u32(?)
    properties := pQueueFamilyProperties[0:count]
    for i in (0 .. count) {
      properties[i] = ?
      // TODO: handle pNext
    }
    pQueueFamilyPropertyCount[0] = count
    if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
    for i in (0 .. count) {
      PhysicalDevices[physicalDevice].QueueFamilyProperties[i] = properties[i].queueFamilyProperties
    }
  }
}

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceQueueFamilyProperties2(
    VkPhysicalDevice          physicalDevice,
    u32*                      pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2* pQueueFamilyProperties) {
  GetPhysicalDeviceQueueFamilyProperties2(
    physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties)
}

sub void GetPhysicalDeviceExternalBufferProperties(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo*   pExternalBufferInfo,
    VkExternalBufferProperties*                 pExternalBufferProperties) {
  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  if pExternalBufferInfo == null {
    vkErrorNullPointer("const VkPhysicalDeviceExternalBufferInfo")
  } else {
    info := pExternalBufferInfo[0]
    // handle pNext in pExternalBufferInfo
    if info.pNext != null {
      numPNext := numberOfPNext(info.pNext)
      next := MutableVoidPtr(as!void*(info.pNext))
      for i in (0 .. numPNext) {
        sType := as!const VkStructureType*(next.Ptr)[0:1][0]
        _ = sType
        // handle future extensions VkPhysicalDeviceExternalBufferInfo
        next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
      }
    }
  }

  fence

  if pExternalBufferProperties == null { vkErrorNullPointer("VkExternalBufferProperties") }
  pExternalBufferProperties[0] = ?
  props := pExternalBufferProperties[0]
  // handle pNext in pExternalBufferProperties
  if props.pNext != null {
    numPNext := numberOfPNext(as!const void*(props.pNext))
    next := MutableVoidPtr(props.pNext)
    for i in (0 .. numPNext) {
      sType := as!const VkStructureType*(next.Ptr)[0:1][0]
      _ = sType
      // handle future extensions for VkExternalBufferProperties
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
    }
  }
}

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceExternalBufferProperties(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo*   pExternalBufferInfo,
    VkExternalBufferProperties*                 pExternalBufferProperties) {
  GetPhysicalDeviceExternalBufferProperties(
    physicalDevice, pExternalBufferInfo, pExternalBufferProperties)
}

sub void GetPhysicalDeviceExternalSemaphoreProperties(
      VkPhysicalDevice                              physicalDevice,
      const VkPhysicalDeviceExternalSemaphoreInfo*  pExternalSemaphoreInfo,
      VkExternalSemaphoreProperties*                pExternalSemaphoreProperties) {
  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  if pExternalSemaphoreInfo == null {
    vkErrorNullPointer("const VkPhysicalDeviceExternalSemaphoreInfo")
  } else {
    info := pExternalSemaphoreInfo[0]
    // handle pNext in pExternalSemaphoreInfo
    if info.pNext != null {
      numPNext := numberOfPNext(info.pNext)
      next := MutableVoidPtr(as!void*(info.pNext))
      for i in (0 .. numPNext) {
        sType := as!const VkStructureType*(next.Ptr)[0:1][0]
        _ = sType
        // handle future extensions for VkPhysicalDeviceExternalSemaphoreInfo
        next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
      }
    }
  }

  fence

  if pExternalSemaphoreProperties == null { vkErrorNullPointer("VkExternalBufferProperties") }
  pExternalSemaphoreProperties[0] = ?
  props := pExternalSemaphoreProperties[0]
  // handle pNext in pExternalSemaphoreProperties
  if props.pNext != null {
    numPNext := numberOfPNext(as!const void*(props.pNext))
    next := MutableVoidPtr(props.pNext)
    for i in (0 .. numPNext) {
      sType := as!const VkStructureType*(next.Ptr)[0:1][0]
      _ = sType
      // handle future extensions for VkExternalSemaphoreProperties
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
    }
  }
}

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceExternalSemaphoreProperties(
    VkPhysicalDevice                                physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo*    pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties*                  pExternalSemaphoreProperties) {
  GetPhysicalDeviceExternalSemaphoreProperties(
      physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties)
}

sub void GetPhysicalDeviceExternalFenceProperties(
      VkPhysicalDevice                          physicalDevice,
      const VkPhysicalDeviceExternalFenceInfo*  pExternalFenceInfo,
      VkExternalFenceProperties*                pExternalFenceProperties) {
  if !(physicalDevice in PhysicalDevices) { vkErrorInvalidPhysicalDevice(physicalDevice) }
  if pExternalFenceInfo == null {
    vkErrorNullPointer("const VkPhysicalDeviceExternalFenceInfo")
  } else {
    info := pExternalFenceInfo[0]
    // handle pNext in pExternalFenceInfo
    if info.pNext != null {
      numPNext := numberOfPNext(info.pNext)
      next := MutableVoidPtr(as!void*(info.pNext))
      for i in (0 .. numPNext) {
        sType := as!const VkStructureType*(next.Ptr)[0:1][0]
        _ = sType
        // handle future extensions for VkPhysicalDeviceExternalFenceInfo
        next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
      }
    }
  }

  fence

  if pExternalFenceProperties == null { vkErrorNullPointer("VkExternalBufferProperties") }
  pExternalFenceProperties[0] = ?
  props := pExternalFenceProperties[0]
  // handle pNext in pExternalFenceProperties
  if props.pNext != null {
    numPNext := numberOfPNext(as!const void*(props.pNext))
    next := MutableVoidPtr(props.pNext)
    for i in (0 .. numPNext) {
      sType := as!const VkStructureType*(next.Ptr)[0:1][0]
      _ = sType
      // handle future extensions for VkExternalFenceProperties
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
    }
  }
}

@threadSafety("system")
@indirect("VkPhysicalDevice", "VkInstance")
cmd void vkGetPhysicalDeviceExternalFenceProperties(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo*    pExternalFenceInfo,
    VkExternalFenceProperties*                  pExternalFenceProperties) {
  GetPhysicalDeviceExternalFenceProperties(
      physicalDevice, pExternalFenceInfo, pExternalFenceProperties)
}

////////////
// Buffer //
////////////

sub void GetBufferMemoryRequirements2(
    VkDevice                               device,
    const VkBufferMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2*                 pMemoryRequirements) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  info := pInfo[0]
  // TODO: handle pNext

  memReqs := pMemoryRequirements[0]
  if memReqs.pNext != null {
    nPNext := numberOfPNext(as!const void*(memReqs.pNext))
    next := MutableVoidPtr(as!void*(memReqs.pNext))
    for i in (0 .. nPNext) {
      _ = as!const VkStructureType*(next.Ptr)[0]
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0].PNext
    }
  }

  fence

  if pMemoryRequirements == null { vkErrorNullPointer("VkMemoryRequirements2(KHR)") }
  pMemoryRequirements[0] = ?
  // TODO: handle pNext for 'memReq'
  memReq := pMemoryRequirements[0]
  if !(info.buffer in Buffers) { vkErrorInvalidBuffer(info.buffer) }
  // TODO: Do the touch of the buffer object once we extract the memory
  // requirement info out of the buffer objectd.
  Buffers[info.buffer].MemoryRequirements = memReq.memoryRequirements

  if memReq.pNext != null {
    numPNext := numberOfPNext(as!const void*(memReq.pNext))
    next := MutableVoidPtr(as!void*(memReq.pNext))
    for i in (0 .. numPNext) {
      sType := as!const VkStructureType*(next.Ptr)[0]
      switch sType {
        case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS: {
          ext := as!VkMemoryDedicatedRequirements(?)
          Buffers[info.buffer].DedicatedRequirements = new!DedicatedRequirements(
            PrefersDedicatedAllocation:   ext.prefersDedicatedAllocation,
            RequiresDedicatedAllocation:  ext.requiresDedicatedAllocation,
          )
          as!VkMemoryDedicatedRequirements*(next.Ptr)[0] = ext
        }
      }
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0].PNext
    }
  }
}

@threadSafety("system")
@indirect("VkDevice")
cmd void vkGetBufferMemoryRequirements2(
    VkDevice                               device,
    const VkBufferMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2*                 pMemoryRequirements) {
  GetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements)
}

///////////
// Image //
///////////

sub void GetImageMemoryRequirements2(
    VkDevice                              device,
    const VkImageMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2*                pMemoryRequirements) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  plane := MutableU32(0)
  info := pInfo[0]
  memReqs := pMemoryRequirements[0]
  if memReqs.pNext != null {
    nPNext := numberOfPNext(as!const void*(memReqs.pNext))
    next := MutableVoidPtr(as!void*(memReqs.pNext))
    for i in (0 .. nPNext) {
      sType := as!const VkStructureType*(next.Ptr)[0]
      switch sType {
        case VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO: {
          ext := as!VkImagePlaneMemoryRequirementsInfo*(next.Ptr)[0]
          plane.Val = as!u32(ext.planeAspect)
        }
      }
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0].PNext
    }
  }

  // TODO: handle pNext for 'info'
  fence

  if pMemoryRequirements == null { vkErrorNullPointer("VkMemoryRequirements2(KHR)") }
  pMemoryRequirements[0] = ?
  memReq := pMemoryRequirements[0]

  if !(info.image in Images) { vkErrorInvalidImage(info.image) }
  // TODO: Drop the touch of the image object once we extract the memory
  // requirement info out of the image object.
  // TODO: Handle multi-planar images
  if !(as!VkImageAspectFlagBits(plane.Val) in Images[info.image].PlaneMemoryInfo) {
    Images[info.image].PlaneMemoryInfo[as!VkImageAspectFlagBits(plane.Val)] = new!ImagePlaneMemoryInfo()
  }
  Images[info.image].PlaneMemoryInfo[as!VkImageAspectFlagBits(plane.Val)].MemoryRequirements = memReq.memoryRequirements

  if memReq.pNext != null {
    numPNext := numberOfPNext(as!const void*(memReq.pNext))
    next := MutableVoidPtr(as!void*(memReq.pNext))
    for i in (0 .. numPNext) {
      sType := as!const VkStructureType*(next.Ptr)[0]
      switch sType {
        case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS: {
          ext := as!VkMemoryDedicatedRequirements(?)
          Images[info.image].DedicatedRequirements = new!DedicatedRequirements(
            PrefersDedicatedAllocation:   ext.prefersDedicatedAllocation,
            RequiresDedicatedAllocation:  ext.requiresDedicatedAllocation,
          )
          as!VkMemoryDedicatedRequirements*(next.Ptr)[0] = ext
        }
      }
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0].PNext
    }
  }
}

@threadSafety("system")
@indirect("VkDevice")
cmd void vkGetImageMemoryRequirements2(
    VkDevice                              device,
    const VkImageMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2*                pMemoryRequirements) {
  GetImageMemoryRequirements2(device, pInfo, pMemoryRequirements)
}

sub void GetImageSparseMemoryRequirements2(
    VkDevice                                    device,
    const VkImageSparseMemoryRequirementsInfo2* pInfo,
    u32*                                        pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2*           pSparseMemoryRequirements) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  info := pInfo[0]
  image := info.image
  if !(image in Images) { vkErrorInvalidImage(image) }
  // handle pNext
  if info.pNext != null {
    numPNext := numberOfPNext(info.pNext)
    next := MutableVoidPtr(as!void*(info.pNext))
    for i in (0 .. numPNext) {
      sType := as!const VkStructureType*(next.Ptr)[0:1][0]
      _ = sType
      // TODO: handle extensions for VkImageSparseMemoryRequirementsInfo2
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
    }
  }
  if pSparseMemoryRequirementCount == null { vkErrorNullPointer("uint32_t") }
  read(pSparseMemoryRequirementCount[0:1])

  fence

  if pSparseMemoryRequirements == null {
    pSparseMemoryRequirementCount[0] = ?
  } else {
    count := as!u32(?)
    requirements := pSparseMemoryRequirements[0:count]
    for i in (0 .. count) {
      requirements[i] = ?
      // TODO: handle pNext for 'requirements[i]'
      aspect := requirements[i].memoryRequirements.formatProperties.aspectMask
      // TODO: Drop the touch of the image object.
      Images[image].SparseMemoryRequirements[as!VkImageAspectFlagBits(aspect)] = requirements[i].memoryRequirements
    }
    pSparseMemoryRequirementCount[0] = count
  }
}

@threadSafety("system")
@indirect("VkDevice")
cmd void vkGetImageSparseMemoryRequirements2(
    VkDevice                                    device,
    const VkImageSparseMemoryRequirementsInfo2* pInfo,
    u32*                                        pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2*           pSparseMemoryRequirements) {
  GetImageSparseMemoryRequirements2(
    device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements)
}

////////////////////
// State tracking //
////////////////////

@internal class DedicatedRequirements {
  VkBool32 PrefersDedicatedAllocation
  VkBool32 RequiresDedicatedAllocation
}
