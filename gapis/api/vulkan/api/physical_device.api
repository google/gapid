// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

@internal class PhysicalDeviceObject {
  @unused VkInstance               Instance
  @unused u32                      Index
  VkPhysicalDeviceMemoryProperties MemoryProperties
  @unused VkPhysicalDevice         VulkanHandle
  // A map of queue family indices to queue properties.
  @unused map!(u32, VkQueueFamilyProperties) QueueFamilyProperties
  @unused ref!VulkanDebugMarkerInfo          DebugInfo
  @unused VkPhysicalDeviceProperties         PhysicalDeviceProperties
}

@internal class PhysicalDevicesAndProperties{
  map!(VkPhysicalDevice, VkPhysicalDeviceProperties) PhyDevToProperties
}

@threadSafety("system")
@indirect("VkInstance")
cmd VkResult vkEnumeratePhysicalDevices(
    VkInstance        instance,
    u32*              pPhysicalDeviceCount,
    VkPhysicalDevice* pPhysicalDevices) {
  if !(instance in Instances) { vkErrorInvalidInstance(instance) }
  if pPhysicalDeviceCount == null { vkErrorNullPointer("uint32_t") }
  _ = pPhysicalDeviceCount[0]

  fence
  if pPhysicalDevices == null {
    pPhysicalDeviceCount[0] = ?
  } else {
    count := as!u32(?)
    devices := pPhysicalDevices[0:count]
    for i in (0 .. count) {
      device := ?
      devices[i] = device
    }
    pPhysicalDeviceCount[0] = count
    props := fetchPhysicalDeviceProperties(instance, devices)
    for i in (0 .. count) {
      if (PhysicalDevices[devices[i]] == null) {
        object := new!PhysicalDeviceObject()
        object.Instance = instance
        object.Index = i
        object.VulkanHandle = devices[i]
        if props != null {
          // TODO: Failed to prefetch physical device properties, report issue.
          object.PhysicalDeviceProperties = props.PhyDevToProperties[devices[i]]
        }
        PhysicalDevices[devices[i]] = object
      }
    }
  }

  return ?
}

