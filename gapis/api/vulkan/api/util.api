// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@internal class MutableVoidPtr {
  void* Ptr
}

type void* VoidPtr

// Declare the type so external function: numberOfPNext can use the type.
type const void** ConstVoidPtrPtr

// Returns the number of structs in the linked list pointed by the pNext pointer.
extern u32 numberOfPNext(const void* pNext)

@internal class MutableU32 {
  u32 Val
}

@interal class MutableVkDeviceSize {
  VkDeviceSize Val
}

@internal class MutableBool {
  bool b
}

@internal
class TexelBlockSizePair {
  u32 Width
  u32 Height
}

@internal
class ElementAndTexelBlockSize {
  u32                ElementSize
  TexelBlockSizePair TexelBlockSize
}

// This should roughly correspond to "Compatible formats" in the Vulkan spec
sub ElementAndTexelBlockSize getElementAndTexelBlockSize(VkFormat format) {
  return switch (format) {
    case VK_FORMAT_R4G4_UNORM_PACK8,
        VK_FORMAT_R8_UNORM,
        VK_FORMAT_R8_SNORM,
        VK_FORMAT_R8_USCALED,
        VK_FORMAT_R8_SSCALED,
        VK_FORMAT_R8_UINT,
        VK_FORMAT_R8_SINT,
        VK_FORMAT_R8_SRGB:
      ElementAndTexelBlockSize(1, TexelBlockSizePair(1, 1))
    case VK_FORMAT_R4G4B4A4_UNORM_PACK16,
        VK_FORMAT_B4G4R4A4_UNORM_PACK16,
        VK_FORMAT_R5G6B5_UNORM_PACK16,
        VK_FORMAT_B5G6R5_UNORM_PACK16,
        VK_FORMAT_R5G5B5A1_UNORM_PACK16,
        VK_FORMAT_B5G5R5A1_UNORM_PACK16,
        VK_FORMAT_A1R5G5B5_UNORM_PACK16,
        VK_FORMAT_R8G8_UNORM,
        VK_FORMAT_R8G8_SNORM,
        VK_FORMAT_R8G8_USCALED,
        VK_FORMAT_R8G8_SSCALED,
        VK_FORMAT_R8G8_UINT,
        VK_FORMAT_R8G8_SINT,
        VK_FORMAT_R8G8_SRGB,
        VK_FORMAT_R16_UNORM,
        VK_FORMAT_R16_SNORM,
        VK_FORMAT_R16_USCALED,
        VK_FORMAT_R16_SSCALED,
        VK_FORMAT_R16_UINT,
        VK_FORMAT_R16_SINT,
        VK_FORMAT_R16_SFLOAT:
      ElementAndTexelBlockSize(2, TexelBlockSizePair(1, 1))
    case VK_FORMAT_R8G8B8_UNORM,
        VK_FORMAT_R8G8B8_SNORM,
        VK_FORMAT_R8G8B8_USCALED,
        VK_FORMAT_R8G8B8_SSCALED,
        VK_FORMAT_R8G8B8_UINT,
        VK_FORMAT_R8G8B8_SINT,
        VK_FORMAT_R8G8B8_SRGB,
        VK_FORMAT_B8G8R8_UNORM,
        VK_FORMAT_B8G8R8_SNORM,
        VK_FORMAT_B8G8R8_USCALED,
        VK_FORMAT_B8G8R8_SSCALED,
        VK_FORMAT_B8G8R8_UINT,
        VK_FORMAT_B8G8R8_SINT,
        VK_FORMAT_B8G8R8_SRGB:
      ElementAndTexelBlockSize(3, TexelBlockSizePair(1, 1))
    case VK_FORMAT_R8G8B8A8_UNORM,
        VK_FORMAT_R8G8B8A8_SNORM,
        VK_FORMAT_R8G8B8A8_USCALED,
        VK_FORMAT_R8G8B8A8_SSCALED,
        VK_FORMAT_R8G8B8A8_UINT,
        VK_FORMAT_R8G8B8A8_SINT,
        VK_FORMAT_R8G8B8A8_SRGB,
        VK_FORMAT_B8G8R8A8_UNORM,
        VK_FORMAT_B8G8R8A8_SNORM,
        VK_FORMAT_B8G8R8A8_USCALED,
        VK_FORMAT_B8G8R8A8_SSCALED,
        VK_FORMAT_B8G8R8A8_UINT,
        VK_FORMAT_B8G8R8A8_SINT,
        VK_FORMAT_B8G8R8A8_SRGB,
        VK_FORMAT_A8B8G8R8_UNORM_PACK32,
        VK_FORMAT_A8B8G8R8_SNORM_PACK32,
        VK_FORMAT_A8B8G8R8_USCALED_PACK32,
        VK_FORMAT_A8B8G8R8_SSCALED_PACK32,
        VK_FORMAT_A8B8G8R8_UINT_PACK32,
        VK_FORMAT_A8B8G8R8_SINT_PACK32,
        VK_FORMAT_A8B8G8R8_SRGB_PACK32,
        VK_FORMAT_A2R10G10B10_UNORM_PACK32,
        VK_FORMAT_A2R10G10B10_SNORM_PACK32,
        VK_FORMAT_A2R10G10B10_USCALED_PACK32,
        VK_FORMAT_A2R10G10B10_SSCALED_PACK32,
        VK_FORMAT_A2R10G10B10_UINT_PACK32,
        VK_FORMAT_A2R10G10B10_SINT_PACK32,
        VK_FORMAT_A2B10G10R10_UNORM_PACK32,
        VK_FORMAT_A2B10G10R10_SNORM_PACK32,
        VK_FORMAT_A2B10G10R10_USCALED_PACK32,
        VK_FORMAT_A2B10G10R10_SSCALED_PACK32,
        VK_FORMAT_A2B10G10R10_UINT_PACK32,
        VK_FORMAT_A2B10G10R10_SINT_PACK32,
        VK_FORMAT_R16G16_UNORM,
        VK_FORMAT_R16G16_SNORM,
        VK_FORMAT_R16G16_USCALED,
        VK_FORMAT_R16G16_SSCALED,
        VK_FORMAT_R16G16_UINT,
        VK_FORMAT_R16G16_SINT,
        VK_FORMAT_R16G16_SFLOAT,
        VK_FORMAT_R32_UINT,
        VK_FORMAT_R32_SINT,
        VK_FORMAT_R32_SFLOAT,
        VK_FORMAT_B10G11R11_UFLOAT_PACK32,
        VK_FORMAT_E5B9G9R9_UFLOAT_PACK32:
      ElementAndTexelBlockSize(4, TexelBlockSizePair(1, 1))
    case VK_FORMAT_R16G16B16_UNORM,
        VK_FORMAT_R16G16B16_SNORM,
        VK_FORMAT_R16G16B16_USCALED,
        VK_FORMAT_R16G16B16_SSCALED,
        VK_FORMAT_R16G16B16_UINT,
        VK_FORMAT_R16G16B16_SINT,
        VK_FORMAT_R16G16B16_SFLOAT:
      ElementAndTexelBlockSize(6, TexelBlockSizePair(1, 1))
    case VK_FORMAT_R16G16B16A16_UNORM,
        VK_FORMAT_R16G16B16A16_SNORM,
        VK_FORMAT_R16G16B16A16_USCALED,
        VK_FORMAT_R16G16B16A16_SSCALED,
        VK_FORMAT_R16G16B16A16_UINT,
        VK_FORMAT_R16G16B16A16_SINT,
        VK_FORMAT_R16G16B16A16_SFLOAT,
        VK_FORMAT_R32G32_UINT,
        VK_FORMAT_R32G32_SINT,
        VK_FORMAT_R32G32_SFLOAT,
        VK_FORMAT_R64_UINT,
        VK_FORMAT_R64_SINT,
        VK_FORMAT_R64_SFLOAT:
      ElementAndTexelBlockSize(8, TexelBlockSizePair(1, 1))
    case VK_FORMAT_R32G32B32_UINT,
        VK_FORMAT_R32G32B32_SINT,
        VK_FORMAT_R32G32B32_SFLOAT:
      ElementAndTexelBlockSize(12, TexelBlockSizePair(1, 1))
    case VK_FORMAT_R32G32B32A32_UINT,
        VK_FORMAT_R32G32B32A32_SINT,
        VK_FORMAT_R32G32B32A32_SFLOAT,
        VK_FORMAT_R64G64_UINT,
        VK_FORMAT_R64G64_SINT,
        VK_FORMAT_R64G64_SFLOAT:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(1, 1))
    case VK_FORMAT_R64G64B64_UINT,
        VK_FORMAT_R64G64B64_SINT,
        VK_FORMAT_R64G64B64_SFLOAT:
      ElementAndTexelBlockSize(24, TexelBlockSizePair(1, 1))
    case VK_FORMAT_R64G64B64A64_UINT,
        VK_FORMAT_R64G64B64A64_SINT,
        VK_FORMAT_R64G64B64A64_SFLOAT:
      ElementAndTexelBlockSize(32, TexelBlockSizePair(1, 1))
    case VK_FORMAT_BC1_RGB_UNORM_BLOCK,
        VK_FORMAT_BC1_RGB_SRGB_BLOCK,
        VK_FORMAT_BC1_RGBA_UNORM_BLOCK,
        VK_FORMAT_BC1_RGBA_SRGB_BLOCK:
      ElementAndTexelBlockSize(8, TexelBlockSizePair(4, 4))
    case VK_FORMAT_BC2_UNORM_BLOCK,
        VK_FORMAT_BC2_SRGB_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(4, 4))
    case VK_FORMAT_BC3_UNORM_BLOCK,
        VK_FORMAT_BC3_SRGB_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(4, 4))
    case VK_FORMAT_BC4_UNORM_BLOCK,
        VK_FORMAT_BC4_SNORM_BLOCK:
      ElementAndTexelBlockSize(8, TexelBlockSizePair(4, 4))
    case VK_FORMAT_BC5_UNORM_BLOCK,
        VK_FORMAT_BC5_SNORM_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(4, 4))
    case VK_FORMAT_BC6H_UFLOAT_BLOCK,
        VK_FORMAT_BC6H_SFLOAT_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(4, 4))
    case VK_FORMAT_BC7_UNORM_BLOCK,
        VK_FORMAT_BC7_SRGB_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(4, 4))
    case VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK,
        VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK,
        VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK,
        VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK:
      ElementAndTexelBlockSize(8, TexelBlockSizePair(4, 4))
    case VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK,
        VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(4, 4))
    case VK_FORMAT_EAC_R11_UNORM_BLOCK,
        VK_FORMAT_EAC_R11_SNORM_BLOCK:
      ElementAndTexelBlockSize(8, TexelBlockSizePair(4, 4))
    case VK_FORMAT_EAC_R11G11_UNORM_BLOCK,
        VK_FORMAT_EAC_R11G11_SNORM_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(4, 4))
    case VK_FORMAT_ASTC_4x4_UNORM_BLOCK,
        VK_FORMAT_ASTC_4x4_SRGB_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(4, 4))
    case VK_FORMAT_ASTC_5x4_UNORM_BLOCK,
        VK_FORMAT_ASTC_5x4_SRGB_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(5, 4))
    case VK_FORMAT_ASTC_5x5_UNORM_BLOCK,
        VK_FORMAT_ASTC_5x5_SRGB_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(5, 5))
    case VK_FORMAT_ASTC_6x5_UNORM_BLOCK,
        VK_FORMAT_ASTC_6x5_SRGB_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(6, 5))
    case VK_FORMAT_ASTC_6x6_UNORM_BLOCK,
        VK_FORMAT_ASTC_6x6_SRGB_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(6, 6))
    case VK_FORMAT_ASTC_8x5_UNORM_BLOCK,
        VK_FORMAT_ASTC_8x5_SRGB_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(8, 5))
    case VK_FORMAT_ASTC_8x6_UNORM_BLOCK,
        VK_FORMAT_ASTC_8x6_SRGB_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(8, 6))
    case VK_FORMAT_ASTC_8x8_UNORM_BLOCK,
        VK_FORMAT_ASTC_8x8_SRGB_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(8, 8))
    case VK_FORMAT_ASTC_10x5_UNORM_BLOCK,
        VK_FORMAT_ASTC_10x5_SRGB_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(10, 5))
    case VK_FORMAT_ASTC_10x6_UNORM_BLOCK,
        VK_FORMAT_ASTC_10x6_SRGB_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(10, 6))
    case VK_FORMAT_ASTC_10x8_UNORM_BLOCK,
        VK_FORMAT_ASTC_10x8_SRGB_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(10, 8))
    case VK_FORMAT_ASTC_10x10_UNORM_BLOCK,
        VK_FORMAT_ASTC_10x10_SRGB_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(10, 10))
    case VK_FORMAT_ASTC_12x10_UNORM_BLOCK,
        VK_FORMAT_ASTC_12x10_SRGB_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(12, 10))
    case VK_FORMAT_ASTC_12x12_UNORM_BLOCK,
        VK_FORMAT_ASTC_12x12_SRGB_BLOCK:
      ElementAndTexelBlockSize(16, TexelBlockSizePair(12, 12))
    case VK_FORMAT_D16_UNORM:
      ElementAndTexelBlockSize(2, TexelBlockSizePair(1, 1))
    case VK_FORMAT_X8_D24_UNORM_PACK32:
      ElementAndTexelBlockSize(4, TexelBlockSizePair(1, 1))
    case VK_FORMAT_D32_SFLOAT:
      ElementAndTexelBlockSize(4, TexelBlockSizePair(1, 1))
    case VK_FORMAT_S8_UINT:
      ElementAndTexelBlockSize(1, TexelBlockSizePair(1, 1))
    case VK_FORMAT_D16_UNORM_S8_UINT:
      ElementAndTexelBlockSize(3, TexelBlockSizePair(1, 1))
    case VK_FORMAT_D24_UNORM_S8_UINT:
      ElementAndTexelBlockSize(3, TexelBlockSizePair(1, 1))
    case VK_FORMAT_D32_SFLOAT_S8_UINT:
      ElementAndTexelBlockSize(5, TexelBlockSizePair(1, 1))
    default:
      ElementAndTexelBlockSize(4, TexelBlockSizePair(1, 1))
  }
}

sub VkDeviceSize inferImageSize(ref!ImageObject img) {
  img_info := img.Info
  img_size := MutableVkDeviceSize(0)
  for m in (0 .. img_info.MipLevels) {
    img_size.Val += inferImageLevelSize(img, m)
  }
  return img_size.Val
}

sub VkDeviceSize inferImageLevelSize(ref!ImageObject img, u32 level) {
  img_info := img.Info
  level_size := MutableVkDeviceSize(0)
  if level < img_info.MipLevels {
    block_info := getElementAndTexelBlockSize(img_info.Format)
    width := getMipSize(img_info.Extent.Width, level)
    height := getMipSize(img_info.Extent.Height, level)
    depth := getMipSize(img_info.Extent.Depth, level)
    width_in_blocks := roundUpTo(width, block_info.TexelBlockSize.Width)
    height_in_blocks := roundUpTo(height, block_info.TexelBlockSize.Height)
    level_size.Val += as!VkDeviceSize(width_in_blocks * height_in_blocks * depth * block_info.ElementSize * img_info.ArrayLayers)
  }
  return level_size.Val
}

sub u32 getMipSize(u32 original, u32 level) {
  value := original / (1 << level)
  return switch (value) {
    case 0:
      switch original {
        case 0:  0
        default: 1
      }
    default: value
  }
}

sub u32 roundUpTo(u32 dividend, u32 divisor) {
  return (dividend + divisor - 1) / divisor
}

// This should correspond to the data layout specified at VkBufferImageCopy
sub u32 getDepthElementSize(VkFormat format, bool inBuffer) {
  d16Size := as!u32(2)
  d24Size := as!u32(3)
  d32Size := as!u32(4)
  return switch (format) {
    case VK_FORMAT_D16_UNORM, VK_FORMAT_D16_UNORM_S8_UINT:
      d16Size
    case VK_FORMAT_D32_SFLOAT, VK_FORMAT_D32_SFLOAT_S8_UINT:
      d32Size
    case VK_FORMAT_X8_D24_UNORM_PACK32, VK_FORMAT_D24_UNORM_S8_UINT:
      // For VkBufferImageCopy, data is packed with one 32-bit word per texel
      // with the D24 value in the LSBs of the word, and undefined values in
      // the eight MSBs.
      switch (inBuffer) {
        case true:
          d32Size
        case false:
          d24Size
      }
    default:
      as!u32(0)
  }
}

@internal class ImageCoverage {
  bool Entire
  dense_map!(u32, VkImageSubresourceRange) Ranges
}

sub void touchEntireImageCoverage(ref!ImageCoverage coverage) {
  coverage.Entire = true
}

sub void touchImageCoverage(ref!ImageObject image, ref!ImageCoverage coverage, VkImageSubresourceRange rng) {
  if !coverage.Entire {
    if isEntireSubresource(image, rng) {
      touchEntireImageCoverage(coverage)
    } else {
      b := MutableBool(false)
      for _, _, r in coverage.Ranges {
        if (r.aspectMask == rng.aspectMask) &&
        (r.baseMipLevel == rng.baseMipLevel) &&
        (r.levelCount == rng.levelCount) &&
        (r.baseArrayLayer == rng.baseArrayLayer) &&
        (r.layerCount == rng.layerCount) {
          b.b = true
        }
      }
      if !b.b {
        pos := as!u32(len(coverage.Ranges))
        coverage.Ranges[pos] = rng
      }
    }
  }
}

sub void commandBufferTouchEntireImage(ref!CommandBufferObject cmdbuf, ref!ImageObject image) {
  if !(image.VulkanHandle in cmdbuf.TouchedImages) {
    cmdbuf.TouchedImages[image.VulkanHandle] = new!ImageCoverage()
  }
  coverage := cmdbuf.TouchedImages[image.VulkanHandle]
  touchEntireImageCoverage(coverage)
}

sub void commandBufferTouchImage(ref!CommandBufferObject cmdbuf, ref!ImageObject image, VkImageSubresourceRange rng) {
  if !(image.VulkanHandle in cmdbuf.TouchedImages) {
    cmdbuf.TouchedImages[image.VulkanHandle] = new!ImageCoverage()
  }
  coverage := cmdbuf.TouchedImages[image.VulkanHandle]
  touchImageCoverage(image, coverage, rng)
}

sub void descriptorSetLinkEntireImage(ref!DescriptorSetObject descSet, ref!ImageObject image) {
  if !(image.VulkanHandle in descSet.LinkedImages) {
    descSet.LinkedImages[image.VulkanHandle] = new!ImageCoverage()
  }
  coverage := descSet.LinkedImages[image.VulkanHandle]
  touchEntireImageCoverage(coverage)
}

sub void descriptorSetLinkImage(ref!DescriptorSetObject descSet, ref!ImageObject image, VkImageSubresourceRange rng) {
  if !(image.VulkanHandle in descSet.LinkedImages) {
    descSet.LinkedImages[image.VulkanHandle] = new!ImageCoverage()
  }
  coverage := descSet.LinkedImages[image.VulkanHandle]
  touchImageCoverage(image, coverage, rng)
}

@untracked @internal
class DescriptorSetSet {
  @untrackedMap @untracked
  map!(VkDescriptorSet, bool) val
}

@untracked @internal
class ImageSet {
  @untrackedMap @untracked
  map!(VkImage, bool) val
}

@untracked @internal
class BufferSet {
  @untrackedMap @untracked
  map!(VkBuffer, bool) val
}

@untracked @internal
class CommandBufferSet {
  @untrackedMap @untracked
  map!(VkCommandBuffer, bool) val
}

@internal class AllBits {
  @untrackedMap @untracked
  map!(VkImageAspectFlags, ref!unpackedImageAspectFlagBits) allBits
}

@hidden @serialize @untracked
AllBits allBits

@internal class unpackedImageAspectFlagBits {
  @untrackedMap @untracked
  dense_map!(u32, VkImageAspectFlagBits) Bits
}

sub dense_map!(u32, VkImageAspectFlagBits) unpackImageAspectFlags(VkImageAspectFlags flag) {
  if !(flag in allBits.allBits) {
    m := new!unpackedImageAspectFlagBits()
    // Till Vulkan 1.1, seven bits are used for image aspects.
    // Update this accordingly if more image aspect flag bits are added to the spec
    for i in (0 .. 7) {
      if (as!u32(1 << as!u32(i)) & as!u32(flag)) != as!u32(0) {
        m.Bits[len(m.Bits)] = as!VkImageAspectFlagBits(1 << as!u32(i))
      }
    }
    allBits.allBits[flag] = m
  }
 
  return allBits.allBits[flag].Bits
}

@internal class emptyDenseMap {
  dense_map!(u32, ref!CommandReference) m
}

@internal class BoundBuffer {
  ref!BufferObject Buffer
  VkDeviceSize     Offset
  VkDeviceSize     Range
}

sub VkDeviceSize deviceMemoryOffsetToMappedSpace(ref!DeviceMemoryObject memory, VkDeviceSize offsetInDeviceMemory) {
  ret := switch memory.MappedLocation == null {
    case true:
      as!VkDeviceSize(0xFFFFFFFFFFFFFFFF)
    case false:
      switch offsetInDeviceMemory < memory.MappedOffset {
        case true:
          as!VkDeviceSize(0xFFFFFFFFFFFFFFFF)
        case false:
          switch offsetInDeviceMemory >= memory.MappedOffset + memory.MappedSize {
            case true:
              as!VkDeviceSize(0xFFFFFFFFFFFFFFFF)
            case false:
              offsetInDeviceMemory - memory.MappedOffset
          }
      }
  }
  return ret
}

sub VkQueueFlags AddQueueFlag(VkQueueFlags flags, VkQueueFlagBits bit) {
  return as!VkQueueFlags(as!u32(flags) | as!u32(bit))
}

class VulkanStructHeader {
  VkStructureType SType
  void*           PNext
}

// Following utility subroutines are exact copies from GLES.
// TODO: Apic should support one api file to be imported in multiple dependee
// api files. Once this is done, use a single definiton shared with GLES.
sub T max!T(T a, T b) {
  return switch a > b {
    case true:  a
    case false: b
  }
}

sub T min!T(T a, T b) {
  return switch (a < b) {
    case true:  a
    case false: b
  }
}

extern u32 onesCount(u32 a)
