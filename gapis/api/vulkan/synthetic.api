// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@synthetic
cmd VkResult replayCreateVkInstance(
    const VkInstanceCreateInfo*  pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkInstance*                  pInstance) {
  // NOTE: The logic for this function should be identical to the one of
  // vkCreateInstance() in vulkan.api. Change both together.

  instance := createInstanceObject(pCreateInfo)
  // TODO: pAllocator
  handle := ?
  pInstance[0] = handle
  instance.VulkanHandle = handle
  Instances[handle] = instance
  return ?
}

@synthetic
cmd VkResult ReplayCreateVkDevice(
    VkPhysicalDevice             physicalDevice,
    const VkDeviceCreateInfo*    pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDevice*                    pDevice) {
  // NOTE: The logic for this function should be identical to the one of
  // vkCreateDevice() in vulkan.api. Change both together.

  device := createDeviceObject(pCreateInfo)
  device.PhysicalDevice = physicalDevice
  // TODO: pAllocator

  handle := ?
  pDevice[0] = handle
  device.VulkanHandle = handle
  Devices[handle] = device

  return ?
}

@synthetic
cmd void replayRegisterVkInstance(VkInstance instance) { }

@synthetic
cmd void replayUnregisterVkInstance(VkInstance instance) { }

@synthetic
cmd void replayRegisterVkDevice(
    VkPhysicalDevice    physicalDevice
    VkDevice            device
    VkDeviceCreateInfo* createInfo
) {
  info := createInfo[0]
  // We only care about the queue create specifications.
  _ = info.pQueueCreateInfos[0:info.queueCreateInfoCount]
}

@synthetic
cmd void replayUnregisterVkDevice(VkDevice device) { }

@synthetic
cmd void replayRegisterVkCommandBuffers(
    VkDevice         device,
    u32              count,
    VkCommandBuffer* commandBuffers) {
  _ = commandBuffers[0:count]
}

@synthetic
cmd void replayUnregisterVkCommandBuffers(
    u32              count,
    VkCommandBuffer* commandBuffers) {
  _ = commandBuffers[0:count]
}

@synthetic
cmd void toggleVirtualSwapchainReturnAcquiredImage(
    VkSwapchainKHR* pSwapchain) {
  _ = pSwapchain[0]
}

@synthetic
cmd VkResult replayGetFenceStatus(
    VkDevice device,
    VkFence  fence,
    VkResult expected) {
  return ?
}

@synthetic
cmd VkResult replayGetEventStatus(
    VkDevice device,
    VkEvent  event,
    VkResult expected,
    bool     wait) {
  return ?
}

@synthetic
@custom
cmd VkResult replayAllocateImageMemory(VkDevice device, VkPhysicalDeviceMemoryProperties* pPhysicalDeviceMemoryProperties, VkImage image, VkDeviceMemory* pMemory) {
  _ = pPhysicalDeviceMemoryProperties[0]
  handle := ?
  pMemory[0] = handle
  return ?
}

@synthetic
cmd VkResult replayEnumeratePhysicalDevices(
    VkInstance instance,
    u32*              pPhysicalDeviceCount,
    VkPhysicalDevice* pPhysicalDevices,
    // This is an array of expected vendorID/deviceID (32-bits/32-bits)
    u64*              pPhysicalDeviceIDs) {
  count := pPhysicalDeviceCount[0]
  read(pPhysicalDeviceIDs[0:count])
  fence
  devices := pPhysicalDevices[0:count]
  for i in (0 .. count) {
    device := ?
    devices[i] = device
  }
  for i in (0 .. count) {
    object := switch (PhysicalDevices[devices[i]] == null) {
      case true:
        new!PhysicalDeviceObject()
      case false:
        PhysicalDevices[devices[i]]
    }
    object.Instance = instance
    object.Index = i
    object.VulkanHandle = devices[i]
    PhysicalDevices[devices[i]] = object
  }
  return ?
}
