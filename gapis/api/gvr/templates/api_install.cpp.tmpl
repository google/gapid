{{/*
 * Copyright (C) 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */}}

{{/* ---- Includes ---- */}}
{{Include "../../templates/cpp_common.tmpl"}}

{{/* ---- Overrides ---- */}}
{{Global "C++.EnumTypeOverride" "uint32_t"}}

{{$filename := print "gvr_install.cpp" }}
{{$ | Macro "Install" | Reflow 4 | Write $filename}}

{{define "Install"}}
  {{AssertType $ "API"}}
  {{Template "C++.Copyright"}}
¶
#include "gapii/cc/android/gvr_install.h"
¶
#include "gapii/cc/gvr_exports.h"
#include "gapii/cc/gvr_imports.h"
#include "gapii/cc/android/installer.h"
¶
#include <dlfcn.h>
¶
namespace gapii {«
¶
bool install_gvr(Installer* installer, void* gvr_lib, GvrImports* imports) {
  struct func_t {
    const char* name;
    void**      imp;
    const void* exp;
  };
¶
  func_t funcs[] = {
    {{range $c := AllCommands $}}
      {{$name := Macro "CmdName" $c}}
      { "{{$name}}", reinterpret_cast<void**>(&imports->{{$name}}), reinterpret_cast<const void*>({{$name}}) },
    {{end}}
  };
¶
  for (auto func : funcs) {
    if (auto import = dlsym(gvr_lib, func.name)) {
      GAPID_INFO("Installing '%s'...", func.name);
      *func.imp = installer->install(import, func.exp);
    } else {
      GAPID_WARNING("Could not find GVR function '%s'", func.name);
    }
  }
  return true;
}
¶
»} // namespace gapii
{{end}}
