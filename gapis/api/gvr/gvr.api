// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

api_index 3

import "types.api"

@no_replay
cmd gvr_version gvr_get_version() {
  return ?
}

@no_replay
cmd string gvr_get_version_string() {
  return ?
}

@no_replay
cmd s32 gvr_get_error(gvr_context* gvr) {
  return ?
}

@no_replay
cmd s32 gvr_clear_error(gvr_context* gvr) {
  return ?
}

@no_replay
cmd string gvr_get_error_string(s32 error_code) {
  return ?
}

@no_replay
cmd const gvr_user_prefs* gvr_get_user_prefs(gvr_context* gvr) {
  return ?
}

@no_replay
cmd s32 gvr_user_prefs_get_controller_handedness(const gvr_user_prefs* user_prefs) {
  return ?
}

@no_replay
cmd void gvr_destroy(gvr_context** gvr) {

}

@no_replay
cmd void gvr_initialize_gl(gvr_context* gvr) {

}

@no_replay
cmd bool gvr_get_async_reprojection_enabled(const gvr_context* gvr) {
  return ?
}

@no_replay
cmd void gvr_get_recommended_buffer_viewports(const gvr_context* gvr, gvr_buffer_viewport_list* viewport_list) {

}

@no_replay
cmd void gvr_get_screen_buffer_viewports(const gvr_context* gvr, gvr_buffer_viewport_list* viewport_list) {

}

@no_replay
cmd gvr_sizei gvr_get_maximum_effective_render_target_size(const gvr_context* gvr) {
  return ?
}

@no_replay
cmd gvr_sizei gvr_get_screen_target_size(const gvr_context* gvr) {
  return ?
}

@no_replay
cmd void gvr_set_surface_size(gvr_context* gvr, gvr_sizei surface_size_pixels) {

}

@no_replay
cmd void gvr_distort_to_screen(gvr_context*                    gvr, s32 texture_id,
                               const gvr_buffer_viewport_list* viewport_list,
                               gvr_mat4f                       head_space_from_start_space,
                               gvr_clock_time_point            target_presentation_time) {

}

@no_replay
cmd bool gvr_is_feature_supported(const gvr_context* gvr, s32 feature) {
  return ?
}


// Viewports and viewport lists

@no_replay
cmd gvr_buffer_viewport* gvr_buffer_viewport_create(gvr_context* gvr) {
  return ?
}

@no_replay
cmd void gvr_buffer_viewport_destroy(gvr_buffer_viewport** viewport) {

}

@no_replay
cmd gvr_rectf gvr_buffer_viewport_get_source_uv(const gvr_buffer_viewport* viewport) {
  return ?
}

@no_replay
cmd void gvr_buffer_viewport_set_source_uv(gvr_buffer_viewport* viewport, gvr_rectf uv) {

}

@no_replay
cmd gvr_rectf gvr_buffer_viewport_get_source_fov(const gvr_buffer_viewport* viewport) {
  return ?
}

@no_replay
cmd void gvr_buffer_viewport_set_source_fov(gvr_buffer_viewport* viewport, gvr_rectf fov) {

}

@no_replay
cmd gvr_mat4f gvr_buffer_viewport_get_transform(const gvr_buffer_viewport* viewport) {
  return ?
}

@no_replay
cmd void gvr_buffer_viewport_set_transform(gvr_buffer_viewport* viewport, gvr_mat4f transform) {

}

@no_replay
cmd s32 gvr_buffer_viewport_get_target_eye(const gvr_buffer_viewport* viewport) {
  return ?
}

@no_replay
cmd void gvr_buffer_viewport_set_target_eye(gvr_buffer_viewport* viewport, s32 index) {

}

@no_replay
cmd s32 gvr_buffer_viewport_get_source_buffer_index(const gvr_buffer_viewport* viewport) {
  return ?
}

@no_replay
cmd void gvr_buffer_viewport_set_source_buffer_index(gvr_buffer_viewport* viewport, s32 buffer_index) {

}

@no_replay
cmd s32 gvr_buffer_viewport_get_external_surface_id(const gvr_buffer_viewport* viewport) {
  return ?
}

@no_replay
cmd void gvr_buffer_viewport_set_external_surface_id(gvr_buffer_viewport* viewport, s32 external_surface_id) {

}

@no_replay
cmd s32 gvr_buffer_viewport_get_reprojection(const gvr_buffer_viewport* viewport) {
  return ?
}

@no_replay
cmd void gvr_buffer_viewport_set_reprojection(gvr_buffer_viewport* viewport, s32 reprojection) {

}

@no_replay
cmd void gvr_buffer_viewport_set_source_layer(gvr_buffer_viewport* viewport, s32 layer_index) {

}

@no_replay
cmd bool gvr_buffer_viewport_equal(const gvr_buffer_viewport* a, const gvr_buffer_viewport* b) {
  return ?
}

@no_replay
cmd gvr_buffer_viewport_list* gvr_buffer_viewport_list_create(const gvr_context* gvr) {
  return ?
}

@no_replay
cmd void gvr_buffer_viewport_list_destroy(gvr_buffer_viewport_list** viewport_list) {

}

@no_replay
cmd size gvr_buffer_viewport_list_get_size(const gvr_buffer_viewport_list* viewport_list) {
  return ?
}

@no_replay
cmd void gvr_buffer_viewport_list_get_item(const gvr_buffer_viewport_list* viewport_list, size index, gvr_buffer_viewport* viewport) {

}

@no_replay
cmd void gvr_buffer_viewport_list_set_item(gvr_buffer_viewport_list* viewport_list, size index, const gvr_buffer_viewport* viewport) {

}


// Swapchains and frames

@no_replay
cmd gvr_buffer_spec* gvr_buffer_spec_create(gvr_context* gvr) {
  return ?
}

@no_replay
cmd void gvr_buffer_spec_destroy(gvr_buffer_spec** spec) {

}

@no_replay
cmd gvr_sizei gvr_buffer_spec_get_size(const gvr_buffer_spec* spec) {
  return ?
}

@no_replay
cmd void gvr_buffer_spec_set_size(gvr_buffer_spec* spec, gvr_sizei size) {

}

@no_replay
cmd s32 gvr_buffer_spec_get_samples(const gvr_buffer_spec* spec) {
  return ?
}

//      multisampling should be disabled.
@no_replay
cmd void gvr_buffer_spec_set_samples(gvr_buffer_spec* spec, s32 num_samples) {

}

@no_replay
cmd void gvr_buffer_spec_set_color_format(gvr_buffer_spec* spec, s32 color_format) {

}

@no_replay
cmd void gvr_buffer_spec_set_depth_stencil_format(gvr_buffer_spec* spec, s32 depth_stencil_format) {

}

@no_replay
cmd void gvr_buffer_spec_set_multiview_layers(gvr_buffer_spec* spec, s32 num_layers) {

}

@no_replay
cmd gvr_swap_chain* gvr_swap_chain_create(gvr_context*            gvr,
                                          const gvr_buffer_spec** buffers,
                                          s32                     count) {
  return ?
}

@no_replay
cmd void gvr_swap_chain_destroy(gvr_swap_chain** swap_chain) {

}

@no_replay
cmd s32 gvr_swap_chain_get_buffer_count(const gvr_swap_chain* swap_chain) {
  return ?
}

@no_replay
cmd gvr_sizei gvr_swap_chain_get_buffer_size(gvr_swap_chain* swap_chain, s32 index) {
  return ?
}

@no_replay
cmd void gvr_swap_chain_resize_buffer(gvr_swap_chain* swap_chain, s32 index, gvr_sizei size) {

}

@no_replay
cmd gvr_frame* gvr_swap_chain_acquire_frame(gvr_swap_chain* swap_chain) {
  return ?
}

@no_replay
cmd void gvr_frame_bind_buffer(gvr_frame* frame, s32 index) {

}

@no_replay
cmd void gvr_frame_unbind(gvr_frame* frame) {

}

@no_replay
cmd gvr_sizei gvr_frame_get_buffer_size(const gvr_frame* frame, s32 index) {
  return ?
}

@no_replay
cmd s32 gvr_frame_get_framebuffer_object(const gvr_frame* frame, s32 index) {
  return ?
}

@no_replay
@frame_end
cmd void gvr_frame_submit(gvr_frame** frame, const gvr_buffer_viewport_list* list,
                          gvr_mat4f   head_space_from_start_space) {
  read(frame[0:1])
  write(frame[0:1]) // frame pointer is nullified on returning.
}

@no_replay
cmd void gvr_bind_default_framebuffer(gvr_context* gvr) {

}


// Head tracking

@no_replay
cmd gvr_clock_time_point gvr_get_time_point_now() {
  return ?
}

@no_replay
cmd gvr_mat4f gvr_get_head_space_from_start_space_rotation(const gvr_context* gvr, gvr_clock_time_point time) {
  return ?
}

@no_replay
cmd gvr_mat4f gvr_apply_neck_model(const gvr_context* gvr,
                                   gvr_mat4f          head_space_from_start_space_rotation,
                                   f32                factor) {
  return ?
}

@no_replay
cmd void gvr_pause_tracking(gvr_context* gvr) {

}

@no_replay
cmd void gvr_resume_tracking(gvr_context* gvr) {

}

@no_replay
cmd void gvr_reset_tracking(gvr_context* gvr) {

}

@no_replay
cmd void gvr_recenter_tracking(gvr_context* gvr) {

}

// Head mounted display.

@no_replay
cmd bool gvr_set_default_viewer_profile(gvr_context* gvr,
                                        string       viewer_profile_uri) {
  return ?
}

@no_replay
cmd void gvr_refresh_viewer_profile(gvr_context* gvr) {

}

@no_replay
cmd string gvr_get_viewer_vendor(const gvr_context* gvr) {
  return ?
}

@no_replay
cmd string gvr_get_viewer_model(const gvr_context* gvr) {
  return ?
}

@no_replay
cmd s32 gvr_get_viewer_type(const gvr_context* gvr) {
  return ?
}

@no_replay
cmd gvr_mat4f gvr_get_eye_from_head_matrix(const gvr_context* gvr, s32 eye) {
  return ?
}

@no_replay
cmd gvr_recti gvr_get_window_bounds(const gvr_context* gvr) {
  return ?
}

@no_replay
cmd void gvr_compute_distorted_point(const gvr_context* gvr, s32 eye, gvr_vec2f uv_in, gvr_vec2f[3] uv_out) {

}

