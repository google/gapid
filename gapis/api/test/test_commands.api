// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////
// Intrinsics
////////////////////////////////////////////////////////////////
cmd void cmdClone(u8* src, u32 cnt) {
  U8s = clone(src[0:cnt])
}

cmd void cmdMake(u32 cnt) {
  U8s = make!u8(cnt)
}

cmd void cmdCopy(u8* src, u32 cnt) {
  U8s = make!u8(cnt)
  copy(U8s, src[0:cnt])
}

cmd void cmdCharsliceToString(char* s, u32 len) {
  Str = as!string(s[0:len])
}

cmd void cmdCharptrToString(char* s) {
  Str = as!string(s)
}

cmd void cmdSliceCasts(u16* s, u32 l) {
  U8s = as!u8[](s[0:l])
  U16s = as!u16[](s[0:l])
  U32s = as!u32[](s[0:l])
  Ints = as!int[](s[0:l])
}

////////////////////////////////////////////////////////////////
// Subroutines
////////////////////////////////////////////////////////////////
sub int subAdd(int a, int b) {
  return a + b
}

cmd void cmdAdd(int a, int b) {
  Ints = make!int(1)
  Ints[0] = subAdd(a, b)
}

////////////////////////////////////////////////////////////////
// Void, no args
////////////////////////////////////////////////////////////////
cmd void cmdVoid() { }

////////////////////////////////////////////////////////////////
// Unknown tests
////////////////////////////////////////////////////////////////
// TODO: These do not currently compile
// int unk
//
// cmd int cmdUnknownRet() {
//   i := ?
//   unk = i
//   return i
// }
//
// cmd void cmdUnknownPtr(int* p) {
//   i := ?
//   unk = i
//   p[0] = i
// }

cmd int cmdUnknownRet() {
  return ?
}

cmd void cmdUnknownWritePtr(int* p) {
  p[0] = ?
}

cmd void cmdUnknownWriteSlice(int* a) {
  count := 5
  slice := a[0:count]
  for i in (0 .. count) {
    unknown := as!int(?)
    slice[i] = unknown
  }
}

////////////////////////////////////////////////////////////////
// Commands with a single input argument
////////////////////////////////////////////////////////////////
cmd void cmdVoidU8(u8 a) { }
cmd void cmdVoidS8(s8 a) { }
cmd void cmdVoidU16(u16 a) { }
cmd void cmdVoidS16(s16 a) { }
cmd void cmdVoidF32(f32 a) { }
cmd void cmdVoidU32(u32 a) { }
cmd void cmdVoidS32(s32 a) { }
cmd void cmdVoidF64(f64 a) { }
cmd void cmdVoidU64(u64 a) { }
cmd void cmdVoidS64(s64 a) { }
cmd void cmdVoidBool(bool a) { }

////////////////////////////////////////////////////////////////
// Commands with more than one input
////////////////////////////////////////////////////////////////
cmd void cmdVoid3Strings(u32 a, u32 b, u32 c) { }

////////////////////////////////////////////////////////////////
// Commands with input arrays
////////////////////////////////////////////////////////////////
cmd void cmdVoid3InArrays(u8* a, u32* b, int* c) {
  U8s = make!u8(10)
  read(b[5:15])
  read(c[5:15])
  copy(U8s, a[5:25]) // only 10 elements should be copied
}

////////////////////////////////////////////////////////////////
// Commands with static input arrays
////////////////////////////////////////////////////////////////
cmd void cmdVoid3InStaticArrays(u8[3] a, u32[3] b, u8[3] c) {}

////////////////////////////////////////////////////////////////
// Commands with input of arrays of pointers
////////////////////////////////////////////////////////////////
cmd void cmdVoidInArrayOfStrings(const char* const* strings, s32 count) {
  names := strings[0:count]
  for i in (0 .. count) {
    _ = as!string(as!char*(names[i])) // Read null-terminated string. TODO: Better syntax.
  }
}

////////////////////////////////////////////////////////////////
// Commands with a single pointer element read
////////////////////////////////////////////////////////////////
cmd void cmdVoidReadU8(u8* a) { _ = a[0] }
cmd void cmdVoidReadS8(s8* a) { _ = a[0] }
cmd void cmdVoidReadU16(u16* a) { _ = a[0] }
cmd void cmdVoidReadS16(s16* a) { _ = a[0] }
cmd void cmdVoidReadF32(f32* a) { _ = a[0] }
cmd void cmdVoidReadU32(u32* a) { _ = a[0] }
cmd void cmdVoidReadS32(s32* a) { _ = a[0] }
cmd void cmdVoidReadF64(f64* a) { _ = a[0] }
cmd void cmdVoidReadU64(u64* a) { _ = a[0] }
cmd void cmdVoidReadS64(s64* a) { _ = a[0] }
cmd void cmdVoidReadBool(bool* a) { _ = a[0] }

////////////////////////////////////////////////////////////////
// Commands with multiple pointer element reads
////////////////////////////////////////////////////////////////
cmd void cmdVoidReadPtrs(f32* a, u16* b, bool* c) {
  _ = a[0]
  _ = b[0]
  _ = c[0]
}

////////////////////////////////////////////////////////////////
// Commands with a single pointer element write
////////////////////////////////////////////////////////////////
cmd void cmdVoidWriteU8(u8* a) { a[0] = 1 }
cmd void cmdVoidWriteS8(s8* a) { a[0] = 1 }
cmd void cmdVoidWriteU16(u16* a) { a[0] = 1 }
cmd void cmdVoidWriteS16(s16* a) { a[0] = 1 }
cmd void cmdVoidWriteF32(f32* a) { a[0] = 1 }
cmd void cmdVoidWriteU32(u32* a) { a[0] = 1 }
cmd void cmdVoidWriteS32(s32* a) { a[0] = 1 }
cmd void cmdVoidWriteF64(f64* a) { a[0] = 1 }
cmd void cmdVoidWriteU64(u64* a) { a[0] = 1 }
cmd void cmdVoidWriteS64(s64* a) { a[0] = 1 }
cmd void cmdVoidWriteBool(bool* a) { a[0] = true }

////////////////////////////////////////////////////////////////
// Commands with multiple pointer element writes
////////////////////////////////////////////////////////////////
cmd void cmdVoidWritePtrs(f32* a, u16* b, bool* c) {
  a[0] = 10
  b[0] = 20
  c[0] = false
}

////////////////////////////////////////////////////////////////
// Commands with a return value
////////////////////////////////////////////////////////////////
cmd u8 cmdU8() { return 0 }
cmd s8 cmdS8() { return 0 }
cmd u16 cmdU16() { return 0 }
cmd s16 cmdS16() { return 0 }
cmd f32 cmdF32() { return 0 }
cmd u32 cmdU32() { return 0 }
cmd s32 cmdS32() { return 0 }
cmd f64 cmdF64() { return 0 }
cmd u64 cmdU64() { return 0 }
cmd s64 cmdS64() { return 0 }
cmd bool cmdBool() { return false }
cmd void* cmdPointer() { return ? }

////////////////////////////////////////////////////////////////
// Commands with remapped arguments
////////////////////////////////////////////////////////////////
cmd void cmdVoid3Remapped(remapped a, remapped b, remapped c) { }

cmd void cmdVoidInArrayOfRemapped(remapped* a) { read(a[0:5]) }

cmd void cmdVoidOutArrayOfRemapped(remapped* a) { write(a[0:5]) }

cmd void cmdVoidOutArrayOfUnknownRemapped(remapped* a) {
  count := 5
  slice := a[0:count]
  for i in (0 .. count) {
    unknown := as!remapped(?)
    slice[i] = unknown
  }
}

cmd remapped cmdRemapped() { return ? }

////////////////////////////////////////////////////////////////
// Commands with structs containing remapped fields
////////////////////////////////////////////////////////////////
cmd void cmdVoidReadRemappedStruct(RemappedStruct* s) { _ = s[0] }

cmd void cmdVoidReadPointerStruct(PointerStruct* s) { _ = s[0].Pointer[0] }

cmd void cmdVoidReadNestedStruct(NestedStruct* s) {
  data := s[0]
  _ = data.RS[0]
  _ = data.PS[0].Pointer[0]
}

cmd void cmdVoidReadStringStruct(StringStruct* s) {
  data := s[0]
  strs := data.Strings[0:data.Count]
  for i in (0 .. data.Count) {
    _ = as!string(strs[i])
  }
}

////////////////////////////////////////////////////////////////
// Commands with reading and conditional writing
////////////////////////////////////////////////////////////////
cmd void cmdVoidReadAndConditionalWrite(u32* pCount, remapped* pHandles) {
  // The following logic is very common in Vulkan APIs.
  _ = pCount[0]

  if pHandles == null {
    pCount[0] = ?
  } else {
    count := as!u32(?)
    handles := pHandles[0:count]
    for i in (0 .. count) {
      handles[i] = ?
    }
    pCount[0] = count
  }
}

////////////////////////////////////////////////////////////////
// Commands for exercising types
////////////////////////////////////////////////////////////////
cmd u32 cmdTypeMix(
    u64 ID,
    u8  U8,  s8  S8,
    u16 U16, s16 S16,
    u32 U32, s32 S32,
    u64 U64, s64 S64,
    f32 F32, f64 F64,
    bool Bool,
    void* Ptr
) {
    return 0
}

////////////////////////////////////////////////////////////////
// Commands for exercising state
////////////////////////////////////////////////////////////////
cmd void primeState(u8* ptr) {
		Str = "aaa"

    Sli = make!bool(3)
    Sli[0] = true
    Sli[1] = false
    Sli[2] = true

		Ref = new!Complex()
    Ref.Strings["123"] = 123
    Ref.RefObject = new!TestObject(value: 555)

    Ptr = ptr

    Map["cat"] = new!Complex(Object: TestObject(100))
    Map["dog"] = new!Complex(Object: TestObject(200))
}