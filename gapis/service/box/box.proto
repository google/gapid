// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "core/data/pod/pod.proto";

package box;
option java_package = "com.google.gapid.proto.service.box";
option java_outer_classname = "Box";
option go_package = "github.com/google/gapid/gapis/service/box";

message Value {
  // value_id is used to describe cyclic / 'diamond' values. The identifiers are
  // only used for the duration of encoding / decoding the outermost `Value` or
  // `Type` - they are not global.
  uint32 value_id = 1;
  oneof val {
    // If true then this value is a back-reference to a previously described
    // value with the same id.
    bool back_reference = 2;
    pod.Value pod = 3;
    Pointer pointer = 4;
    Slice slice = 5;
    Reference reference = 6;
    Struct struct = 7;
    Map map = 8;
    Array array = 9;
  }
}


message Pointer {
  // base address of the pointer.
  uint64 address = 1;
}
message Slice {
  // the type of the slice data.
  pod.Type type = 1;
  // the pool identifier of the slice.
  uint64 pool = 2;
  // the base address of the slice.
  Pointer base = 3;
  // the number of elements in the slice.
  uint64 count = 4;
  // the total size of the slice in bytes.
  uint64 size = 5;
  // the original pointer this slice derives from.
  // Is constant even after sub-slicing.
  uint64 root = 6;
}

message Reference {
  oneof val {
    // null is used to describe a null reference to the specified type.
    Type null = 1;
    // a reference to value.
    Value value = 2;
  }
}

message Type {
  // type_id is used to describe cyclic / 'diamond' types. The identifiers are
  // only used for the duration of encoding / decoding the outermost `Value` or
  // `Type` - they are not global.
  uint32 type_id = 1;
  oneof ty {
    // If true then this type is a back-reference to a previously described
    // type with the same id.
    bool back_reference = 2;
    pod.Type pod = 3;
    bool pointer = 4;
    bool slice = 5;
    Type reference = 6;
    StructType struct = 7;
    MapType map = 8;
    ArrayType array = 9;
    bool any = 10;
  }
}

message Struct {
  Type type = 1;
  repeated Value fields = 2;
}

message StructType {
  repeated StructField fields = 1;
}

message StructField {
  Type type = 1;
  string name = 2;
}

message Array {
  Type type = 1;
  repeated Value entries = 2;
}

message ArrayType {
  Type element_type = 2;
}

message Map {
  Type type = 1;
  repeated MapEntry entries = 2;
}

message MapType {
  Type key_type = 1;
  Type value_type = 2;
}

message MapEntry {
  Value key = 1;
  Value value = 2;
}
