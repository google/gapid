// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@extension("VK_KHR_win32_surface") define VK_KHR_WIN32_SURFACE_SPEC_VERSION     5
@extension("VK_KHR_win32_surface") define VK_KHR_WIN32_SURFACE_EXTENSION_NAME             "VK_KHR_win32_surface"


// ----------------------------------------------------------------------------
// VK_KHR_win32_surface
// ----------------------------------------------------------------------------

@internal type size HINSTANCE
@internal type size HWND

@extension("VK_KHR_win32_surface")
@reserved_flags
type VkFlags VkWin32SurfaceCreateFlagsKHR

@extension("VK_KHR_win32_surface")
class VkWin32SurfaceCreateInfoKHR {
    VkStructureType                             sType
    const void*                                 pNext
    VkWin32SurfaceCreateFlagsKHR                flags
    HINSTANCE                                   hinstance
    HWND                                        hwnd
}

@no_replay
cmd void RecreateWin32SurfaceKHR(
    VkInstance instance,
    const VkWin32SurfaceCreateInfoKHR*      pCreateInfo,
    VkSurfaceKHR*                           pSurface) {
  read(pCreateInfo[0:1])
  write(pSurface[0:1])
}

@extension("VK_KHR_win32_surface")
@indirect("VkInstance")
cmd VkResult vkCreateWin32SurfaceKHR(
        VkInstance                              instance,
        const VkWin32SurfaceCreateInfoKHR*      pCreateInfo,
        const VkAllocationCallbacks*            pAllocator,
        VkSurfaceKHR*                           pSurface) {
    surface := createWin32SurfaceObject(pCreateInfo)
    
    surface.Instance = instance
    surface.Type = SURFACE_TYPE_WIN32
    
    handle := ?
    pSurface[0] = handle
    surface.VulkanHandle = handle
    Surfaces[handle] = surface

    return ?
}

sub ref!SurfaceObject createWin32SurfaceObject(const VkWin32SurfaceCreateInfoKHR* data) {
    object := new!SurfaceObject()
    _ = data[0]

    // TODO: pNext
    // TODO: window?

    return object
}
