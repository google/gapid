// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@internal
class Buffer {
  @internal u8[] Data

  // Table 21.5: Buffer Object State
  GLsizeiptr     Size        = 0
  GLenum         Usage       = GL_STATIC_DRAW
  GLbitfield     AccessFlags
  GLboolean      Mapped      = GL_FALSE
  u8*            MapPointer  = null
  GLintptr       MapOffset   = 0
  GLsizeiptr     MapLength   = 0
  @unused string Label
}

@internal
class BufferBinding {
  // Table 21.32: Atomic Counter Buffer Binding State
  // Table 21.34: Shader Storage Buffer Binding State
  // Table 21.35: Transform Feedback State
  // Table 21.36: Uniform Buffer Binding State
  BufferId   Binding
  GLintptr   Start
  GLsizeiptr Size
}

sub ref!Buffer GetBoundBufferOrError(GLenum target) {
  ctx := GetContext()
  // TODO: The error conditions are not spelled out for all commands in the spec.
  // TODO: Add back version checks.
  id := switch (target) {
    case GL_ARRAY_BUFFER: {
      // minRequiredVersion(2, 0)
      ctx.BoundBuffers.ArrayBuffer
    }
    case GL_ELEMENT_ARRAY_BUFFER: {
      // minRequiredVersion(2, 0)
      ctx.Objects.VertexArrays[ctx.BoundVertexArray].ElementArrayBuffer
    }
    case GL_COPY_READ_BUFFER: {
      // minRequiredVersion(3, 0)
      ctx.BoundBuffers.CopyReadBuffer
    }
    case GL_COPY_WRITE_BUFFER: {
      // minRequiredVersion(3, 0)
      ctx.BoundBuffers.CopyWriteBuffer
    }
    case GL_PIXEL_PACK_BUFFER: {
      // minRequiredVersion(3, 0)
      ctx.BoundBuffers.PixelPackBuffer
    }
    case GL_PIXEL_UNPACK_BUFFER: {
      // minRequiredVersion(3, 0)
      ctx.BoundBuffers.PixelUnpackBuffer
    }
    case GL_TRANSFORM_FEEDBACK_BUFFER: {
      // minRequiredVersion(3, 0)
      ctx.BoundBuffers.TransformFeedbackBuffer
    }
    case GL_UNIFORM_BUFFER: {
      // minRequiredVersion(3, 0)
      ctx.BoundBuffers.UniformBuffer
    }
    case GL_ATOMIC_COUNTER_BUFFER: {
      // minRequiredVersion(3, 1)
      ctx.BoundBuffers.AtomicCounterBuffer
    }
    case GL_DISPATCH_INDIRECT_BUFFER: {
      // minRequiredVersion(3, 1)
      ctx.BoundBuffers.DispatchIndirectBuffer
    }
    case GL_DRAW_INDIRECT_BUFFER: {
      // minRequiredVersion(3, 1)
      ctx.BoundBuffers.DrawIndirectBuffer
    }
    case GL_SHADER_STORAGE_BUFFER: {
      // minRequiredVersion(3, 1)
      ctx.BoundBuffers.ShaderStorageBuffer
    }
    case GL_TEXTURE_BUFFER: {
      // minRequiredVersion(3, 2)
      ctx.BoundBuffers.TextureBuffer
    }
    default: {
      // glErrorInvalidEnum(target)
      as!BufferId(0)
    }
  }
  if id == 0 { glErrorInvalidOperation() }
  return ctx.SharedObjects.Buffers[id]
}

@Doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindBuffer.xml","OpenGL ES 2.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glBindBuffer.xhtml","OpenGL ES 3.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glBindBuffer.xhtml","OpenGL ES 3.1")
@Doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glBindBuffer.xhtml","OpenGL ES 3.2")
cmd void glBindBuffer(GLenum target, BufferId buffer) {
  minRequiredVersion(1, 0)
  ctx := GetContext()
  switch (target) {
    case GL_ARRAY_BUFFER: {
      ctx.BoundBuffers.ArrayBuffer = buffer
    }
    case GL_ELEMENT_ARRAY_BUFFER: {
      ctx.Objects.VertexArrays[ctx.BoundVertexArray].ElementArrayBuffer = buffer
    }
    case GL_COPY_READ_BUFFER: {
      minRequiredVersion(3, 0)
      ctx.BoundBuffers.CopyReadBuffer = buffer
    }
    case GL_COPY_WRITE_BUFFER: {
      minRequiredVersion(3, 0)
      ctx.BoundBuffers.CopyWriteBuffer = buffer
    }
    case GL_PIXEL_PACK_BUFFER: {
      minRequiredVersion(3, 0)
      ctx.BoundBuffers.PixelPackBuffer = buffer
    }
    case GL_PIXEL_UNPACK_BUFFER: {
      minRequiredVersion(3, 0)
      ctx.BoundBuffers.PixelUnpackBuffer = buffer
    }
    case GL_TRANSFORM_FEEDBACK_BUFFER: {
      minRequiredVersion(3, 0)
      ctx.BoundBuffers.TransformFeedbackBuffer = buffer
    }
    case GL_UNIFORM_BUFFER: {
      minRequiredVersion(3, 0)
      ctx.BoundBuffers.UniformBuffer = buffer
    }
    case GL_ATOMIC_COUNTER_BUFFER: {
      minRequiredVersion(3, 1)
      ctx.BoundBuffers.AtomicCounterBuffer = buffer
    }
    case GL_DISPATCH_INDIRECT_BUFFER: {
      minRequiredVersion(3, 1)
      ctx.BoundBuffers.DispatchIndirectBuffer = buffer
    }
    case GL_DRAW_INDIRECT_BUFFER: {
      minRequiredVersion(3, 1)
      ctx.BoundBuffers.DrawIndirectBuffer = buffer
    }
    case GL_SHADER_STORAGE_BUFFER: {
      minRequiredVersion(3, 1)
      ctx.BoundBuffers.ShaderStorageBuffer = buffer
    }
    case GL_TEXTURE_BUFFER: {
      minRequiredVersion(3, 2)
      ctx.BoundBuffers.TextureBuffer = buffer
    }
    default: {
      glErrorInvalidEnum(target)
    }
  }

  // Create the buffer if need (after checking whether the enum is valid)
  if buffer != 0 {
    if !(buffer in ctx.SharedObjects.Buffers) {
      ctx.SharedObjects.Buffers[buffer] = new!Buffer()
    }
  }
}

@Doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glBindBufferBase.xhtml","OpenGL ES 3.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glBindBufferBase.xhtml","OpenGL ES 3.1")
@Doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glBindBufferBase.xhtml","OpenGL ES 3.2")
cmd void glBindBufferBase(GLenum target, GLuint index, BufferId buffer) {
  minRequiredVersion(3, 0)
  ctx := GetContext()
  size := switch (buffer in ctx.SharedObjects.Buffers) {
    case true:  ctx.SharedObjects.Buffers[buffer].Size
    case false: as!GLsizeiptr(0)
  }
  BindBufferRange(target, index, buffer, 0, size)
}

@Doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glBindBufferRange.xhtml","OpenGL ES 3.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glBindBufferRange.xhtml","OpenGL ES 3.1")
@Doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glBindBufferRange.xhtml","OpenGL ES 3.2")
cmd void glBindBufferRange(GLenum     target,
                           GLuint     index,
                           BufferId   buffer,
                           GLintptr   offset,
                           GLsizeiptr size) {
  minRequiredVersion(3, 0)
  BindBufferRange(target, index, buffer, offset, size)
}

sub void BindBufferRange(GLenum     target,
                         GLuint     index,
                         BufferId   buffer,
                         GLintptr   offset,
                         GLsizeiptr size) {
  ctx := GetContext()
  bufferBinding := BufferBinding(
    Binding: buffer,
    Start:   offset,
    Size:    size
  )
  switch (target) {
    case GL_TRANSFORM_FEEDBACK_BUFFER: {
      minRequiredVersion(3, 0)
      ctx.BoundBuffers.TransformFeedbackBuffer = buffer
      GetBoundTransformFeedback().Buffers[index] = bufferBinding
    }
    case GL_UNIFORM_BUFFER: {
      minRequiredVersion(3, 0)
      ctx.BoundBuffers.UniformBuffer = buffer
      ctx.BoundBuffers.UniformBuffers[index] = bufferBinding
    }
    case GL_ATOMIC_COUNTER_BUFFER: {
      minRequiredVersion(3, 1)
      ctx.BoundBuffers.AtomicCounterBuffer = buffer
      ctx.BoundBuffers.AtomicCounterBuffers[index] = bufferBinding
    }
    case GL_SHADER_STORAGE_BUFFER: {
      minRequiredVersion(3, 1)
      ctx.BoundBuffers.ShaderStorageBuffer = buffer
      ctx.BoundBuffers.ShaderStorageBuffers[index] = bufferBinding
    }
    default: {
      glErrorInvalidEnum(target)
    }
  }

  // Create the buffer if need (after checking whether the enum is valid)
  if buffer != 0 {
    if !(buffer in ctx.SharedObjects.Buffers) {
      ctx.SharedObjects.Buffers[buffer] = new!Buffer()
    }
  }
}

@Doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBufferData.xml","OpenGL ES 2.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glBufferData.xhtml","OpenGL ES 3.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glBufferData.xhtml","OpenGL ES 3.1")
@Doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glBufferData.xhtml","OpenGL ES 3.2")
cmd void glBufferData(GLenum target, GLsizeiptr size, BufferDataPointer data, GLenum usage) {
  minRequiredVersion(1, 0)
  b := GetBoundBufferOrError(target)
  switch (usage) {
    case GL_DYNAMIC_DRAW, GL_STATIC_DRAW, GL_STREAM_DRAW: {
      // version 2.0
    }
    case GL_DYNAMIC_COPY, GL_DYNAMIC_READ, GL_STATIC_COPY, GL_STATIC_READ, GL_STREAM_COPY,
        GL_STREAM_READ: {
      minRequiredVersion(3, 0)
    }
    default: {
      glErrorInvalidEnum(usage)
    }
  }
  if size < 0 { glErrorInvalidValue() }

  b.Data = switch (data != null) {
    case true:  clone(as!u8*(data)[0:size])
    case false: make!u8(size)
  }
  b.Size = size
  b.Usage = usage
}

@Doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBufferSubData.xml","OpenGL ES 2.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glBufferSubData.xhtml","OpenGL ES 3.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glBufferSubData.xhtml","OpenGL ES 3.1")
@Doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glBufferSubData.xhtml","OpenGL ES 3.2")
cmd void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, BufferDataPointer data) {
  minRequiredVersion(1, 0)
  b := GetBoundBufferOrError(target)
  if (offset < 0) || (size < 0) { glErrorInvalidValue() }
  if (as!GLsizeiptr(offset) + size) > b.Size { glErrorInvalidValue() }
  copy(b.Data[offset:as!GLsizeiptr(offset) + size], as!u8*(data)[0:size])
}

@Doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glCopyBufferSubData.xhtml","OpenGL ES 3.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glCopyBufferSubData.xhtml","OpenGL ES 3.1")
@Doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glCopyBufferSubData.xhtml","OpenGL ES 3.2")
cmd void glCopyBufferSubData(GLenum     readTarget,
                             GLenum     writeTarget,
                             GLintptr   readOffset,
                             GLintptr   writeOffset,
                             GLsizeiptr size) {
  minRequiredVersion(3, 0)
  CopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size)
}

sub void CopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  _ = GetBoundBufferOrError(readTarget)
  _ = GetBoundBufferOrError(writeTarget)
  _ = readOffset // TODO
  _ = writeOffset // TODO
  _ = size // TODO
}

@Doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glDeleteBuffers.xml","OpenGL ES 2.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glDeleteBuffers.xhtml","OpenGL ES 3.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glDeleteBuffers.xhtml","OpenGL ES 3.1")
@Doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glDeleteBuffers.xhtml","OpenGL ES 3.2")
cmd void glDeleteBuffers(GLsizei count, const BufferId* buffers) {
  minRequiredVersion(1, 0)
  if count < 0 { glErrorInvalidValue() }

  b := buffers[0:count]
  ctx := GetContext()
  for i in (0 .. count) {
    id := b[i]
    if id != 0 {
      delete(ctx.SharedObjects.Buffers, id)
    }
  }
}

@Doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenBuffers.xml","OpenGL ES 2.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGenBuffers.xhtml","OpenGL ES 3.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGenBuffers.xhtml","OpenGL ES 3.1")
@Doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGenBuffers.xhtml","OpenGL ES 3.2")
cmd void glGenBuffers(GLsizei count, BufferId* buffers) {
  minRequiredVersion(1, 0)
  if count < 0 { glErrorInvalidValue() }

  b := buffers[0:count]
  ctx := GetContext()
  for i in (0 .. count) {
    id := as!BufferId(?)
    ctx.SharedObjects.Buffers[id] = new!Buffer()
    b[i] = id
  }
}

@Doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetBufferParameter.xhtml","OpenGL ES 3.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetBufferParameter.xhtml","OpenGL ES 3.1")
@Doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetBufferParameter.xhtml","OpenGL ES 3.2")
cmd void glGetBufferParameteri64v(GLenum target, GLenum parameter, GLint64* value) {
  minRequiredVersion(3, 0)
  GetBufferParameter!GLint64(target, parameter, value)
}

@Doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetBufferParameteriv.xml","OpenGL ES 2.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetBufferParameter.xhtml","OpenGL ES 3.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetBufferParameter.xhtml","OpenGL ES 3.1")
@Doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetBufferParameter.xhtml","OpenGL ES 3.2")
cmd void glGetBufferParameteriv(GLenum target, GLenum parameter, GLint* value) {
  minRequiredVersion(1, 0)
  GetBufferParameter!GLint(target, parameter, value)
}

sub void GetBufferParameter!T(GLenum target, GLenum parameter, T* value) {
  b := GetBoundBufferOrError(target)
  switch (parameter) {
    case GL_BUFFER_SIZE: {
      minRequiredVersion(2, 0)
      value[0] = as!T(b.Size)
    }
    case GL_BUFFER_USAGE: {
      minRequiredVersion(2, 0)
      value[0] = as!T(b.Usage)
    }
    case GL_BUFFER_ACCESS_FLAGS: {
      minRequiredVersion(3, 0)
      value[0] = as!T(b.AccessFlags)
    }
    case GL_BUFFER_MAPPED: {
      minRequiredVersion(3, 0)
      value[0] = as!T(b.Mapped)
    }
    case GL_BUFFER_MAP_LENGTH: {
      minRequiredVersion(3, 0)
      value[0] = as!T(b.MapLength)
    }
    case GL_BUFFER_MAP_OFFSET: {
      minRequiredVersion(3, 0)
      value[0] = as!T(b.MapOffset)
    }
    default: {
      glErrorInvalidEnum(parameter)
    }
  }
}

@Doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetBufferPointerv.xhtml","OpenGL ES 3.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetBufferPointerv.xhtml","OpenGL ES 3.1")
@Doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetBufferPointerv.xhtml","OpenGL ES 3.2")
cmd void glGetBufferPointerv(GLenum target, GLenum pname, void** params) {
  minRequiredVersion(3, 0)
  GetBufferPointerv(target, pname, params)
}

sub void GetBufferPointerv(GLenum target, GLenum pname, void** params) {
  switch (target) {
    case GL_ARRAY_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_ELEMENT_ARRAY_BUFFER,
        GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER,
        GL_UNIFORM_BUFFER: {
      // version 3.0
    }
    case GL_ATOMIC_COUNTER_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_DRAW_INDIRECT_BUFFER,
        GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER: {
      minRequiredVersion(3, 2)
    }
    default: {
      glErrorInvalidEnum(target)
    }
  }
  switch (pname) {
    case GL_BUFFER_MAP_POINTER: {
      // version 3.0
    }
    default: {
      glErrorInvalidEnum(pname)
    }
  }
  // TODO

  write(params[0:1])
}

@Doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glIsBuffer.xml","OpenGL ES 2.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glIsBuffer.xhtml","OpenGL ES 3.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glIsBuffer.xhtml","OpenGL ES 3.1")
@Doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glIsBuffer.xhtml","OpenGL ES 3.2")
cmd GLboolean glIsBuffer(BufferId buffer) {
  minRequiredVersion(1, 0)

  ctx := GetContext()
  return as!GLboolean(buffer in ctx.SharedObjects.Buffers)
}

// This command only exits in desktop GL - but we need the signature in compat.
cmd void* glMapBuffer(GLenum target, GLenum access) {
  ptr := ?
  MapBuffer(target, access, as!u8*(ptr))
  return ptr
}

sub void MapBuffer(GLenum target, GLenum access, u8* ptr) {
  b := GetBoundBufferOrError(target)
  accessBits := switch (access) {
    case GL_READ_ONLY:  GL_MAP_READ_BIT
    case GL_WRITE_ONLY: GL_MAP_WRITE_BIT
    case GL_READ_WRITE: GL_MAP_READ_BIT | GL_MAP_WRITE_BIT
  }
  MapBufferRange(target, 0 /* offset */, b.Size, accessBits, as!u8*(ptr))
}

@Doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glMapBufferRange.xhtml","OpenGL ES 3.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glMapBufferRange.xhtml","OpenGL ES 3.1")
@Doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glMapBufferRange.xhtml","OpenGL ES 3.2")
cmd void* glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  minRequiredVersion(3, 0)
  ptr := ?
  MapBufferRange(target, offset, length, access, as!u8*(ptr))
  return ptr
}

sub void MapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, u8* ptr) {
  b := GetBoundBufferOrError(target)
  if (offset < 0) || (length < 0) || ((as!GLsizeiptr(offset) + length) > b.Size) { glErrorInvalidValue() }
  supportsBits(access, GL_MAP_FLUSH_EXPLICIT_BIT | GL_MAP_INVALIDATE_BUFFER_BIT | GL_MAP_INVALIDATE_RANGE_BIT | GL_MAP_READ_BIT | GL_MAP_UNSYNCHRONIZED_BIT | GL_MAP_WRITE_BIT)
  if b.Mapped == GL_TRUE { glErrorInvalidOperation() }

  b.Mapped = GL_TRUE
  b.AccessFlags = access
  b.MapPointer = ptr
  b.MapOffset = offset
  b.MapLength = length
  mapMemory(ptr[0:length])

  if GL_MAP_READ_BIT in access {
    copy(ptr[0:length], b.Data[offset:offset + as!GLintptr(length)])
  }
}

@Doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glMapBufferRange.xhtml","OpenGL ES 3.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glMapBufferRange.xhtml","OpenGL ES 3.1")
@Doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glMapBufferRange.xhtml","OpenGL ES 3.2")
cmd GLboolean glUnmapBuffer(GLenum target) {
  minRequiredVersion(3, 0)
  UnmapBuffer(target)
  return ?
}

sub void UnmapBuffer(GLenum target) {
  b := GetBoundBufferOrError(target)
  if b.Mapped == GL_FALSE { glErrorInvalidOperation() }
  if (GL_MAP_WRITE_BIT in b.AccessFlags) && (!(GL_MAP_FLUSH_EXPLICIT_BIT in b.AccessFlags)) {
    copyLength := as!GLintptr(b.MapLength)
    copy(b.Data[b.MapOffset:b.MapOffset + copyLength], b.MapPointer[0:copyLength])
  }
  unmapMemory(b.MapPointer[0:b.MapLength])
  b.Mapped = GL_FALSE
  b.AccessFlags = as!GLbitfield(0)
  b.MapPointer = null
  b.MapOffset = 0
  b.MapLength = 0
}

@Doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glFlushMappedBufferRange.xhtml","OpenGL ES 3.0")
@Doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glFlushMappedBufferRange.xhtml","OpenGL ES 3.1")
@Doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glFlushMappedBufferRange.xhtml","OpenGL ES 3.2")
cmd void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) {
  minRequiredVersion(3, 0)
  FlushMappedBufferRange(target, offset, length)
}

sub void FlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) {
  b := GetBoundBufferOrError(target)
  if b.Mapped == GL_FALSE { glErrorInvalidOperation() }
  if !(GL_MAP_FLUSH_EXPLICIT_BIT in b.AccessFlags) { glErrorInvalidOperation() }
  if (offset < 0) || (length < 0) || ((as!GLsizeiptr(offset) + length) > b.MapLength) { glErrorInvalidValue() }
  dstOffset := b.MapOffset + offset
  copy(b.Data[dstOffset:dstOffset + as!GLintptr(length)], b.MapPointer[offset:offset + as!GLintptr(length)])
}
