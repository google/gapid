// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// StaticContextState is an atom extra used to describe a context's non-changing state.
@internal @serialize
class StaticContextState {
  Constants Constants
}

@post_fence
extern ref!StaticContextState GetEGLStaticContextState(EGLDisplay display, EGLSurface surface, EGLContext context)

// DynamicContextState is an atom extra used to describe a context's potentially changing state.
@internal @serialize
class DynamicContextState {
  GLsizei BackbufferWidth
  GLsizei BackbufferHeight
  GLenum  BackbufferColorFmt
  GLenum  BackbufferDepthFmt
  GLenum  BackbufferStencilFmt
  bool    ResetViewportScissor
  bool    PreserveBuffersOnSwap
  // TODO: Currently unused
  @unused GLuint RedSize
  @unused GLuint GreenSize
  @unused GLuint BlueSize
  @unused GLuint AlphaSize
  @unused GLuint DepthSize
  @unused GLuint StencilSize
}

@post_fence
extern ref!DynamicContextState GetEGLDynamicContextState(EGLDisplay display, EGLSurface surface, EGLContext context)

// ProgramInfo is an atom extra used to describe linked shader program.
@internal @serialize
class ProgramInfo {
  GLboolean                             LinkStatus
  string                                InfoLog
  map!(AttributeIndex, ActiveAttribute) ActiveAttributes
  map!(UniformIndex, ActiveUniform)     ActiveUniforms
}

@post_fence
extern ref!ProgramInfo GetProgramInfoExtra(ProgramId programId)

sub void ApplyProgramInfoExtra(ProgramId programId, ref!ProgramInfo info) {
  if (info != null) {
    ctx := GetContext()
    program := ctx.SharedObjects.Programs[programId]
    program.LinkStatus = info.LinkStatus
    program.InfoLog = info.InfoLog
    program.ActiveAttributes = null
    program.ActiveUniforms = null
    program.Uniforms = null
    for i in (0 .. as!AttributeIndex(len(info.ActiveAttributes))) {
      program.ActiveAttributes[i] = info.ActiveAttributes[i]
    }
    for i in (0 .. as!UniformIndex(len(info.ActiveUniforms))) {
      u := info.ActiveUniforms[i]
      program.ActiveUniforms[i] = u
      for j in (0 .. as!UniformLocation(u.ArraySize)) {
        // TODO: Locations do not have to be consecutive.
        program.Uniforms[u.Location + j] = Uniform(Value: make!u8(0),Type:  u.Type)
      }
    }
  }
}

// DeviceInfo is an atom extra used to describe information about the device producing the trace.
@internal @serialize @unused
class DeviceInfo {
  string ProductManufacturer
  string ProductModel
  string BuildDescription
  string BuildVersionRelease
  string BuildVersionSdk
  string Debuggable
  string AbiList
}