// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

sub u32 imageSize(u32 width, u32 height, GLenum format, GLenum ty) {
  ups := uncompressedPixelSize(format, ty)

  return switch (ty) {
    case GL_COMPRESSED_R11_EAC, GL_COMPRESSED_SIGNED_R11_EAC,
        GL_COMPRESSED_RGB8_ETC2, GL_COMPRESSED_SRGB8_ETC2,
        GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2, GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: {
      ((width + 3) / 4) * ((height + 3) / 4) * 8
    }
    case GL_COMPRESSED_RG11_EAC, GL_COMPRESSED_SIGNED_RG11_EAC,
        GL_COMPRESSED_RGBA8_ETC2_EAC, GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,
        GL_COMPRESSED_RGBA_ASTC_4x4, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4: {
      ((width + 3) / 4) * ((height + 3) / 4) * 16
    }
    case GL_COMPRESSED_RGBA_ASTC_5x4, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4: {
      ((width + 4) / 5) * ((height + 3) / 4) * 16
    }
    case GL_COMPRESSED_RGBA_ASTC_5x5, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5: {
      ((width + 4) / 5) * ((height + 4) / 5) * 16
    }
    case GL_COMPRESSED_RGBA_ASTC_6x5, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5: {
      ((width + 5) / 6) * ((height + 4) / 5) * 16
    }
    case GL_COMPRESSED_RGBA_ASTC_6x6, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6: {
      ((width + 5) / 6) * ((height + 5) / 6) * 16
    }
    case GL_COMPRESSED_RGBA_ASTC_8x5, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5: {
      ((width + 7) / 8) * ((height + 4) / 5) * 16
    }
    case GL_COMPRESSED_RGBA_ASTC_8x6, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6: {
      ((width + 7) / 8) * ((height + 5) / 6) * 16
    }
    case GL_COMPRESSED_RGBA_ASTC_8x8, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8: {
      ((width + 7) / 8) * ((height + 7) / 8) * 16
    }
    case GL_COMPRESSED_RGBA_ASTC_10x5, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5: {
      ((width + 9) / 10) * ((height + 4) / 5) * 16
    }
    case GL_COMPRESSED_RGBA_ASTC_10x6, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6: {
      ((width + 9) / 10) * ((height + 5) / 6) * 16
    }
    case GL_COMPRESSED_RGBA_ASTC_10x8, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8: {
      ((width + 9) / 10) * ((height + 7) / 8) * 16
    }
    case GL_COMPRESSED_RGBA_ASTC_10x10, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10: {
      ((width + 9) / 10) * ((height + 9) / 10) * 16
    }
    case GL_COMPRESSED_RGBA_ASTC_12x10, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10: {
      ((width + 11) / 12) * ((height + 9) / 10) * 16
    }
    case GL_COMPRESSED_RGBA_ASTC_12x12, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12: {
      ((width + 11) / 12) * ((height + 11) / 12) * 16
    }
    case GL_ETC1_RGB8_OES: {
      // TODO: requiresExtension(GL_OES_compressed_ETC1_RGB8_texture)
      ((width + 3) / 4) * ((height + 3) / 4) * 8
    }
    default: {
      width * height * ups
    }
  }
}

// uncompressedPixelSize returns the pixel data size in bytes for the given format and type.
sub u32 uncompressedPixelSize(GLenum format, GLenum ty) {
  num_components := componentCount(format)

  return switch ty {
    case GL_UNSIGNED_BYTE:                  num_components * 1
    case GL_BYTE:                           num_components * 1
    case GL_UNSIGNED_SHORT:                 num_components * 2
    case GL_SHORT:                          num_components * 2
    case GL_UNSIGNED_INT:                   num_components * 4
    case GL_INT:                            num_components * 4
    case GL_HALF_FLOAT:                     num_components * 2
    case GL_HALF_FLOAT_OES:                 num_components * 2
    case GL_FLOAT:                          num_components * 4
    case GL_UNSIGNED_SHORT_5_6_5:           2
    case GL_UNSIGNED_SHORT_4_4_4_4:         2
    case GL_UNSIGNED_SHORT_5_5_5_1:         2
    case GL_UNSIGNED_INT_2_10_10_10_REV:    4
    case GL_UNSIGNED_INT_10F_11F_11F_REV:   4
    case GL_UNSIGNED_INT_5_9_9_9_REV:       4
    case GL_UNSIGNED_INT_24_8:              4
    case GL_FLOAT_32_UNSIGNED_INT_24_8_REV: 8
    default:                                0 // TODO: What should we do in this case?
  }
}


// componentCount returns the number of components in the given format.
sub u32 componentCount(GLenum format) {
  return switch format {
    case GL_ALPHA:           1
    case GL_LUMINANCE:       1
    case GL_LUMINANCE_ALPHA: 2
    case GL_RED:             1
    case GL_RED_INTEGER:     1
    case GL_RG:              2
    case GL_RG_INTEGER:      2
    case GL_RGB:             3
    case GL_RGB_INTEGER:     3
    case GL_RGBA:            4
    case GL_RGBA_INTEGER:    4
    case GL_DEPTH_COMPONENT: 1
    case GL_DEPTH_STENCIL:   2
    case GL_STENCIL_INDEX:   1
    case GL_BGRA_EXT:        4
  }
}

// Strip any size information from a format.
sub GLenum getUnsizedFormatFromSizedFormat(GLenum sizedFormat) {
  return switch (sizedFormat) {
    case GL_ALPHA8_EXT:
      GL_ALPHA

    case GL_R8, GL_R8_SNORM,
        GL_R16, GL_R16_SNORM,
        GL_R16F, GL_R32F,
        GL_COMPRESSED_R11_EAC, GL_COMPRESSED_SIGNED_R11_EAC:
      GL_RED

    case GL_R8UI, GL_R8I,
        GL_R16UI, GL_R16I,
        GL_R32UI, GL_R32I:
      GL_RED_INTEGER

    case GL_RG8, GL_RG8_SNORM,
        GL_RG16, GL_RG16_SNORM,
        GL_RG16F, GL_RG32F,
        GL_COMPRESSED_RG11_EAC, GL_COMPRESSED_SIGNED_RG11_EAC:
      GL_RG

    case GL_RG8UI, GL_RG8I,
        GL_RG16UI, GL_RG16I,
        GL_RG32UI, GL_RG32I:
      GL_RG_INTEGER

    case GL_RGB8, GL_SRGB8, GL_RGB8_SNORM,
        GL_RGB16, GL_RGB16_SNORM,
        GL_RGB565, GL_R11F_G11F_B10F, GL_RGB9_E5,
        GL_RGB16F, GL_RGB32F,
        GL_COMPRESSED_RGB8_ETC2, GL_COMPRESSED_SRGB8_ETC2, GL_ETC1_RGB8_OES:
      GL_RGB

    case GL_RGB8UI, GL_RGB8I,
        GL_RGB16UI, GL_RGB16I,
        GL_RGB32UI, GL_RGB32I:
      GL_RGB_INTEGER

    case GL_RGBA8, GL_SRGB8_ALPHA8, GL_RGBA8_SNORM,
        GL_RGBA16, GL_RGBA16_SNORM,
        GL_RGB5_A1, GL_RGBA4, GL_RGB10_A2,
        GL_RGBA16F, GL_RGBA32F,
        GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2, GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,
        GL_COMPRESSED_RGBA8_ETC2_EAC, GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,
        GL_COMPRESSED_RGBA_ASTC_4x4, GL_COMPRESSED_RGBA_ASTC_5x4, GL_COMPRESSED_RGBA_ASTC_5x5,
        GL_COMPRESSED_RGBA_ASTC_6x5, GL_COMPRESSED_RGBA_ASTC_6x6, GL_COMPRESSED_RGBA_ASTC_8x5,
        GL_COMPRESSED_RGBA_ASTC_8x6, GL_COMPRESSED_RGBA_ASTC_8x8, GL_COMPRESSED_RGBA_ASTC_10x5,
        GL_COMPRESSED_RGBA_ASTC_10x6, GL_COMPRESSED_RGBA_ASTC_10x8, GL_COMPRESSED_RGBA_ASTC_10x10,
        GL_COMPRESSED_RGBA_ASTC_12x10, GL_COMPRESSED_RGBA_ASTC_12x12,
        GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4,
        GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5,
        GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5,
        GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8,
        GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6,
        GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10,
        GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10, GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12:
      GL_RGBA

    case GL_RGBA8UI, GL_RGBA8I,
        GL_RGB10_A2UI,
        GL_RGBA16UI, GL_RGBA16I,
        GL_RGBA32I, GL_RGBA32UI:
      GL_RGBA_INTEGER

    case GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32F:
      GL_DEPTH_COMPONENT

    case GL_DEPTH24_STENCIL8, GL_DEPTH32F_STENCIL8:
      GL_DEPTH_STENCIL

    default:
      sizedFormat
  }
}

sub GLenum getTypeFromSizedFormat(GLenum sizedFormat) {
  return switch (sizedFormat) {
    case GL_ALPHA8_EXT:
      GL_UNSIGNED_BYTE

    case GL_R8, GL_R8UI,
        GL_RG8, GL_RG8UI,
        GL_RGB8, GL_SRGB8, GL_RGB8UI,
        GL_RGBA8, GL_SRGB8_ALPHA8, GL_RGBA8UI,
        GL_STENCIL_INDEX8, GL_BGRA_EXT:
      GL_UNSIGNED_BYTE

    case GL_R8_SNORM, GL_R8I,
        GL_RG8_SNORM, GL_RG8I, GL_RGB8_SNORM, GL_RGB8I,
        GL_RGBA8_SNORM, GL_RGBA8I:
      GL_BYTE

    case GL_R16, GL_R16UI,
        GL_RG16, GL_RG16UI,
        GL_RGB16, GL_RGB16UI,
        GL_RGBA16, GL_RGBA16UI,
        GL_DEPTH_COMPONENT16:
      GL_UNSIGNED_SHORT

    case GL_R16_SNORM, GL_R16I,
        GL_RG16_SNORM, GL_RG16I,
        GL_RGB16_SNORM, GL_RGB16I,
        GL_RGBA16_SNORM, GL_RGBA16I:
      GL_SHORT

    case GL_RGB565:
      GL_UNSIGNED_SHORT_5_6_5

    case GL_RGB5_A1:
      GL_UNSIGNED_SHORT_5_5_5_1

    case GL_RGBA4:
      GL_UNSIGNED_SHORT_4_4_4_4

    case GL_R32UI, GL_RG32UI, GL_RGB32UI, GL_RGBA32UI, GL_DEPTH_COMPONENT24:
      GL_UNSIGNED_INT

    case GL_R32I, GL_RG32I, GL_RGB32I, GL_RGBA32I:
      GL_INT

    case GL_R11F_G11F_B10F:
      GL_UNSIGNED_INT_10F_11F_11F_REV

    case GL_RGB9_E5:
      GL_UNSIGNED_INT_5_9_9_9_REV

    case GL_RGB10_A2:
      GL_UNSIGNED_INT_2_10_10_10_REV

    case GL_RGB10_A2UI:
      GL_UNSIGNED_INT_2_10_10_10_REV

    case GL_DEPTH24_STENCIL8:
      GL_UNSIGNED_INT_24_8

    case GL_R16F, GL_RG16F, GL_RGB16F, GL_RGBA16F:
      GL_HALF_FLOAT

    case GL_R32F, GL_RG32F, GL_RGB32F, GL_RGBA32F, GL_DEPTH_COMPONENT32F:
      GL_FLOAT

    case GL_DEPTH32F_STENCIL8:
      GL_FLOAT_32_UNSIGNED_INT_24_8_REV

    default:
      sizedFormat
  }
}


