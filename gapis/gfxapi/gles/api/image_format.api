// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@internal
class SizedFormatInfo {
  // "Internal format" with explicit memory size. Includes compressed formats.
  // (RGB565, RGBA8, R16UI, DEPTH24_STENCIL8, COMPRESSED_SRGB8_ETC2, ...)
  GLenum SizedFormat

  // "Base format" which specifies just the channels. Includes the _INTEGER suffix.
  // This must be just the {R,G,B,A,D,S,INTEGER} part of the sized format above.
  // (RGB, RGBA, RED, DEPTH_STENCIL, RGB_INTEGER, ...)
  GLenum UnsizedFormat

  // Type of either one channel or the whole pixel. NONE for compressed formats.
  // This must be just the data type part of the sized format above (exactly).
  // For example, RGB565 must use UNSIGNED_SHORT_5_6_5, not UNSIGNED_BYTE.
  // (UNSIGNED_BYTE, FLOAT, UNSIGNED_SHORT_5_6_5...)
  GLenum DataType

  // True if the data is converted from sRGB to liner space by the sampler.
  // Note that GL does not care about colour spaces, and colour textures
  // will generally contain sRGB content even if this flag is off.
  // Thus, this flag just allows sRGB conscious developer to save a few
  // fragment shader instructions by doing the conversion in texture unit.
  bool SRGB

  // Information about the compression algorithm
  CompressionAlgorithm Compression
  u32                  BlockWidth
  u32                  BlockHeight
  u32                  BlockSize
}

@internal
enum CompressionAlgorithm {
  Uncompressed = 0,
  ETC1         = 1,
  ETC2         = 2,
  S3           = 3,
  ASTC         = 4,
  ATC          = 5,
  EAC          = 6,
}

// uncompressedImageSize returns image size based on given format and type.
// TODO: Users of this function generally ignore packing/unpacking rules.
sub u32 uncompressedImageSize(GLsizei width, GLsizei height, GLenum format, GLenum ty) {
  return as!u32(width) * as!u32(height) * uncompressedPixelSize(format, ty)
}

// uncompressedPixelSize returns the pixel data size in bytes for the given format and type.
sub u32 uncompressedPixelSize(GLenum format, GLenum ty) {
  num_components := componentCount(format)

  return switch ty {
    case GL_UNSIGNED_BYTE:                  num_components * 1
    case GL_BYTE:                           num_components * 1
    case GL_UNSIGNED_SHORT:                 num_components * 2
    case GL_SHORT:                          num_components * 2
    case GL_UNSIGNED_INT:                   num_components * 4
    case GL_INT:                            num_components * 4
    case GL_HALF_FLOAT:                     num_components * 2
    case GL_HALF_FLOAT_OES:                 num_components * 2
    case GL_FLOAT:                          num_components * 4
    case GL_UNSIGNED_SHORT_5_6_5:           2
    case GL_UNSIGNED_SHORT_4_4_4_4:         2
    case GL_UNSIGNED_SHORT_5_5_5_1:         2
    case GL_UNSIGNED_INT_2_10_10_10_REV:    4
    case GL_UNSIGNED_INT_10F_11F_11F_REV:   4
    case GL_UNSIGNED_INT_5_9_9_9_REV:       4
    case GL_UNSIGNED_INT_24_8:              4
    case GL_FLOAT_32_UNSIGNED_INT_24_8_REV: 8
    default:                                0 // TODO: What should we do in this case?
  }
}


// componentCount returns the number of components in the given format.
sub u32 componentCount(GLenum format) {
  return switch format {
    case GL_ALPHA:           1
    case GL_LUMINANCE:       1
    case GL_LUMINANCE_ALPHA: 2
    case GL_RED:             1
    case GL_RED_INTEGER:     1
    case GL_RG:              2
    case GL_RG_INTEGER:      2
    case GL_RGB:             3
    case GL_RGB_INTEGER:     3
    case GL_RGBA:            4
    case GL_RGBA_INTEGER:    4
    case GL_DEPTH_COMPONENT: 1
    case GL_DEPTH_STENCIL:   2
    case GL_STENCIL_INDEX:   1
    case GL_BGRA_EXT:        4
  }
}

sub SizedFormatInfo getSizedFormatInfo(GLenum sf) {
  // Give the constant name for clarity
  sRGB := true
  linear := false
  return switch (sf) {
    // Uncompressed colour formats
    case GL_ALPHA8_EXT:     SizedFormatInfo(sf, GL_ALPHA, GL_UNSIGNED_BYTE)
    case GL_R11F_G11F_B10F: SizedFormatInfo(sf, GL_RGB, GL_UNSIGNED_INT_10F_11F_11F_REV)
    case GL_R16:            SizedFormatInfo(sf, GL_RED, GL_UNSIGNED_SHORT)
    case GL_R16F:           SizedFormatInfo(sf, GL_RED, GL_HALF_FLOAT)
    case GL_R16I:           SizedFormatInfo(sf, GL_RED_INTEGER, GL_SHORT)
    case GL_R16UI:          SizedFormatInfo(sf, GL_RED_INTEGER, GL_UNSIGNED_SHORT)
    case GL_R16_SNORM:      SizedFormatInfo(sf, GL_RED, GL_SHORT)
    case GL_R32F:           SizedFormatInfo(sf, GL_RED, GL_FLOAT)
    case GL_R32I:           SizedFormatInfo(sf, GL_RED_INTEGER, GL_INT)
    case GL_R32UI:          SizedFormatInfo(sf, GL_RED_INTEGER, GL_UNSIGNED_INT)
    case GL_R8:             SizedFormatInfo(sf, GL_RED, GL_UNSIGNED_BYTE)
    case GL_R8I:            SizedFormatInfo(sf, GL_RED_INTEGER, GL_BYTE)
    case GL_R8UI:           SizedFormatInfo(sf, GL_RED_INTEGER, GL_UNSIGNED_BYTE)
    case GL_R8_SNORM:       SizedFormatInfo(sf, GL_RED, GL_BYTE)
    case GL_RG16:           SizedFormatInfo(sf, GL_RG, GL_UNSIGNED_SHORT)
    case GL_RG16F:          SizedFormatInfo(sf, GL_RG, GL_HALF_FLOAT)
    case GL_RG16I:          SizedFormatInfo(sf, GL_RG_INTEGER, GL_SHORT)
    case GL_RG16UI:         SizedFormatInfo(sf, GL_RG_INTEGER, GL_UNSIGNED_SHORT)
    case GL_RG16_SNORM:     SizedFormatInfo(sf, GL_RG, GL_SHORT)
    case GL_RG32F:          SizedFormatInfo(sf, GL_RG, GL_FLOAT)
    case GL_RG32I:          SizedFormatInfo(sf, GL_RG_INTEGER, GL_INT)
    case GL_RG32UI:         SizedFormatInfo(sf, GL_RG_INTEGER, GL_UNSIGNED_INT)
    case GL_RG8:            SizedFormatInfo(sf, GL_RG, GL_UNSIGNED_BYTE)
    case GL_RG8I:           SizedFormatInfo(sf, GL_RG_INTEGER, GL_BYTE)
    case GL_RG8UI:          SizedFormatInfo(sf, GL_RG_INTEGER, GL_UNSIGNED_BYTE)
    case GL_RG8_SNORM:      SizedFormatInfo(sf, GL_RG, GL_BYTE)
    case GL_RGB10_A2:       SizedFormatInfo(sf, GL_RGBA, GL_UNSIGNED_INT_2_10_10_10_REV)
    case GL_RGB10_A2UI:     SizedFormatInfo(sf, GL_RGBA_INTEGER, GL_UNSIGNED_INT_2_10_10_10_REV)
    case GL_RGB16:          SizedFormatInfo(sf, GL_RGB, GL_UNSIGNED_SHORT)
    case GL_RGB16F:         SizedFormatInfo(sf, GL_RGB, GL_HALF_FLOAT)
    case GL_RGB16I:         SizedFormatInfo(sf, GL_RGB_INTEGER, GL_SHORT)
    case GL_RGB16UI:        SizedFormatInfo(sf, GL_RGB_INTEGER, GL_UNSIGNED_SHORT)
    case GL_RGB16_SNORM:    SizedFormatInfo(sf, GL_RGB, GL_SHORT)
    case GL_RGB32F:         SizedFormatInfo(sf, GL_RGB, GL_FLOAT)
    case GL_RGB32I:         SizedFormatInfo(sf, GL_RGB_INTEGER, GL_INT)
    case GL_RGB32UI:        SizedFormatInfo(sf, GL_RGB_INTEGER, GL_UNSIGNED_INT)
    case GL_RGB565:         SizedFormatInfo(sf, GL_RGB, GL_UNSIGNED_SHORT_5_6_5)
    case GL_RGB5_A1:        SizedFormatInfo(sf, GL_RGBA, GL_UNSIGNED_SHORT_5_5_5_1)
    case GL_RGB8:           SizedFormatInfo(sf, GL_RGB, GL_UNSIGNED_BYTE)
    case GL_RGB8I:          SizedFormatInfo(sf, GL_RGB_INTEGER, GL_BYTE)
    case GL_RGB8UI:         SizedFormatInfo(sf, GL_RGB_INTEGER, GL_UNSIGNED_BYTE)
    case GL_RGB8_SNORM:     SizedFormatInfo(sf, GL_RGB, GL_BYTE)
    case GL_RGB9_E5:        SizedFormatInfo(sf, GL_RGB, GL_UNSIGNED_INT_5_9_9_9_REV)
    case GL_RGBA16:         SizedFormatInfo(sf, GL_RGBA, GL_UNSIGNED_SHORT)
    case GL_RGBA16F:        SizedFormatInfo(sf, GL_RGBA, GL_HALF_FLOAT)
    case GL_RGBA16I:        SizedFormatInfo(sf, GL_RGBA_INTEGER, GL_SHORT)
    case GL_RGBA16UI:       SizedFormatInfo(sf, GL_RGBA_INTEGER, GL_UNSIGNED_SHORT)
    case GL_RGBA16_SNORM:   SizedFormatInfo(sf, GL_RGBA, GL_SHORT)
    case GL_RGBA32F:        SizedFormatInfo(sf, GL_RGBA, GL_FLOAT)
    case GL_RGBA32I:        SizedFormatInfo(sf, GL_RGBA_INTEGER, GL_INT)
    case GL_RGBA32UI:       SizedFormatInfo(sf, GL_RGBA_INTEGER, GL_UNSIGNED_INT)
    case GL_RGBA4:          SizedFormatInfo(sf, GL_RGBA, GL_UNSIGNED_SHORT_4_4_4_4)
    case GL_RGBA8:          SizedFormatInfo(sf, GL_RGBA, GL_UNSIGNED_BYTE)
    case GL_RGBA8I:         SizedFormatInfo(sf, GL_RGBA_INTEGER, GL_BYTE)
    case GL_RGBA8UI:        SizedFormatInfo(sf, GL_RGBA_INTEGER, GL_UNSIGNED_BYTE)
    case GL_RGBA8_SNORM:    SizedFormatInfo(sf, GL_RGBA, GL_BYTE)
    case GL_SRGB8:          SizedFormatInfo(sf, GL_RGB, GL_UNSIGNED_BYTE, sRGB)
    case GL_SRGB8_ALPHA8:   SizedFormatInfo(sf, GL_RGBA, GL_UNSIGNED_BYTE, sRGB)
    // Uncompressed depth/stencil formats
    case GL_DEPTH24_STENCIL8:   SizedFormatInfo(sf, GL_DEPTH_STENCIL, GL_UNSIGNED_INT_24_8)
    case GL_DEPTH32F_STENCIL8:  SizedFormatInfo(sf, GL_DEPTH_STENCIL, GL_FLOAT_32_UNSIGNED_INT_24_8_REV)
    case GL_DEPTH_COMPONENT16:  SizedFormatInfo(sf, GL_DEPTH_COMPONENT, GL_UNSIGNED_SHORT)
    case GL_DEPTH_COMPONENT24:  SizedFormatInfo(sf, GL_DEPTH_COMPONENT, GL_UNSIGNED_INT)
    case GL_DEPTH_COMPONENT32F: SizedFormatInfo(sf, GL_DEPTH_COMPONENT, GL_FLOAT)
    case GL_STENCIL_INDEX8:     SizedFormatInfo(sf, GL_STENCIL_INDEX, GL_UNSIGNED_BYTE)
    // Compressed formats
    case GL_COMPRESSED_R11_EAC:                        SizedFormatInfo(sf, GL_RED, GL_NONE, linear, EAC, 4, 4, 8)
    case GL_COMPRESSED_RG11_EAC:                       SizedFormatInfo(sf, GL_RG, GL_NONE, linear, EAC, 4, 4, 16)
    case GL_COMPRESSED_RGB8_ETC2:                      SizedFormatInfo(sf, GL_RGB, GL_NONE, linear, ETC2, 4, 4, 8)
    case GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:  SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ETC2, 4, 4, 8)
    case GL_COMPRESSED_RGBA8_ETC2_EAC:                 SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ETC2, 4, 4, 16)
    case GL_COMPRESSED_RGBA_ASTC_10x10:                SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 10, 10, 16)
    case GL_COMPRESSED_RGBA_ASTC_10x5:                 SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 10, 5, 16)
    case GL_COMPRESSED_RGBA_ASTC_10x6:                 SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 10, 6, 16)
    case GL_COMPRESSED_RGBA_ASTC_10x8:                 SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 10, 8, 16)
    case GL_COMPRESSED_RGBA_ASTC_12x10:                SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 12, 10, 16)
    case GL_COMPRESSED_RGBA_ASTC_12x12:                SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 12, 12, 16)
    case GL_COMPRESSED_RGBA_ASTC_4x4:                  SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 4, 4, 16)
    case GL_COMPRESSED_RGBA_ASTC_5x4:                  SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 5, 4, 16)
    case GL_COMPRESSED_RGBA_ASTC_5x5:                  SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 5, 5, 16)
    case GL_COMPRESSED_RGBA_ASTC_6x5:                  SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 6, 5, 16)
    case GL_COMPRESSED_RGBA_ASTC_6x6:                  SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 6, 6, 16)
    case GL_COMPRESSED_RGBA_ASTC_8x5:                  SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 8, 5, 16)
    case GL_COMPRESSED_RGBA_ASTC_8x6:                  SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 8, 6, 16)
    case GL_COMPRESSED_RGBA_ASTC_8x8:                  SizedFormatInfo(sf, GL_RGBA, GL_NONE, linear, ASTC, 8, 8, 16)
    case GL_COMPRESSED_SIGNED_R11_EAC:                 SizedFormatInfo(sf, GL_RED, GL_NONE, linear, EAC, 4, 4, 8)
    case GL_COMPRESSED_SIGNED_RG11_EAC:                SizedFormatInfo(sf, GL_RG, GL_NONE, linear, EAC, 4, 4, 16)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10:        SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 10, 10, 16)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5:         SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 10, 5, 16)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6:         SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 10, 6, 16)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8:         SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 10, 8, 16)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10:        SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 12, 10, 16)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12:        SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 12, 12, 16)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4:          SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 4, 4, 16)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4:          SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 5, 4, 16)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5:          SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 5, 5, 16)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5:          SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 6, 5, 16)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6:          SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 6, 6, 16)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5:          SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 8, 5, 16)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6:          SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 8, 6, 16)
    case GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8:          SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ASTC, 8, 8, 16)
    case GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:          SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ETC2, 4, 4, 16)
    case GL_COMPRESSED_SRGB8_ETC2:                     SizedFormatInfo(sf, GL_RGB, GL_NONE, sRGB, ETC2, 4, 4, 8)
    case GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: SizedFormatInfo(sf, GL_RGBA, GL_NONE, sRGB, ETC2, 4, 4, 8)
    case GL_ETC1_RGB8_OES:                             SizedFormatInfo(sf, GL_RGB, GL_NONE, linear, ETC1, 4, 4, 8)
    default:
      SizedFormatInfo(GL_NONE)
  }
}
