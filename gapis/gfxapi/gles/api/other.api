// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@internal
class MiscellaneousState {
  // Table 21.2: Current Values and Associated Data
  @unused GLint PatchVertices = 3

  // Table 21.4: Vertex Array Data (not in vertex array objects)
  // GLuint ArrayBufferBinding = 0
  // GLuint DrawIndirectBufferBinding = 0
  // GLuint VertexArrayBinding = 0
  GLboolean PrimitiveRestartFixedIndex = GL_FALSE

  // Table 21.6: Transformation State
  // GLuint TransformFeedbackBinding = 0

  // Table 21.38: Hints
  GLenum         GenerateMipmapHint           = GL_DONT_CARE
  @unused GLenum FragmentShaderDerivativeHint = GL_DONT_CARE

// Table 21.39: Compute Dispatch State
// GLuint DispatchIndirectBufferBinding = 0

// Table 21.57: Miscellaneous
// GLenum CurrentError = as!GLenum(0)
// GLboolean HasError = GL_FALSE
// Vec3u CurrentQuery = Vec3u(0,0,0)
// GLuint CopyReadBufferBinding = 0
// GLuint CopyWriteBufferBinding = 0
// GLint ResetNotificationStrategy /// TODO: See sec. 2.3.2
// GLuint TextureBufferBinding = 0
}

sub void SetCapability(GLenum capability, bool isIndexed, GLuint index, GLboolean enabled) {
  ctx := GetContext()
  switch (capability) {
    @if(Version.GLES20)
    case GL_BLEND: {
      // TODO: Remove the temporary variables once we fix bug 28858106
      if isIndexed {
        blend := ctx.FragmentOperations.Blend[as!DrawBufferIndex(index)]
        blend.Enabled = enabled
        ctx.FragmentOperations.Blend[as!DrawBufferIndex(index)] = blend
      } else {
        for i in 0 .. as!DrawBufferIndex(len(ctx.FragmentOperations.Blend)) {
          blend := ctx.FragmentOperations.Blend[i]
          blend.Enabled = enabled
          ctx.FragmentOperations.Blend[i] = blend
        }
      }
    }
    @if(Version.GLES20)
    case GL_CULL_FACE: {
      ctx.Rasterization.CullFace = enabled
    }
    @if(Version.GLES20)
    case GL_DEPTH_TEST: {
      ctx.FragmentOperations.Depth.Test = enabled
    }
    @if(Version.GLES20)
    case GL_DITHER: {
      ctx.FragmentOperations.Dither = enabled
    }
    @if(Version.GLES20)
    case GL_POLYGON_OFFSET_FILL: {
      ctx.Rasterization.PolygonOffsetFill = enabled
    }
    @if(Version.GLES20)
    case GL_SAMPLE_ALPHA_TO_COVERAGE: {
      ctx.Rasterization.SampleAlphaToCoverage = enabled
    }
    @if(Version.GLES20)
    case GL_SAMPLE_COVERAGE: {
      ctx.Rasterization.SampleCoverage = enabled
    }
    @if(Version.GLES20)
    case GL_SCISSOR_TEST: {
      ctx.FragmentOperations.Scissor.Test = enabled
    }
    @if(Version.GLES20)
    case GL_STENCIL_TEST: {
      ctx.FragmentOperations.Stencil.Test = enabled
    }
    @if(Version.GLES30)
    case GL_PRIMITIVE_RESTART_FIXED_INDEX: {
      ctx.Miscellaneous.PrimitiveRestartFixedIndex = enabled
    }
    @if(Version.GLES30)
    case GL_RASTERIZER_DISCARD: {
      ctx.Rasterization.RasterizerDiscard = enabled
    }
    @if(Version.GLES31)
    case GL_SAMPLE_MASK: {
      ctx.Rasterization.SampleMask = enabled
    }
    @if(Version.GLES32)
    case GL_DEBUG_OUTPUT: {
      ctx.Debug.Output = enabled
    }
    @if(Version.GLES32)
    case GL_DEBUG_OUTPUT_SYNCHRONOUS: {
      ctx.Debug.OutputSynchronous = enabled
    }
    @if(Extension.GL_QCOM_alpha_test)
    case GL_ALPHA_TEST_QCOM: {
      // TODO: Set state.
    }
    @if(Extension.GL_EXT_sRGB_write_control)
    case GL_FRAMEBUFFER_SRGB_EXT: {
      ctx.FragmentOperations.FramebufferSrgb = enabled
    }
    default: {
      glErrorInvalidEnum(capability)
    }
  }
}

sub GLboolean GetCapability(GLenum capability, GLuint index) {
  ctx := GetContext()
  // TODO: Add back the version checks.
  switch (capability) {
    @if(Version.GLES20)
    case GL_BLEND: {
    }
    @if(Version.GLES20)
    case GL_CULL_FACE,
        GL_DEPTH_TEST,
        GL_DITHER,
        GL_POLYGON_OFFSET_FILL,
        GL_SAMPLE_ALPHA_TO_COVERAGE,
        GL_SAMPLE_COVERAGE,
        GL_SCISSOR_TEST,
        GL_STENCIL_TEST: {
      if index > 0 { glErrorInvalidValue() }
    }
    @if(Version.GLES30)
    case GL_PRIMITIVE_RESTART_FIXED_INDEX,
        GL_RASTERIZER_DISCARD: {
      if index > 0 { glErrorInvalidValue() }
    }
    @if(Version.GLES31)
    case GL_SAMPLE_MASK: {
      if index > 0 { glErrorInvalidValue() }
    }
    @if(Version.GLES32)
    case GL_DEBUG_OUTPUT, GL_DEBUG_OUTPUT_SYNCHRONOUS: {
      if index > 0 { glErrorInvalidValue() }
    }
    default: {
      // glErrorInvalidEnum(capability)
    }
  }

  return switch (capability) {
    @if(Version.GLES20)
    case GL_BLEND: {
      ctx.FragmentOperations.Blend[as!DrawBufferIndex(index)].Enabled
    }
    @if(Version.GLES20)
    case GL_CULL_FACE: {
      ctx.Rasterization.CullFace
    }
    @if(Version.GLES20)
    case GL_DEPTH_TEST: {
      ctx.FragmentOperations.Depth.Test
    }
    @if(Version.GLES20)
    case GL_DITHER: {
      ctx.FragmentOperations.Dither
    }
    @if(Version.GLES20)
    case GL_POLYGON_OFFSET_FILL: {
      ctx.Rasterization.PolygonOffsetFill
    }
    @if(Version.GLES20)
    case GL_SAMPLE_ALPHA_TO_COVERAGE: {
      ctx.Rasterization.SampleAlphaToCoverage
    }
    @if(Version.GLES20)
    case GL_SAMPLE_COVERAGE: {
      ctx.Rasterization.SampleCoverage
    }
    @if(Version.GLES20)
    case GL_SCISSOR_TEST: {
      ctx.FragmentOperations.Scissor.Test
    }
    @if(Version.GLES20)
    case GL_STENCIL_TEST: {
      ctx.FragmentOperations.Stencil.Test
    }
    @if(Version.GLES30)
    case GL_PRIMITIVE_RESTART_FIXED_INDEX: {
      ctx.Miscellaneous.PrimitiveRestartFixedIndex
    }
    @if(Version.GLES30)
    case GL_RASTERIZER_DISCARD: {
      ctx.Rasterization.RasterizerDiscard
    }
    @if(Version.GLES31)
    case GL_SAMPLE_MASK: {
      ctx.Rasterization.SampleMask
    }
    @if(Version.GLES32)
    case GL_DEBUG_OUTPUT: {
      ctx.Debug.Output
    }
    @if(Version.GLES32)
    case GL_DEBUG_OUTPUT_SYNCHRONOUS: {
      ctx.Debug.OutputSynchronous
    }
    @if(Extension.GL_QCOM_alpha_test)
    case GL_ALPHA_TEST_QCOM: {
      GL_FALSE // TODO: Get state.
    }
    @if(Extension.GL_EXT_sRGB_write_control)
    case GL_FRAMEBUFFER_SRGB_EXT: {
      ctx.FragmentOperations.FramebufferSrgb
    }
    default: {
      // glErrorInvalidEnum(capability)
      GL_FALSE
    }
  }
}

@if(Version.GLES10)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnable.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glEnable.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glEnable.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glEnable.xhtml", Version.GLES32)
cmd void glDisable(GLenum capability) {
  SetCapability(capability, /* isIndexed */ false, 0, /* enabled */ GL_FALSE)
}

@if(Version.GLES32)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glEnable.xhtml", Version.GLES32)
cmd void glDisablei(GLenum capability, GLuint index) {
  Disablei(capability, index)
}

sub void Disablei(GLenum capability, GLuint index) {
  SetCapability(capability, /* isIndexed */ true, index, /* enabled */ GL_FALSE)
}

@if(Version.GLES10)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glEnable.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glEnable.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glEnable.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glEnable.xhtml", Version.GLES32)
cmd void glEnable(GLenum capability) {
  SetCapability(capability, /* isIndexed */ false, 0, /* enabled */ GL_TRUE)
}

@if(Version.GLES32)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glEnable.xhtml", Version.GLES32)
cmd void glEnablei(GLenum capability, GLuint index) {
  Enablei(capability, index)
}

sub void Enablei(GLenum capability, GLuint index) {
  SetCapability(capability, /* isIndexed */ true, index, /* enabled */ GL_TRUE)
}

@if(Version.GLES10)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glFinish.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glFinish.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glFinish.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glFinish.xhtml", Version.GLES32)
cmd void glFinish() {

}

@if(Version.GLES10)
@StartOfFrame // For daydream.  TODO: Use gvr-specific api call instead?
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glFlush.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glFlush.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glFlush.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glFlush.xhtml", Version.GLES32)
cmd void glFlush() {

}

@if(Version.GLES10)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetError.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glGetError.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glGetError.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetError.xhtml", Version.GLES32)
cmd GLenum glGetError() {

  return ?
}

@if(Version.GLES32)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glGetGraphicsResetStatus.xhtml", Version.GLES32)
cmd GLenum glGetGraphicsResetStatus() {
  GetGraphicsResetStatus()
  return ?
}

sub void GetGraphicsResetStatus() {
  // TODO
}

@if(Version.GLES10)
@doc("https://www.khronos.org/opengles/sdk/docs/man/xhtml/glHint.xml", Version.GLES20)
@doc("https://www.khronos.org/opengles/sdk/docs/man3/html/glHint.xhtml", Version.GLES30)
@doc("https://www.khronos.org/opengles/sdk/docs/man31/html/glHint.xhtml", Version.GLES31)
@doc("https://www.khronos.org/opengles/sdk/docs/man32/html/glHint.xhtml", Version.GLES32)
cmd void glHint(GLenum target, GLenum mode) {
  switch (mode) {
    case GL_DONT_CARE, GL_FASTEST, GL_NICEST: {
      // version 2.0
    }
    default: {
      glErrorInvalidEnum(mode)
    }
  }
  ctx := GetContext()
  switch (target) {
    @if(Version.GLES20)
    case GL_GENERATE_MIPMAP_HINT: {
      ctx.Miscellaneous.GenerateMipmapHint = mode
    }
    @if(Version.GLES30)
    case GL_FRAGMENT_SHADER_DERIVATIVE_HINT: {
      ctx.Miscellaneous.FragmentShaderDerivativeHint = mode
    }
    default: {
      glErrorInvalidEnum(target)
    }
  }

}
